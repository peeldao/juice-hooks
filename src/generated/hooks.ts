// Generated by @wagmi/cli@1.3.0 on 9/9/2023 at 5:18:00 PM
import {
  useNetwork,
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  Address,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from 'wagmi'
import {
  ReadContractResult,
  WriteContractMode,
  PrepareWriteContractResult,
} from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// JBController
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFFdD70C318915879d5192e8a0dcbFcB0285b3C98)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x7Cb86D43B665196BC719b6974D320bf674AFb395)
 */
export const jbControllerABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      {
        name: '_operatorStore',
        internalType: 'contract IJBOperatorStore',
        type: 'address',
      },
      {
        name: '_projects',
        internalType: 'contract IJBProjects',
        type: 'address',
      },
      {
        name: '_directory',
        internalType: 'contract IJBDirectory',
        type: 'address',
      },
      {
        name: '_fundingCycleStore',
        internalType: 'contract IJBFundingCycleStore',
        type: 'address',
      },
      {
        name: '_tokenStore',
        internalType: 'contract IJBTokenStore',
        type: 'address',
      },
      {
        name: '_splitsStore',
        internalType: 'contract IJBSplitsStore',
        type: 'address',
      },
    ],
  },
  {
    type: 'error',
    inputs: [],
    name: 'BURN_PAUSED_AND_SENDER_NOT_VALID_TERMINAL_DELEGATE',
  },
  { type: 'error', inputs: [], name: 'CANT_MIGRATE_TO_CURRENT_CONTROLLER' },
  { type: 'error', inputs: [], name: 'FUNDING_CYCLE_ALREADY_LAUNCHED' },
  { type: 'error', inputs: [], name: 'INVALID_BALLOT_REDEMPTION_RATE' },
  { type: 'error', inputs: [], name: 'INVALID_DISTRIBUTION_LIMIT' },
  { type: 'error', inputs: [], name: 'INVALID_DISTRIBUTION_LIMIT_CURRENCY' },
  { type: 'error', inputs: [], name: 'INVALID_OVERFLOW_ALLOWANCE' },
  { type: 'error', inputs: [], name: 'INVALID_OVERFLOW_ALLOWANCE_CURRENCY' },
  { type: 'error', inputs: [], name: 'INVALID_REDEMPTION_RATE' },
  { type: 'error', inputs: [], name: 'INVALID_RESERVED_RATE' },
  { type: 'error', inputs: [], name: 'MIGRATION_NOT_ALLOWED' },
  {
    type: 'error',
    inputs: [],
    name: 'MINT_NOT_ALLOWED_AND_NOT_TERMINAL_DELEGATE',
  },
  { type: 'error', inputs: [], name: 'NOT_CURRENT_CONTROLLER' },
  { type: 'error', inputs: [], name: 'NO_BURNABLE_TOKENS' },
  { type: 'error', inputs: [], name: 'OVERFLOW_ALERT' },
  {
    type: 'error',
    inputs: [
      { name: 'prod1', internalType: 'uint256', type: 'uint256' },
      { name: 'denominator', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'PRBMath__MulDivOverflow',
  },
  { type: 'error', inputs: [], name: 'UNAUTHORIZED' },
  { type: 'error', inputs: [], name: 'ZERO_TOKENS_TO_MINT' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'holder',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'projectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'tokenCount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'memo', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'BurnTokens',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'fundingCycleConfiguration',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'fundingCycleNumber',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'projectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'beneficiary',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'tokenCount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'beneficiaryTokenCount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'memo', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'DistributeReservedTokens',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'projectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'domain',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'group',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'split',
        internalType: 'struct JBSplit',
        type: 'tuple',
        components: [
          { name: 'preferClaimed', internalType: 'bool', type: 'bool' },
          { name: 'preferAddToBalance', internalType: 'bool', type: 'bool' },
          { name: 'percent', internalType: 'uint256', type: 'uint256' },
          { name: 'projectId', internalType: 'uint256', type: 'uint256' },
          {
            name: 'beneficiary',
            internalType: 'address payable',
            type: 'address',
          },
          { name: 'lockedUntil', internalType: 'uint256', type: 'uint256' },
          {
            name: 'allocator',
            internalType: 'contract IJBSplitAllocator',
            type: 'address',
          },
        ],
        indexed: false,
      },
      {
        name: 'tokenCount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'DistributeToReservedTokenSplit',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'configuration',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'projectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'memo', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'LaunchFundingCycles',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'configuration',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'projectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'memo', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'LaunchProject',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'projectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'to',
        internalType: 'contract IJBMigratable',
        type: 'address',
        indexed: false,
      },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Migrate',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'beneficiary',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'projectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'tokenCount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'beneficiaryTokenCount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'memo', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'reservedRate',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'MintTokens',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'projectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'from',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'PrepMigration',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'configuration',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'projectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'memo', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'ReconfigureFundingCycles',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'fundingCycleConfiguration',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'fundingCycleNumber',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'projectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'constraints',
        internalType: 'struct JBFundAccessConstraints',
        type: 'tuple',
        components: [
          {
            name: 'terminal',
            internalType: 'contract IJBPaymentTerminal',
            type: 'address',
          },
          { name: 'token', internalType: 'address', type: 'address' },
          {
            name: 'distributionLimit',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'distributionLimitCurrency',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'overflowAllowance',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'overflowAllowanceCurrency',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
        indexed: false,
      },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'SetFundAccessConstraints',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_holder', internalType: 'address', type: 'address' },
      { name: '_projectId', internalType: 'uint256', type: 'uint256' },
      { name: '_tokenCount', internalType: 'uint256', type: 'uint256' },
      { name: '_memo', internalType: 'string', type: 'string' },
      { name: '_preferClaimedTokens', internalType: 'bool', type: 'bool' },
    ],
    name: 'burnTokensOf',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_projectId', internalType: 'uint256', type: 'uint256' }],
    name: 'currentFundingCycleOf',
    outputs: [
      {
        name: 'fundingCycle',
        internalType: 'struct JBFundingCycle',
        type: 'tuple',
        components: [
          { name: 'number', internalType: 'uint256', type: 'uint256' },
          { name: 'configuration', internalType: 'uint256', type: 'uint256' },
          { name: 'basedOn', internalType: 'uint256', type: 'uint256' },
          { name: 'start', internalType: 'uint256', type: 'uint256' },
          { name: 'duration', internalType: 'uint256', type: 'uint256' },
          { name: 'weight', internalType: 'uint256', type: 'uint256' },
          { name: 'discountRate', internalType: 'uint256', type: 'uint256' },
          {
            name: 'ballot',
            internalType: 'contract IJBFundingCycleBallot',
            type: 'address',
          },
          { name: 'metadata', internalType: 'uint256', type: 'uint256' },
        ],
      },
      {
        name: 'metadata',
        internalType: 'struct JBFundingCycleMetadata',
        type: 'tuple',
        components: [
          {
            name: 'global',
            internalType: 'struct JBGlobalFundingCycleMetadata',
            type: 'tuple',
            components: [
              { name: 'allowSetTerminals', internalType: 'bool', type: 'bool' },
              {
                name: 'allowSetController',
                internalType: 'bool',
                type: 'bool',
              },
              { name: 'pauseTransfers', internalType: 'bool', type: 'bool' },
            ],
          },
          { name: 'reservedRate', internalType: 'uint256', type: 'uint256' },
          { name: 'redemptionRate', internalType: 'uint256', type: 'uint256' },
          {
            name: 'ballotRedemptionRate',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'pausePay', internalType: 'bool', type: 'bool' },
          { name: 'pauseDistributions', internalType: 'bool', type: 'bool' },
          { name: 'pauseRedeem', internalType: 'bool', type: 'bool' },
          { name: 'pauseBurn', internalType: 'bool', type: 'bool' },
          { name: 'allowMinting', internalType: 'bool', type: 'bool' },
          {
            name: 'allowTerminalMigration',
            internalType: 'bool',
            type: 'bool',
          },
          {
            name: 'allowControllerMigration',
            internalType: 'bool',
            type: 'bool',
          },
          { name: 'holdFees', internalType: 'bool', type: 'bool' },
          {
            name: 'preferClaimedTokenOverride',
            internalType: 'bool',
            type: 'bool',
          },
          {
            name: 'useTotalOverflowForRedemptions',
            internalType: 'bool',
            type: 'bool',
          },
          { name: 'useDataSourceForPay', internalType: 'bool', type: 'bool' },
          {
            name: 'useDataSourceForRedeem',
            internalType: 'bool',
            type: 'bool',
          },
          { name: 'dataSource', internalType: 'address', type: 'address' },
          { name: 'metadata', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'directory',
    outputs: [
      { name: '', internalType: 'contract IJBDirectory', type: 'address' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_projectId', internalType: 'uint256', type: 'uint256' },
      { name: '_memo', internalType: 'string', type: 'string' },
    ],
    name: 'distributeReservedTokensOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_projectId', internalType: 'uint256', type: 'uint256' },
      { name: '_configuration', internalType: 'uint256', type: 'uint256' },
      {
        name: '_terminal',
        internalType: 'contract IJBPaymentTerminal',
        type: 'address',
      },
      { name: '_token', internalType: 'address', type: 'address' },
    ],
    name: 'distributionLimitOf',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'fundingCycleStore',
    outputs: [
      {
        name: '',
        internalType: 'contract IJBFundingCycleStore',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_projectId', internalType: 'uint256', type: 'uint256' },
      { name: '_configuration', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getFundingCycleOf',
    outputs: [
      {
        name: 'fundingCycle',
        internalType: 'struct JBFundingCycle',
        type: 'tuple',
        components: [
          { name: 'number', internalType: 'uint256', type: 'uint256' },
          { name: 'configuration', internalType: 'uint256', type: 'uint256' },
          { name: 'basedOn', internalType: 'uint256', type: 'uint256' },
          { name: 'start', internalType: 'uint256', type: 'uint256' },
          { name: 'duration', internalType: 'uint256', type: 'uint256' },
          { name: 'weight', internalType: 'uint256', type: 'uint256' },
          { name: 'discountRate', internalType: 'uint256', type: 'uint256' },
          {
            name: 'ballot',
            internalType: 'contract IJBFundingCycleBallot',
            type: 'address',
          },
          { name: 'metadata', internalType: 'uint256', type: 'uint256' },
        ],
      },
      {
        name: 'metadata',
        internalType: 'struct JBFundingCycleMetadata',
        type: 'tuple',
        components: [
          {
            name: 'global',
            internalType: 'struct JBGlobalFundingCycleMetadata',
            type: 'tuple',
            components: [
              { name: 'allowSetTerminals', internalType: 'bool', type: 'bool' },
              {
                name: 'allowSetController',
                internalType: 'bool',
                type: 'bool',
              },
              { name: 'pauseTransfers', internalType: 'bool', type: 'bool' },
            ],
          },
          { name: 'reservedRate', internalType: 'uint256', type: 'uint256' },
          { name: 'redemptionRate', internalType: 'uint256', type: 'uint256' },
          {
            name: 'ballotRedemptionRate',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'pausePay', internalType: 'bool', type: 'bool' },
          { name: 'pauseDistributions', internalType: 'bool', type: 'bool' },
          { name: 'pauseRedeem', internalType: 'bool', type: 'bool' },
          { name: 'pauseBurn', internalType: 'bool', type: 'bool' },
          { name: 'allowMinting', internalType: 'bool', type: 'bool' },
          {
            name: 'allowTerminalMigration',
            internalType: 'bool',
            type: 'bool',
          },
          {
            name: 'allowControllerMigration',
            internalType: 'bool',
            type: 'bool',
          },
          { name: 'holdFees', internalType: 'bool', type: 'bool' },
          {
            name: 'preferClaimedTokenOverride',
            internalType: 'bool',
            type: 'bool',
          },
          {
            name: 'useTotalOverflowForRedemptions',
            internalType: 'bool',
            type: 'bool',
          },
          { name: 'useDataSourceForPay', internalType: 'bool', type: 'bool' },
          {
            name: 'useDataSourceForRedeem',
            internalType: 'bool',
            type: 'bool',
          },
          { name: 'dataSource', internalType: 'address', type: 'address' },
          { name: 'metadata', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_projectId', internalType: 'uint256', type: 'uint256' }],
    name: 'latestConfiguredFundingCycleOf',
    outputs: [
      {
        name: 'fundingCycle',
        internalType: 'struct JBFundingCycle',
        type: 'tuple',
        components: [
          { name: 'number', internalType: 'uint256', type: 'uint256' },
          { name: 'configuration', internalType: 'uint256', type: 'uint256' },
          { name: 'basedOn', internalType: 'uint256', type: 'uint256' },
          { name: 'start', internalType: 'uint256', type: 'uint256' },
          { name: 'duration', internalType: 'uint256', type: 'uint256' },
          { name: 'weight', internalType: 'uint256', type: 'uint256' },
          { name: 'discountRate', internalType: 'uint256', type: 'uint256' },
          {
            name: 'ballot',
            internalType: 'contract IJBFundingCycleBallot',
            type: 'address',
          },
          { name: 'metadata', internalType: 'uint256', type: 'uint256' },
        ],
      },
      {
        name: 'metadata',
        internalType: 'struct JBFundingCycleMetadata',
        type: 'tuple',
        components: [
          {
            name: 'global',
            internalType: 'struct JBGlobalFundingCycleMetadata',
            type: 'tuple',
            components: [
              { name: 'allowSetTerminals', internalType: 'bool', type: 'bool' },
              {
                name: 'allowSetController',
                internalType: 'bool',
                type: 'bool',
              },
              { name: 'pauseTransfers', internalType: 'bool', type: 'bool' },
            ],
          },
          { name: 'reservedRate', internalType: 'uint256', type: 'uint256' },
          { name: 'redemptionRate', internalType: 'uint256', type: 'uint256' },
          {
            name: 'ballotRedemptionRate',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'pausePay', internalType: 'bool', type: 'bool' },
          { name: 'pauseDistributions', internalType: 'bool', type: 'bool' },
          { name: 'pauseRedeem', internalType: 'bool', type: 'bool' },
          { name: 'pauseBurn', internalType: 'bool', type: 'bool' },
          { name: 'allowMinting', internalType: 'bool', type: 'bool' },
          {
            name: 'allowTerminalMigration',
            internalType: 'bool',
            type: 'bool',
          },
          {
            name: 'allowControllerMigration',
            internalType: 'bool',
            type: 'bool',
          },
          { name: 'holdFees', internalType: 'bool', type: 'bool' },
          {
            name: 'preferClaimedTokenOverride',
            internalType: 'bool',
            type: 'bool',
          },
          {
            name: 'useTotalOverflowForRedemptions',
            internalType: 'bool',
            type: 'bool',
          },
          { name: 'useDataSourceForPay', internalType: 'bool', type: 'bool' },
          {
            name: 'useDataSourceForRedeem',
            internalType: 'bool',
            type: 'bool',
          },
          { name: 'dataSource', internalType: 'address', type: 'address' },
          { name: 'metadata', internalType: 'uint256', type: 'uint256' },
        ],
      },
      {
        name: 'ballotState',
        internalType: 'enum JBBallotState',
        type: 'uint8',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_projectId', internalType: 'uint256', type: 'uint256' },
      {
        name: '_data',
        internalType: 'struct JBFundingCycleData',
        type: 'tuple',
        components: [
          { name: 'duration', internalType: 'uint256', type: 'uint256' },
          { name: 'weight', internalType: 'uint256', type: 'uint256' },
          { name: 'discountRate', internalType: 'uint256', type: 'uint256' },
          {
            name: 'ballot',
            internalType: 'contract IJBFundingCycleBallot',
            type: 'address',
          },
        ],
      },
      {
        name: '_metadata',
        internalType: 'struct JBFundingCycleMetadata',
        type: 'tuple',
        components: [
          {
            name: 'global',
            internalType: 'struct JBGlobalFundingCycleMetadata',
            type: 'tuple',
            components: [
              { name: 'allowSetTerminals', internalType: 'bool', type: 'bool' },
              {
                name: 'allowSetController',
                internalType: 'bool',
                type: 'bool',
              },
              { name: 'pauseTransfers', internalType: 'bool', type: 'bool' },
            ],
          },
          { name: 'reservedRate', internalType: 'uint256', type: 'uint256' },
          { name: 'redemptionRate', internalType: 'uint256', type: 'uint256' },
          {
            name: 'ballotRedemptionRate',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'pausePay', internalType: 'bool', type: 'bool' },
          { name: 'pauseDistributions', internalType: 'bool', type: 'bool' },
          { name: 'pauseRedeem', internalType: 'bool', type: 'bool' },
          { name: 'pauseBurn', internalType: 'bool', type: 'bool' },
          { name: 'allowMinting', internalType: 'bool', type: 'bool' },
          {
            name: 'allowTerminalMigration',
            internalType: 'bool',
            type: 'bool',
          },
          {
            name: 'allowControllerMigration',
            internalType: 'bool',
            type: 'bool',
          },
          { name: 'holdFees', internalType: 'bool', type: 'bool' },
          {
            name: 'preferClaimedTokenOverride',
            internalType: 'bool',
            type: 'bool',
          },
          {
            name: 'useTotalOverflowForRedemptions',
            internalType: 'bool',
            type: 'bool',
          },
          { name: 'useDataSourceForPay', internalType: 'bool', type: 'bool' },
          {
            name: 'useDataSourceForRedeem',
            internalType: 'bool',
            type: 'bool',
          },
          { name: 'dataSource', internalType: 'address', type: 'address' },
          { name: 'metadata', internalType: 'uint256', type: 'uint256' },
        ],
      },
      { name: '_mustStartAtOrAfter', internalType: 'uint256', type: 'uint256' },
      {
        name: '_groupedSplits',
        internalType: 'struct JBGroupedSplits[]',
        type: 'tuple[]',
        components: [
          { name: 'group', internalType: 'uint256', type: 'uint256' },
          {
            name: 'splits',
            internalType: 'struct JBSplit[]',
            type: 'tuple[]',
            components: [
              { name: 'preferClaimed', internalType: 'bool', type: 'bool' },
              {
                name: 'preferAddToBalance',
                internalType: 'bool',
                type: 'bool',
              },
              { name: 'percent', internalType: 'uint256', type: 'uint256' },
              { name: 'projectId', internalType: 'uint256', type: 'uint256' },
              {
                name: 'beneficiary',
                internalType: 'address payable',
                type: 'address',
              },
              { name: 'lockedUntil', internalType: 'uint256', type: 'uint256' },
              {
                name: 'allocator',
                internalType: 'contract IJBSplitAllocator',
                type: 'address',
              },
            ],
          },
        ],
      },
      {
        name: '_fundAccessConstraints',
        internalType: 'struct JBFundAccessConstraints[]',
        type: 'tuple[]',
        components: [
          {
            name: 'terminal',
            internalType: 'contract IJBPaymentTerminal',
            type: 'address',
          },
          { name: 'token', internalType: 'address', type: 'address' },
          {
            name: 'distributionLimit',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'distributionLimitCurrency',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'overflowAllowance',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'overflowAllowanceCurrency',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
      {
        name: '_terminals',
        internalType: 'contract IJBPaymentTerminal[]',
        type: 'address[]',
      },
      { name: '_memo', internalType: 'string', type: 'string' },
    ],
    name: 'launchFundingCyclesFor',
    outputs: [
      { name: 'configuration', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_owner', internalType: 'address', type: 'address' },
      {
        name: '_projectMetadata',
        internalType: 'struct JBProjectMetadata',
        type: 'tuple',
        components: [
          { name: 'content', internalType: 'string', type: 'string' },
          { name: 'domain', internalType: 'uint256', type: 'uint256' },
        ],
      },
      {
        name: '_data',
        internalType: 'struct JBFundingCycleData',
        type: 'tuple',
        components: [
          { name: 'duration', internalType: 'uint256', type: 'uint256' },
          { name: 'weight', internalType: 'uint256', type: 'uint256' },
          { name: 'discountRate', internalType: 'uint256', type: 'uint256' },
          {
            name: 'ballot',
            internalType: 'contract IJBFundingCycleBallot',
            type: 'address',
          },
        ],
      },
      {
        name: '_metadata',
        internalType: 'struct JBFundingCycleMetadata',
        type: 'tuple',
        components: [
          {
            name: 'global',
            internalType: 'struct JBGlobalFundingCycleMetadata',
            type: 'tuple',
            components: [
              { name: 'allowSetTerminals', internalType: 'bool', type: 'bool' },
              {
                name: 'allowSetController',
                internalType: 'bool',
                type: 'bool',
              },
              { name: 'pauseTransfers', internalType: 'bool', type: 'bool' },
            ],
          },
          { name: 'reservedRate', internalType: 'uint256', type: 'uint256' },
          { name: 'redemptionRate', internalType: 'uint256', type: 'uint256' },
          {
            name: 'ballotRedemptionRate',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'pausePay', internalType: 'bool', type: 'bool' },
          { name: 'pauseDistributions', internalType: 'bool', type: 'bool' },
          { name: 'pauseRedeem', internalType: 'bool', type: 'bool' },
          { name: 'pauseBurn', internalType: 'bool', type: 'bool' },
          { name: 'allowMinting', internalType: 'bool', type: 'bool' },
          {
            name: 'allowTerminalMigration',
            internalType: 'bool',
            type: 'bool',
          },
          {
            name: 'allowControllerMigration',
            internalType: 'bool',
            type: 'bool',
          },
          { name: 'holdFees', internalType: 'bool', type: 'bool' },
          {
            name: 'preferClaimedTokenOverride',
            internalType: 'bool',
            type: 'bool',
          },
          {
            name: 'useTotalOverflowForRedemptions',
            internalType: 'bool',
            type: 'bool',
          },
          { name: 'useDataSourceForPay', internalType: 'bool', type: 'bool' },
          {
            name: 'useDataSourceForRedeem',
            internalType: 'bool',
            type: 'bool',
          },
          { name: 'dataSource', internalType: 'address', type: 'address' },
          { name: 'metadata', internalType: 'uint256', type: 'uint256' },
        ],
      },
      { name: '_mustStartAtOrAfter', internalType: 'uint256', type: 'uint256' },
      {
        name: '_groupedSplits',
        internalType: 'struct JBGroupedSplits[]',
        type: 'tuple[]',
        components: [
          { name: 'group', internalType: 'uint256', type: 'uint256' },
          {
            name: 'splits',
            internalType: 'struct JBSplit[]',
            type: 'tuple[]',
            components: [
              { name: 'preferClaimed', internalType: 'bool', type: 'bool' },
              {
                name: 'preferAddToBalance',
                internalType: 'bool',
                type: 'bool',
              },
              { name: 'percent', internalType: 'uint256', type: 'uint256' },
              { name: 'projectId', internalType: 'uint256', type: 'uint256' },
              {
                name: 'beneficiary',
                internalType: 'address payable',
                type: 'address',
              },
              { name: 'lockedUntil', internalType: 'uint256', type: 'uint256' },
              {
                name: 'allocator',
                internalType: 'contract IJBSplitAllocator',
                type: 'address',
              },
            ],
          },
        ],
      },
      {
        name: '_fundAccessConstraints',
        internalType: 'struct JBFundAccessConstraints[]',
        type: 'tuple[]',
        components: [
          {
            name: 'terminal',
            internalType: 'contract IJBPaymentTerminal',
            type: 'address',
          },
          { name: 'token', internalType: 'address', type: 'address' },
          {
            name: 'distributionLimit',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'distributionLimitCurrency',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'overflowAllowance',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'overflowAllowanceCurrency',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
      {
        name: '_terminals',
        internalType: 'contract IJBPaymentTerminal[]',
        type: 'address[]',
      },
      { name: '_memo', internalType: 'string', type: 'string' },
    ],
    name: 'launchProjectFor',
    outputs: [{ name: 'projectId', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_projectId', internalType: 'uint256', type: 'uint256' },
      { name: '_to', internalType: 'contract IJBMigratable', type: 'address' },
    ],
    name: 'migrate',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_projectId', internalType: 'uint256', type: 'uint256' },
      { name: '_tokenCount', internalType: 'uint256', type: 'uint256' },
      { name: '_beneficiary', internalType: 'address', type: 'address' },
      { name: '_memo', internalType: 'string', type: 'string' },
      { name: '_preferClaimedTokens', internalType: 'bool', type: 'bool' },
      { name: '_useReservedRate', internalType: 'bool', type: 'bool' },
    ],
    name: 'mintTokensOf',
    outputs: [
      {
        name: 'beneficiaryTokenCount',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'operatorStore',
    outputs: [
      { name: '', internalType: 'contract IJBOperatorStore', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_projectId', internalType: 'uint256', type: 'uint256' },
      { name: '_configuration', internalType: 'uint256', type: 'uint256' },
      {
        name: '_terminal',
        internalType: 'contract IJBPaymentTerminal',
        type: 'address',
      },
      { name: '_token', internalType: 'address', type: 'address' },
    ],
    name: 'overflowAllowanceOf',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_projectId', internalType: 'uint256', type: 'uint256' },
      { name: '_from', internalType: 'address', type: 'address' },
    ],
    name: 'prepForMigrationOf',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'projects',
    outputs: [
      { name: '', internalType: 'contract IJBProjects', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_projectId', internalType: 'uint256', type: 'uint256' }],
    name: 'queuedFundingCycleOf',
    outputs: [
      {
        name: 'fundingCycle',
        internalType: 'struct JBFundingCycle',
        type: 'tuple',
        components: [
          { name: 'number', internalType: 'uint256', type: 'uint256' },
          { name: 'configuration', internalType: 'uint256', type: 'uint256' },
          { name: 'basedOn', internalType: 'uint256', type: 'uint256' },
          { name: 'start', internalType: 'uint256', type: 'uint256' },
          { name: 'duration', internalType: 'uint256', type: 'uint256' },
          { name: 'weight', internalType: 'uint256', type: 'uint256' },
          { name: 'discountRate', internalType: 'uint256', type: 'uint256' },
          {
            name: 'ballot',
            internalType: 'contract IJBFundingCycleBallot',
            type: 'address',
          },
          { name: 'metadata', internalType: 'uint256', type: 'uint256' },
        ],
      },
      {
        name: 'metadata',
        internalType: 'struct JBFundingCycleMetadata',
        type: 'tuple',
        components: [
          {
            name: 'global',
            internalType: 'struct JBGlobalFundingCycleMetadata',
            type: 'tuple',
            components: [
              { name: 'allowSetTerminals', internalType: 'bool', type: 'bool' },
              {
                name: 'allowSetController',
                internalType: 'bool',
                type: 'bool',
              },
              { name: 'pauseTransfers', internalType: 'bool', type: 'bool' },
            ],
          },
          { name: 'reservedRate', internalType: 'uint256', type: 'uint256' },
          { name: 'redemptionRate', internalType: 'uint256', type: 'uint256' },
          {
            name: 'ballotRedemptionRate',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'pausePay', internalType: 'bool', type: 'bool' },
          { name: 'pauseDistributions', internalType: 'bool', type: 'bool' },
          { name: 'pauseRedeem', internalType: 'bool', type: 'bool' },
          { name: 'pauseBurn', internalType: 'bool', type: 'bool' },
          { name: 'allowMinting', internalType: 'bool', type: 'bool' },
          {
            name: 'allowTerminalMigration',
            internalType: 'bool',
            type: 'bool',
          },
          {
            name: 'allowControllerMigration',
            internalType: 'bool',
            type: 'bool',
          },
          { name: 'holdFees', internalType: 'bool', type: 'bool' },
          {
            name: 'preferClaimedTokenOverride',
            internalType: 'bool',
            type: 'bool',
          },
          {
            name: 'useTotalOverflowForRedemptions',
            internalType: 'bool',
            type: 'bool',
          },
          { name: 'useDataSourceForPay', internalType: 'bool', type: 'bool' },
          {
            name: 'useDataSourceForRedeem',
            internalType: 'bool',
            type: 'bool',
          },
          { name: 'dataSource', internalType: 'address', type: 'address' },
          { name: 'metadata', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_projectId', internalType: 'uint256', type: 'uint256' },
      {
        name: '_data',
        internalType: 'struct JBFundingCycleData',
        type: 'tuple',
        components: [
          { name: 'duration', internalType: 'uint256', type: 'uint256' },
          { name: 'weight', internalType: 'uint256', type: 'uint256' },
          { name: 'discountRate', internalType: 'uint256', type: 'uint256' },
          {
            name: 'ballot',
            internalType: 'contract IJBFundingCycleBallot',
            type: 'address',
          },
        ],
      },
      {
        name: '_metadata',
        internalType: 'struct JBFundingCycleMetadata',
        type: 'tuple',
        components: [
          {
            name: 'global',
            internalType: 'struct JBGlobalFundingCycleMetadata',
            type: 'tuple',
            components: [
              { name: 'allowSetTerminals', internalType: 'bool', type: 'bool' },
              {
                name: 'allowSetController',
                internalType: 'bool',
                type: 'bool',
              },
              { name: 'pauseTransfers', internalType: 'bool', type: 'bool' },
            ],
          },
          { name: 'reservedRate', internalType: 'uint256', type: 'uint256' },
          { name: 'redemptionRate', internalType: 'uint256', type: 'uint256' },
          {
            name: 'ballotRedemptionRate',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'pausePay', internalType: 'bool', type: 'bool' },
          { name: 'pauseDistributions', internalType: 'bool', type: 'bool' },
          { name: 'pauseRedeem', internalType: 'bool', type: 'bool' },
          { name: 'pauseBurn', internalType: 'bool', type: 'bool' },
          { name: 'allowMinting', internalType: 'bool', type: 'bool' },
          {
            name: 'allowTerminalMigration',
            internalType: 'bool',
            type: 'bool',
          },
          {
            name: 'allowControllerMigration',
            internalType: 'bool',
            type: 'bool',
          },
          { name: 'holdFees', internalType: 'bool', type: 'bool' },
          {
            name: 'preferClaimedTokenOverride',
            internalType: 'bool',
            type: 'bool',
          },
          {
            name: 'useTotalOverflowForRedemptions',
            internalType: 'bool',
            type: 'bool',
          },
          { name: 'useDataSourceForPay', internalType: 'bool', type: 'bool' },
          {
            name: 'useDataSourceForRedeem',
            internalType: 'bool',
            type: 'bool',
          },
          { name: 'dataSource', internalType: 'address', type: 'address' },
          { name: 'metadata', internalType: 'uint256', type: 'uint256' },
        ],
      },
      { name: '_mustStartAtOrAfter', internalType: 'uint256', type: 'uint256' },
      {
        name: '_groupedSplits',
        internalType: 'struct JBGroupedSplits[]',
        type: 'tuple[]',
        components: [
          { name: 'group', internalType: 'uint256', type: 'uint256' },
          {
            name: 'splits',
            internalType: 'struct JBSplit[]',
            type: 'tuple[]',
            components: [
              { name: 'preferClaimed', internalType: 'bool', type: 'bool' },
              {
                name: 'preferAddToBalance',
                internalType: 'bool',
                type: 'bool',
              },
              { name: 'percent', internalType: 'uint256', type: 'uint256' },
              { name: 'projectId', internalType: 'uint256', type: 'uint256' },
              {
                name: 'beneficiary',
                internalType: 'address payable',
                type: 'address',
              },
              { name: 'lockedUntil', internalType: 'uint256', type: 'uint256' },
              {
                name: 'allocator',
                internalType: 'contract IJBSplitAllocator',
                type: 'address',
              },
            ],
          },
        ],
      },
      {
        name: '_fundAccessConstraints',
        internalType: 'struct JBFundAccessConstraints[]',
        type: 'tuple[]',
        components: [
          {
            name: 'terminal',
            internalType: 'contract IJBPaymentTerminal',
            type: 'address',
          },
          { name: 'token', internalType: 'address', type: 'address' },
          {
            name: 'distributionLimit',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'distributionLimitCurrency',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'overflowAllowance',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'overflowAllowanceCurrency',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
      { name: '_memo', internalType: 'string', type: 'string' },
    ],
    name: 'reconfigureFundingCyclesOf',
    outputs: [
      { name: 'configuration', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_projectId', internalType: 'uint256', type: 'uint256' },
      { name: '_reservedRate', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'reservedTokenBalanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'splitsStore',
    outputs: [
      { name: '', internalType: 'contract IJBSplitsStore', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'tokenStore',
    outputs: [
      { name: '', internalType: 'contract IJBTokenStore', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_projectId', internalType: 'uint256', type: 'uint256' },
      { name: '_reservedRate', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'totalOutstandingTokensOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFFdD70C318915879d5192e8a0dcbFcB0285b3C98)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x7Cb86D43B665196BC719b6974D320bf674AFb395)
 */
export const jbControllerAddress = {
  1: '0xFFdD70C318915879d5192e8a0dcbFcB0285b3C98',
  5: '0x7Cb86D43B665196BC719b6974D320bf674AFb395',
} as const

/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFFdD70C318915879d5192e8a0dcbFcB0285b3C98)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x7Cb86D43B665196BC719b6974D320bf674AFb395)
 */
export const jbControllerConfig = {
  address: jbControllerAddress,
  abi: jbControllerABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// JBController3_1
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x97a5b9D9F0F7cD676B69f584F29048D0Ef4BB59b)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1d260DE91233e650F136Bf35f8A4ea1F2b68aDB6)
 */
export const jbController3_1ABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      {
        name: '_operatorStore',
        internalType: 'contract IJBOperatorStore',
        type: 'address',
      },
      {
        name: '_projects',
        internalType: 'contract IJBProjects',
        type: 'address',
      },
      {
        name: '_directory',
        internalType: 'contract IJBDirectory',
        type: 'address',
      },
      {
        name: '_fundingCycleStore',
        internalType: 'contract IJBFundingCycleStore',
        type: 'address',
      },
      {
        name: '_tokenStore',
        internalType: 'contract IJBTokenStore',
        type: 'address',
      },
      {
        name: '_splitsStore',
        internalType: 'contract IJBSplitsStore',
        type: 'address',
      },
      {
        name: '_fundAccessConstraintsStore',
        internalType: 'contract IJBFundAccessConstraintsStore',
        type: 'address',
      },
    ],
  },
  {
    type: 'error',
    inputs: [],
    name: 'BURN_PAUSED_AND_SENDER_NOT_VALID_TERMINAL_DELEGATE',
  },
  { type: 'error', inputs: [], name: 'CANT_MIGRATE_TO_CURRENT_CONTROLLER' },
  { type: 'error', inputs: [], name: 'FUNDING_CYCLE_ALREADY_LAUNCHED' },
  { type: 'error', inputs: [], name: 'INVALID_BALLOT_REDEMPTION_RATE' },
  { type: 'error', inputs: [], name: 'INVALID_REDEMPTION_RATE' },
  { type: 'error', inputs: [], name: 'INVALID_RESERVED_RATE' },
  { type: 'error', inputs: [], name: 'MIGRATION_NOT_ALLOWED' },
  {
    type: 'error',
    inputs: [],
    name: 'MINT_NOT_ALLOWED_AND_NOT_TERMINAL_DELEGATE',
  },
  { type: 'error', inputs: [], name: 'NOT_CURRENT_CONTROLLER' },
  { type: 'error', inputs: [], name: 'NO_BURNABLE_TOKENS' },
  { type: 'error', inputs: [], name: 'OVERFLOW_ALERT' },
  {
    type: 'error',
    inputs: [
      { name: 'prod1', internalType: 'uint256', type: 'uint256' },
      { name: 'denominator', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'PRBMath__MulDivOverflow',
  },
  { type: 'error', inputs: [], name: 'UNAUTHORIZED' },
  { type: 'error', inputs: [], name: 'ZERO_TOKENS_TO_MINT' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'holder',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'projectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'tokenCount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'memo', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'BurnTokens',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'fundingCycleConfiguration',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'fundingCycleNumber',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'projectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'beneficiary',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'tokenCount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'beneficiaryTokenCount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'memo', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'DistributeReservedTokens',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'projectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'domain',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'group',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'split',
        internalType: 'struct JBSplit',
        type: 'tuple',
        components: [
          { name: 'preferClaimed', internalType: 'bool', type: 'bool' },
          { name: 'preferAddToBalance', internalType: 'bool', type: 'bool' },
          { name: 'percent', internalType: 'uint256', type: 'uint256' },
          { name: 'projectId', internalType: 'uint256', type: 'uint256' },
          {
            name: 'beneficiary',
            internalType: 'address payable',
            type: 'address',
          },
          { name: 'lockedUntil', internalType: 'uint256', type: 'uint256' },
          {
            name: 'allocator',
            internalType: 'contract IJBSplitAllocator',
            type: 'address',
          },
        ],
        indexed: false,
      },
      {
        name: 'tokenCount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'DistributeToReservedTokenSplit',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'configuration',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'projectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'memo', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'LaunchFundingCycles',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'configuration',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'projectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'memo', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'LaunchProject',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'projectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'to',
        internalType: 'contract IJBMigratable',
        type: 'address',
        indexed: false,
      },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Migrate',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'beneficiary',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'projectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'tokenCount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'beneficiaryTokenCount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'memo', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'reservedRate',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'MintTokens',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'projectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'from',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'PrepMigration',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'configuration',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'projectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'memo', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'ReconfigureFundingCycles',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_holder', internalType: 'address', type: 'address' },
      { name: '_projectId', internalType: 'uint256', type: 'uint256' },
      { name: '_tokenCount', internalType: 'uint256', type: 'uint256' },
      { name: '_memo', internalType: 'string', type: 'string' },
      { name: '_preferClaimedTokens', internalType: 'bool', type: 'bool' },
    ],
    name: 'burnTokensOf',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_projectId', internalType: 'uint256', type: 'uint256' }],
    name: 'currentFundingCycleOf',
    outputs: [
      {
        name: 'fundingCycle',
        internalType: 'struct JBFundingCycle',
        type: 'tuple',
        components: [
          { name: 'number', internalType: 'uint256', type: 'uint256' },
          { name: 'configuration', internalType: 'uint256', type: 'uint256' },
          { name: 'basedOn', internalType: 'uint256', type: 'uint256' },
          { name: 'start', internalType: 'uint256', type: 'uint256' },
          { name: 'duration', internalType: 'uint256', type: 'uint256' },
          { name: 'weight', internalType: 'uint256', type: 'uint256' },
          { name: 'discountRate', internalType: 'uint256', type: 'uint256' },
          {
            name: 'ballot',
            internalType: 'contract IJBFundingCycleBallot',
            type: 'address',
          },
          { name: 'metadata', internalType: 'uint256', type: 'uint256' },
        ],
      },
      {
        name: 'metadata',
        internalType: 'struct JBFundingCycleMetadata',
        type: 'tuple',
        components: [
          {
            name: 'global',
            internalType: 'struct JBGlobalFundingCycleMetadata',
            type: 'tuple',
            components: [
              { name: 'allowSetTerminals', internalType: 'bool', type: 'bool' },
              {
                name: 'allowSetController',
                internalType: 'bool',
                type: 'bool',
              },
              { name: 'pauseTransfers', internalType: 'bool', type: 'bool' },
            ],
          },
          { name: 'reservedRate', internalType: 'uint256', type: 'uint256' },
          { name: 'redemptionRate', internalType: 'uint256', type: 'uint256' },
          {
            name: 'ballotRedemptionRate',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'pausePay', internalType: 'bool', type: 'bool' },
          { name: 'pauseDistributions', internalType: 'bool', type: 'bool' },
          { name: 'pauseRedeem', internalType: 'bool', type: 'bool' },
          { name: 'pauseBurn', internalType: 'bool', type: 'bool' },
          { name: 'allowMinting', internalType: 'bool', type: 'bool' },
          {
            name: 'allowTerminalMigration',
            internalType: 'bool',
            type: 'bool',
          },
          {
            name: 'allowControllerMigration',
            internalType: 'bool',
            type: 'bool',
          },
          { name: 'holdFees', internalType: 'bool', type: 'bool' },
          {
            name: 'preferClaimedTokenOverride',
            internalType: 'bool',
            type: 'bool',
          },
          {
            name: 'useTotalOverflowForRedemptions',
            internalType: 'bool',
            type: 'bool',
          },
          { name: 'useDataSourceForPay', internalType: 'bool', type: 'bool' },
          {
            name: 'useDataSourceForRedeem',
            internalType: 'bool',
            type: 'bool',
          },
          { name: 'dataSource', internalType: 'address', type: 'address' },
          { name: 'metadata', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'directory',
    outputs: [
      { name: '', internalType: 'contract IJBDirectory', type: 'address' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_projectId', internalType: 'uint256', type: 'uint256' },
      { name: '_memo', internalType: 'string', type: 'string' },
    ],
    name: 'distributeReservedTokensOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'fundAccessConstraintsStore',
    outputs: [
      {
        name: '',
        internalType: 'contract IJBFundAccessConstraintsStore',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'fundingCycleStore',
    outputs: [
      {
        name: '',
        internalType: 'contract IJBFundingCycleStore',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_projectId', internalType: 'uint256', type: 'uint256' },
      { name: '_configuration', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getFundingCycleOf',
    outputs: [
      {
        name: 'fundingCycle',
        internalType: 'struct JBFundingCycle',
        type: 'tuple',
        components: [
          { name: 'number', internalType: 'uint256', type: 'uint256' },
          { name: 'configuration', internalType: 'uint256', type: 'uint256' },
          { name: 'basedOn', internalType: 'uint256', type: 'uint256' },
          { name: 'start', internalType: 'uint256', type: 'uint256' },
          { name: 'duration', internalType: 'uint256', type: 'uint256' },
          { name: 'weight', internalType: 'uint256', type: 'uint256' },
          { name: 'discountRate', internalType: 'uint256', type: 'uint256' },
          {
            name: 'ballot',
            internalType: 'contract IJBFundingCycleBallot',
            type: 'address',
          },
          { name: 'metadata', internalType: 'uint256', type: 'uint256' },
        ],
      },
      {
        name: 'metadata',
        internalType: 'struct JBFundingCycleMetadata',
        type: 'tuple',
        components: [
          {
            name: 'global',
            internalType: 'struct JBGlobalFundingCycleMetadata',
            type: 'tuple',
            components: [
              { name: 'allowSetTerminals', internalType: 'bool', type: 'bool' },
              {
                name: 'allowSetController',
                internalType: 'bool',
                type: 'bool',
              },
              { name: 'pauseTransfers', internalType: 'bool', type: 'bool' },
            ],
          },
          { name: 'reservedRate', internalType: 'uint256', type: 'uint256' },
          { name: 'redemptionRate', internalType: 'uint256', type: 'uint256' },
          {
            name: 'ballotRedemptionRate',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'pausePay', internalType: 'bool', type: 'bool' },
          { name: 'pauseDistributions', internalType: 'bool', type: 'bool' },
          { name: 'pauseRedeem', internalType: 'bool', type: 'bool' },
          { name: 'pauseBurn', internalType: 'bool', type: 'bool' },
          { name: 'allowMinting', internalType: 'bool', type: 'bool' },
          {
            name: 'allowTerminalMigration',
            internalType: 'bool',
            type: 'bool',
          },
          {
            name: 'allowControllerMigration',
            internalType: 'bool',
            type: 'bool',
          },
          { name: 'holdFees', internalType: 'bool', type: 'bool' },
          {
            name: 'preferClaimedTokenOverride',
            internalType: 'bool',
            type: 'bool',
          },
          {
            name: 'useTotalOverflowForRedemptions',
            internalType: 'bool',
            type: 'bool',
          },
          { name: 'useDataSourceForPay', internalType: 'bool', type: 'bool' },
          {
            name: 'useDataSourceForRedeem',
            internalType: 'bool',
            type: 'bool',
          },
          { name: 'dataSource', internalType: 'address', type: 'address' },
          { name: 'metadata', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_projectId', internalType: 'uint256', type: 'uint256' }],
    name: 'latestConfiguredFundingCycleOf',
    outputs: [
      {
        name: 'fundingCycle',
        internalType: 'struct JBFundingCycle',
        type: 'tuple',
        components: [
          { name: 'number', internalType: 'uint256', type: 'uint256' },
          { name: 'configuration', internalType: 'uint256', type: 'uint256' },
          { name: 'basedOn', internalType: 'uint256', type: 'uint256' },
          { name: 'start', internalType: 'uint256', type: 'uint256' },
          { name: 'duration', internalType: 'uint256', type: 'uint256' },
          { name: 'weight', internalType: 'uint256', type: 'uint256' },
          { name: 'discountRate', internalType: 'uint256', type: 'uint256' },
          {
            name: 'ballot',
            internalType: 'contract IJBFundingCycleBallot',
            type: 'address',
          },
          { name: 'metadata', internalType: 'uint256', type: 'uint256' },
        ],
      },
      {
        name: 'metadata',
        internalType: 'struct JBFundingCycleMetadata',
        type: 'tuple',
        components: [
          {
            name: 'global',
            internalType: 'struct JBGlobalFundingCycleMetadata',
            type: 'tuple',
            components: [
              { name: 'allowSetTerminals', internalType: 'bool', type: 'bool' },
              {
                name: 'allowSetController',
                internalType: 'bool',
                type: 'bool',
              },
              { name: 'pauseTransfers', internalType: 'bool', type: 'bool' },
            ],
          },
          { name: 'reservedRate', internalType: 'uint256', type: 'uint256' },
          { name: 'redemptionRate', internalType: 'uint256', type: 'uint256' },
          {
            name: 'ballotRedemptionRate',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'pausePay', internalType: 'bool', type: 'bool' },
          { name: 'pauseDistributions', internalType: 'bool', type: 'bool' },
          { name: 'pauseRedeem', internalType: 'bool', type: 'bool' },
          { name: 'pauseBurn', internalType: 'bool', type: 'bool' },
          { name: 'allowMinting', internalType: 'bool', type: 'bool' },
          {
            name: 'allowTerminalMigration',
            internalType: 'bool',
            type: 'bool',
          },
          {
            name: 'allowControllerMigration',
            internalType: 'bool',
            type: 'bool',
          },
          { name: 'holdFees', internalType: 'bool', type: 'bool' },
          {
            name: 'preferClaimedTokenOverride',
            internalType: 'bool',
            type: 'bool',
          },
          {
            name: 'useTotalOverflowForRedemptions',
            internalType: 'bool',
            type: 'bool',
          },
          { name: 'useDataSourceForPay', internalType: 'bool', type: 'bool' },
          {
            name: 'useDataSourceForRedeem',
            internalType: 'bool',
            type: 'bool',
          },
          { name: 'dataSource', internalType: 'address', type: 'address' },
          { name: 'metadata', internalType: 'uint256', type: 'uint256' },
        ],
      },
      {
        name: 'ballotState',
        internalType: 'enum JBBallotState',
        type: 'uint8',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_projectId', internalType: 'uint256', type: 'uint256' },
      {
        name: '_data',
        internalType: 'struct JBFundingCycleData',
        type: 'tuple',
        components: [
          { name: 'duration', internalType: 'uint256', type: 'uint256' },
          { name: 'weight', internalType: 'uint256', type: 'uint256' },
          { name: 'discountRate', internalType: 'uint256', type: 'uint256' },
          {
            name: 'ballot',
            internalType: 'contract IJBFundingCycleBallot',
            type: 'address',
          },
        ],
      },
      {
        name: '_metadata',
        internalType: 'struct JBFundingCycleMetadata',
        type: 'tuple',
        components: [
          {
            name: 'global',
            internalType: 'struct JBGlobalFundingCycleMetadata',
            type: 'tuple',
            components: [
              { name: 'allowSetTerminals', internalType: 'bool', type: 'bool' },
              {
                name: 'allowSetController',
                internalType: 'bool',
                type: 'bool',
              },
              { name: 'pauseTransfers', internalType: 'bool', type: 'bool' },
            ],
          },
          { name: 'reservedRate', internalType: 'uint256', type: 'uint256' },
          { name: 'redemptionRate', internalType: 'uint256', type: 'uint256' },
          {
            name: 'ballotRedemptionRate',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'pausePay', internalType: 'bool', type: 'bool' },
          { name: 'pauseDistributions', internalType: 'bool', type: 'bool' },
          { name: 'pauseRedeem', internalType: 'bool', type: 'bool' },
          { name: 'pauseBurn', internalType: 'bool', type: 'bool' },
          { name: 'allowMinting', internalType: 'bool', type: 'bool' },
          {
            name: 'allowTerminalMigration',
            internalType: 'bool',
            type: 'bool',
          },
          {
            name: 'allowControllerMigration',
            internalType: 'bool',
            type: 'bool',
          },
          { name: 'holdFees', internalType: 'bool', type: 'bool' },
          {
            name: 'preferClaimedTokenOverride',
            internalType: 'bool',
            type: 'bool',
          },
          {
            name: 'useTotalOverflowForRedemptions',
            internalType: 'bool',
            type: 'bool',
          },
          { name: 'useDataSourceForPay', internalType: 'bool', type: 'bool' },
          {
            name: 'useDataSourceForRedeem',
            internalType: 'bool',
            type: 'bool',
          },
          { name: 'dataSource', internalType: 'address', type: 'address' },
          { name: 'metadata', internalType: 'uint256', type: 'uint256' },
        ],
      },
      { name: '_mustStartAtOrAfter', internalType: 'uint256', type: 'uint256' },
      {
        name: '_groupedSplits',
        internalType: 'struct JBGroupedSplits[]',
        type: 'tuple[]',
        components: [
          { name: 'group', internalType: 'uint256', type: 'uint256' },
          {
            name: 'splits',
            internalType: 'struct JBSplit[]',
            type: 'tuple[]',
            components: [
              { name: 'preferClaimed', internalType: 'bool', type: 'bool' },
              {
                name: 'preferAddToBalance',
                internalType: 'bool',
                type: 'bool',
              },
              { name: 'percent', internalType: 'uint256', type: 'uint256' },
              { name: 'projectId', internalType: 'uint256', type: 'uint256' },
              {
                name: 'beneficiary',
                internalType: 'address payable',
                type: 'address',
              },
              { name: 'lockedUntil', internalType: 'uint256', type: 'uint256' },
              {
                name: 'allocator',
                internalType: 'contract IJBSplitAllocator',
                type: 'address',
              },
            ],
          },
        ],
      },
      {
        name: '_fundAccessConstraints',
        internalType: 'struct JBFundAccessConstraints[]',
        type: 'tuple[]',
        components: [
          {
            name: 'terminal',
            internalType: 'contract IJBPaymentTerminal',
            type: 'address',
          },
          { name: 'token', internalType: 'address', type: 'address' },
          {
            name: 'distributionLimit',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'distributionLimitCurrency',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'overflowAllowance',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'overflowAllowanceCurrency',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
      {
        name: '_terminals',
        internalType: 'contract IJBPaymentTerminal[]',
        type: 'address[]',
      },
      { name: '_memo', internalType: 'string', type: 'string' },
    ],
    name: 'launchFundingCyclesFor',
    outputs: [
      { name: 'configuration', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_owner', internalType: 'address', type: 'address' },
      {
        name: '_projectMetadata',
        internalType: 'struct JBProjectMetadata',
        type: 'tuple',
        components: [
          { name: 'content', internalType: 'string', type: 'string' },
          { name: 'domain', internalType: 'uint256', type: 'uint256' },
        ],
      },
      {
        name: '_data',
        internalType: 'struct JBFundingCycleData',
        type: 'tuple',
        components: [
          { name: 'duration', internalType: 'uint256', type: 'uint256' },
          { name: 'weight', internalType: 'uint256', type: 'uint256' },
          { name: 'discountRate', internalType: 'uint256', type: 'uint256' },
          {
            name: 'ballot',
            internalType: 'contract IJBFundingCycleBallot',
            type: 'address',
          },
        ],
      },
      {
        name: '_metadata',
        internalType: 'struct JBFundingCycleMetadata',
        type: 'tuple',
        components: [
          {
            name: 'global',
            internalType: 'struct JBGlobalFundingCycleMetadata',
            type: 'tuple',
            components: [
              { name: 'allowSetTerminals', internalType: 'bool', type: 'bool' },
              {
                name: 'allowSetController',
                internalType: 'bool',
                type: 'bool',
              },
              { name: 'pauseTransfers', internalType: 'bool', type: 'bool' },
            ],
          },
          { name: 'reservedRate', internalType: 'uint256', type: 'uint256' },
          { name: 'redemptionRate', internalType: 'uint256', type: 'uint256' },
          {
            name: 'ballotRedemptionRate',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'pausePay', internalType: 'bool', type: 'bool' },
          { name: 'pauseDistributions', internalType: 'bool', type: 'bool' },
          { name: 'pauseRedeem', internalType: 'bool', type: 'bool' },
          { name: 'pauseBurn', internalType: 'bool', type: 'bool' },
          { name: 'allowMinting', internalType: 'bool', type: 'bool' },
          {
            name: 'allowTerminalMigration',
            internalType: 'bool',
            type: 'bool',
          },
          {
            name: 'allowControllerMigration',
            internalType: 'bool',
            type: 'bool',
          },
          { name: 'holdFees', internalType: 'bool', type: 'bool' },
          {
            name: 'preferClaimedTokenOverride',
            internalType: 'bool',
            type: 'bool',
          },
          {
            name: 'useTotalOverflowForRedemptions',
            internalType: 'bool',
            type: 'bool',
          },
          { name: 'useDataSourceForPay', internalType: 'bool', type: 'bool' },
          {
            name: 'useDataSourceForRedeem',
            internalType: 'bool',
            type: 'bool',
          },
          { name: 'dataSource', internalType: 'address', type: 'address' },
          { name: 'metadata', internalType: 'uint256', type: 'uint256' },
        ],
      },
      { name: '_mustStartAtOrAfter', internalType: 'uint256', type: 'uint256' },
      {
        name: '_groupedSplits',
        internalType: 'struct JBGroupedSplits[]',
        type: 'tuple[]',
        components: [
          { name: 'group', internalType: 'uint256', type: 'uint256' },
          {
            name: 'splits',
            internalType: 'struct JBSplit[]',
            type: 'tuple[]',
            components: [
              { name: 'preferClaimed', internalType: 'bool', type: 'bool' },
              {
                name: 'preferAddToBalance',
                internalType: 'bool',
                type: 'bool',
              },
              { name: 'percent', internalType: 'uint256', type: 'uint256' },
              { name: 'projectId', internalType: 'uint256', type: 'uint256' },
              {
                name: 'beneficiary',
                internalType: 'address payable',
                type: 'address',
              },
              { name: 'lockedUntil', internalType: 'uint256', type: 'uint256' },
              {
                name: 'allocator',
                internalType: 'contract IJBSplitAllocator',
                type: 'address',
              },
            ],
          },
        ],
      },
      {
        name: '_fundAccessConstraints',
        internalType: 'struct JBFundAccessConstraints[]',
        type: 'tuple[]',
        components: [
          {
            name: 'terminal',
            internalType: 'contract IJBPaymentTerminal',
            type: 'address',
          },
          { name: 'token', internalType: 'address', type: 'address' },
          {
            name: 'distributionLimit',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'distributionLimitCurrency',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'overflowAllowance',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'overflowAllowanceCurrency',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
      {
        name: '_terminals',
        internalType: 'contract IJBPaymentTerminal[]',
        type: 'address[]',
      },
      { name: '_memo', internalType: 'string', type: 'string' },
    ],
    name: 'launchProjectFor',
    outputs: [{ name: 'projectId', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_projectId', internalType: 'uint256', type: 'uint256' },
      { name: '_to', internalType: 'contract IJBMigratable', type: 'address' },
    ],
    name: 'migrate',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_projectId', internalType: 'uint256', type: 'uint256' },
      { name: '_tokenCount', internalType: 'uint256', type: 'uint256' },
      { name: '_beneficiary', internalType: 'address', type: 'address' },
      { name: '_memo', internalType: 'string', type: 'string' },
      { name: '_preferClaimedTokens', internalType: 'bool', type: 'bool' },
      { name: '_useReservedRate', internalType: 'bool', type: 'bool' },
    ],
    name: 'mintTokensOf',
    outputs: [
      {
        name: 'beneficiaryTokenCount',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'operatorStore',
    outputs: [
      { name: '', internalType: 'contract IJBOperatorStore', type: 'address' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_projectId', internalType: 'uint256', type: 'uint256' },
      { name: '_from', internalType: 'address', type: 'address' },
    ],
    name: 'prepForMigrationOf',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'projects',
    outputs: [
      { name: '', internalType: 'contract IJBProjects', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_projectId', internalType: 'uint256', type: 'uint256' }],
    name: 'queuedFundingCycleOf',
    outputs: [
      {
        name: 'fundingCycle',
        internalType: 'struct JBFundingCycle',
        type: 'tuple',
        components: [
          { name: 'number', internalType: 'uint256', type: 'uint256' },
          { name: 'configuration', internalType: 'uint256', type: 'uint256' },
          { name: 'basedOn', internalType: 'uint256', type: 'uint256' },
          { name: 'start', internalType: 'uint256', type: 'uint256' },
          { name: 'duration', internalType: 'uint256', type: 'uint256' },
          { name: 'weight', internalType: 'uint256', type: 'uint256' },
          { name: 'discountRate', internalType: 'uint256', type: 'uint256' },
          {
            name: 'ballot',
            internalType: 'contract IJBFundingCycleBallot',
            type: 'address',
          },
          { name: 'metadata', internalType: 'uint256', type: 'uint256' },
        ],
      },
      {
        name: 'metadata',
        internalType: 'struct JBFundingCycleMetadata',
        type: 'tuple',
        components: [
          {
            name: 'global',
            internalType: 'struct JBGlobalFundingCycleMetadata',
            type: 'tuple',
            components: [
              { name: 'allowSetTerminals', internalType: 'bool', type: 'bool' },
              {
                name: 'allowSetController',
                internalType: 'bool',
                type: 'bool',
              },
              { name: 'pauseTransfers', internalType: 'bool', type: 'bool' },
            ],
          },
          { name: 'reservedRate', internalType: 'uint256', type: 'uint256' },
          { name: 'redemptionRate', internalType: 'uint256', type: 'uint256' },
          {
            name: 'ballotRedemptionRate',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'pausePay', internalType: 'bool', type: 'bool' },
          { name: 'pauseDistributions', internalType: 'bool', type: 'bool' },
          { name: 'pauseRedeem', internalType: 'bool', type: 'bool' },
          { name: 'pauseBurn', internalType: 'bool', type: 'bool' },
          { name: 'allowMinting', internalType: 'bool', type: 'bool' },
          {
            name: 'allowTerminalMigration',
            internalType: 'bool',
            type: 'bool',
          },
          {
            name: 'allowControllerMigration',
            internalType: 'bool',
            type: 'bool',
          },
          { name: 'holdFees', internalType: 'bool', type: 'bool' },
          {
            name: 'preferClaimedTokenOverride',
            internalType: 'bool',
            type: 'bool',
          },
          {
            name: 'useTotalOverflowForRedemptions',
            internalType: 'bool',
            type: 'bool',
          },
          { name: 'useDataSourceForPay', internalType: 'bool', type: 'bool' },
          {
            name: 'useDataSourceForRedeem',
            internalType: 'bool',
            type: 'bool',
          },
          { name: 'dataSource', internalType: 'address', type: 'address' },
          { name: 'metadata', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_projectId', internalType: 'uint256', type: 'uint256' },
      {
        name: '_data',
        internalType: 'struct JBFundingCycleData',
        type: 'tuple',
        components: [
          { name: 'duration', internalType: 'uint256', type: 'uint256' },
          { name: 'weight', internalType: 'uint256', type: 'uint256' },
          { name: 'discountRate', internalType: 'uint256', type: 'uint256' },
          {
            name: 'ballot',
            internalType: 'contract IJBFundingCycleBallot',
            type: 'address',
          },
        ],
      },
      {
        name: '_metadata',
        internalType: 'struct JBFundingCycleMetadata',
        type: 'tuple',
        components: [
          {
            name: 'global',
            internalType: 'struct JBGlobalFundingCycleMetadata',
            type: 'tuple',
            components: [
              { name: 'allowSetTerminals', internalType: 'bool', type: 'bool' },
              {
                name: 'allowSetController',
                internalType: 'bool',
                type: 'bool',
              },
              { name: 'pauseTransfers', internalType: 'bool', type: 'bool' },
            ],
          },
          { name: 'reservedRate', internalType: 'uint256', type: 'uint256' },
          { name: 'redemptionRate', internalType: 'uint256', type: 'uint256' },
          {
            name: 'ballotRedemptionRate',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'pausePay', internalType: 'bool', type: 'bool' },
          { name: 'pauseDistributions', internalType: 'bool', type: 'bool' },
          { name: 'pauseRedeem', internalType: 'bool', type: 'bool' },
          { name: 'pauseBurn', internalType: 'bool', type: 'bool' },
          { name: 'allowMinting', internalType: 'bool', type: 'bool' },
          {
            name: 'allowTerminalMigration',
            internalType: 'bool',
            type: 'bool',
          },
          {
            name: 'allowControllerMigration',
            internalType: 'bool',
            type: 'bool',
          },
          { name: 'holdFees', internalType: 'bool', type: 'bool' },
          {
            name: 'preferClaimedTokenOverride',
            internalType: 'bool',
            type: 'bool',
          },
          {
            name: 'useTotalOverflowForRedemptions',
            internalType: 'bool',
            type: 'bool',
          },
          { name: 'useDataSourceForPay', internalType: 'bool', type: 'bool' },
          {
            name: 'useDataSourceForRedeem',
            internalType: 'bool',
            type: 'bool',
          },
          { name: 'dataSource', internalType: 'address', type: 'address' },
          { name: 'metadata', internalType: 'uint256', type: 'uint256' },
        ],
      },
      { name: '_mustStartAtOrAfter', internalType: 'uint256', type: 'uint256' },
      {
        name: '_groupedSplits',
        internalType: 'struct JBGroupedSplits[]',
        type: 'tuple[]',
        components: [
          { name: 'group', internalType: 'uint256', type: 'uint256' },
          {
            name: 'splits',
            internalType: 'struct JBSplit[]',
            type: 'tuple[]',
            components: [
              { name: 'preferClaimed', internalType: 'bool', type: 'bool' },
              {
                name: 'preferAddToBalance',
                internalType: 'bool',
                type: 'bool',
              },
              { name: 'percent', internalType: 'uint256', type: 'uint256' },
              { name: 'projectId', internalType: 'uint256', type: 'uint256' },
              {
                name: 'beneficiary',
                internalType: 'address payable',
                type: 'address',
              },
              { name: 'lockedUntil', internalType: 'uint256', type: 'uint256' },
              {
                name: 'allocator',
                internalType: 'contract IJBSplitAllocator',
                type: 'address',
              },
            ],
          },
        ],
      },
      {
        name: '_fundAccessConstraints',
        internalType: 'struct JBFundAccessConstraints[]',
        type: 'tuple[]',
        components: [
          {
            name: 'terminal',
            internalType: 'contract IJBPaymentTerminal',
            type: 'address',
          },
          { name: 'token', internalType: 'address', type: 'address' },
          {
            name: 'distributionLimit',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'distributionLimitCurrency',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'overflowAllowance',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'overflowAllowanceCurrency',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
      { name: '_memo', internalType: 'string', type: 'string' },
    ],
    name: 'reconfigureFundingCyclesOf',
    outputs: [
      { name: 'configuration', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'reservedTokenBalanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'splitsStore',
    outputs: [
      { name: '', internalType: 'contract IJBSplitsStore', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'tokenStore',
    outputs: [
      { name: '', internalType: 'contract IJBTokenStore', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_projectId', internalType: 'uint256', type: 'uint256' }],
    name: 'totalOutstandingTokensOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x97a5b9D9F0F7cD676B69f584F29048D0Ef4BB59b)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1d260DE91233e650F136Bf35f8A4ea1F2b68aDB6)
 */
export const jbController3_1Address = {
  1: '0x97a5b9D9F0F7cD676B69f584F29048D0Ef4BB59b',
  5: '0x1d260DE91233e650F136Bf35f8A4ea1F2b68aDB6',
} as const

/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x97a5b9D9F0F7cD676B69f584F29048D0Ef4BB59b)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1d260DE91233e650F136Bf35f8A4ea1F2b68aDB6)
 */
export const jbController3_1Config = {
  address: jbController3_1Address,
  abi: jbController3_1ABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// JBDirectory
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x65572FB928b46f9aDB7cfe5A4c41226F636161ea)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x8E05bcD2812E1449f0EC3aE24E2C395F533d9A99)
 */
export const jbDirectoryABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      {
        name: '_operatorStore',
        internalType: 'contract IJBOperatorStore',
        type: 'address',
      },
      {
        name: '_projects',
        internalType: 'contract IJBProjects',
        type: 'address',
      },
      {
        name: '_fundingCycleStore',
        internalType: 'contract IJBFundingCycleStore',
        type: 'address',
      },
      { name: '_owner', internalType: 'address', type: 'address' },
    ],
  },
  { type: 'error', inputs: [], name: 'DUPLICATE_TERMINALS' },
  { type: 'error', inputs: [], name: 'INVALID_PROJECT_ID_IN_DIRECTORY' },
  { type: 'error', inputs: [], name: 'SET_CONTROLLER_NOT_ALLOWED' },
  { type: 'error', inputs: [], name: 'SET_TERMINALS_NOT_ALLOWED' },
  { type: 'error', inputs: [], name: 'TOKEN_NOT_ACCEPTED' },
  { type: 'error', inputs: [], name: 'UNAUTHORIZED' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'projectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'terminal',
        internalType: 'contract IJBPaymentTerminal',
        type: 'address',
        indexed: true,
      },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AddTerminal',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'projectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'controller',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'SetController',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'addr', internalType: 'address', type: 'address', indexed: true },
      { name: 'flag', internalType: 'bool', type: 'bool', indexed: true },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'SetIsAllowedToSetFirstController',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'projectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'token',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'terminal',
        internalType: 'contract IJBPaymentTerminal',
        type: 'address',
        indexed: true,
      },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'SetPrimaryTerminal',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'projectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'terminals',
        internalType: 'contract IJBPaymentTerminal[]',
        type: 'address[]',
        indexed: false,
      },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'SetTerminals',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'controllerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'fundingCycleStore',
    outputs: [
      {
        name: '',
        internalType: 'contract IJBFundingCycleStore',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'isAllowedToSetFirstController',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_projectId', internalType: 'uint256', type: 'uint256' },
      {
        name: '_terminal',
        internalType: 'contract IJBPaymentTerminal',
        type: 'address',
      },
    ],
    name: 'isTerminalOf',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'operatorStore',
    outputs: [
      { name: '', internalType: 'contract IJBOperatorStore', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_projectId', internalType: 'uint256', type: 'uint256' },
      { name: '_token', internalType: 'address', type: 'address' },
    ],
    name: 'primaryTerminalOf',
    outputs: [
      {
        name: '',
        internalType: 'contract IJBPaymentTerminal',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'projects',
    outputs: [
      { name: '', internalType: 'contract IJBProjects', type: 'address' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_projectId', internalType: 'uint256', type: 'uint256' },
      { name: '_controller', internalType: 'address', type: 'address' },
    ],
    name: 'setControllerOf',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_address', internalType: 'address', type: 'address' },
      { name: '_flag', internalType: 'bool', type: 'bool' },
    ],
    name: 'setIsAllowedToSetFirstController',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_projectId', internalType: 'uint256', type: 'uint256' },
      { name: '_token', internalType: 'address', type: 'address' },
      {
        name: '_terminal',
        internalType: 'contract IJBPaymentTerminal',
        type: 'address',
      },
    ],
    name: 'setPrimaryTerminalOf',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_projectId', internalType: 'uint256', type: 'uint256' },
      {
        name: '_terminals',
        internalType: 'contract IJBPaymentTerminal[]',
        type: 'address[]',
      },
    ],
    name: 'setTerminalsOf',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_projectId', internalType: 'uint256', type: 'uint256' }],
    name: 'terminalsOf',
    outputs: [
      {
        name: '',
        internalType: 'contract IJBPaymentTerminal[]',
        type: 'address[]',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
] as const

/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x65572FB928b46f9aDB7cfe5A4c41226F636161ea)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x8E05bcD2812E1449f0EC3aE24E2C395F533d9A99)
 */
export const jbDirectoryAddress = {
  1: '0x65572FB928b46f9aDB7cfe5A4c41226F636161ea',
  5: '0x8E05bcD2812E1449f0EC3aE24E2C395F533d9A99',
} as const

/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x65572FB928b46f9aDB7cfe5A4c41226F636161ea)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x8E05bcD2812E1449f0EC3aE24E2C395F533d9A99)
 */
export const jbDirectoryConfig = {
  address: jbDirectoryAddress,
  abi: jbDirectoryABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// JBETHPaymentTerminal
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x594Cb208b5BB48db1bcbC9354d1694998864ec63)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x55d4dfb578daA4d60380995ffF7a706471d7c719)
 */
export const jbethPaymentTerminalABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: '_baseWeightCurrency', internalType: 'uint256', type: 'uint256' },
      {
        name: '_operatorStore',
        internalType: 'contract IJBOperatorStore',
        type: 'address',
      },
      {
        name: '_projects',
        internalType: 'contract IJBProjects',
        type: 'address',
      },
      {
        name: '_directory',
        internalType: 'contract IJBDirectory',
        type: 'address',
      },
      {
        name: '_splitsStore',
        internalType: 'contract IJBSplitsStore',
        type: 'address',
      },
      { name: '_prices', internalType: 'contract IJBPrices', type: 'address' },
      {
        name: '_store',
        internalType: 'contract IJBSingleTokenPaymentTerminalStore',
        type: 'address',
      },
      { name: '_owner', internalType: 'address', type: 'address' },
    ],
  },
  { type: 'error', inputs: [], name: 'FEE_TOO_HIGH' },
  { type: 'error', inputs: [], name: 'INADEQUATE_DISTRIBUTION_AMOUNT' },
  { type: 'error', inputs: [], name: 'INADEQUATE_RECLAIM_AMOUNT' },
  { type: 'error', inputs: [], name: 'INADEQUATE_TOKEN_COUNT' },
  { type: 'error', inputs: [], name: 'NO_MSG_VALUE_ALLOWED' },
  { type: 'error', inputs: [], name: 'PAY_TO_ZERO_ADDRESS' },
  {
    type: 'error',
    inputs: [
      { name: 'prod1', internalType: 'uint256', type: 'uint256' },
      { name: 'denominator', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'PRBMath__MulDivOverflow',
  },
  { type: 'error', inputs: [], name: 'PROJECT_TERMINAL_MISMATCH' },
  { type: 'error', inputs: [], name: 'REDEEM_TO_ZERO_ADDRESS' },
  { type: 'error', inputs: [], name: 'TERMINAL_IN_SPLIT_ZERO_ADDRESS' },
  { type: 'error', inputs: [], name: 'TERMINAL_TOKENS_INCOMPATIBLE' },
  { type: 'error', inputs: [], name: 'UNAUTHORIZED' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'projectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'refundedFees',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'memo', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'metadata',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AddToBalance',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'delegate',
        internalType: 'contract IJBPayDelegate',
        type: 'address',
        indexed: true,
      },
      {
        name: 'data',
        internalType: 'struct JBDidPayData',
        type: 'tuple',
        components: [
          { name: 'payer', internalType: 'address', type: 'address' },
          { name: 'projectId', internalType: 'uint256', type: 'uint256' },
          {
            name: 'currentFundingCycleConfiguration',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'amount',
            internalType: 'struct JBTokenAmount',
            type: 'tuple',
            components: [
              { name: 'token', internalType: 'address', type: 'address' },
              { name: 'value', internalType: 'uint256', type: 'uint256' },
              { name: 'decimals', internalType: 'uint256', type: 'uint256' },
              { name: 'currency', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'forwardedAmount',
            internalType: 'struct JBTokenAmount',
            type: 'tuple',
            components: [
              { name: 'token', internalType: 'address', type: 'address' },
              { name: 'value', internalType: 'uint256', type: 'uint256' },
              { name: 'decimals', internalType: 'uint256', type: 'uint256' },
              { name: 'currency', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'projectTokenCount',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'beneficiary', internalType: 'address', type: 'address' },
          { name: 'preferClaimedTokens', internalType: 'bool', type: 'bool' },
          { name: 'memo', internalType: 'string', type: 'string' },
          { name: 'metadata', internalType: 'bytes', type: 'bytes' },
        ],
        indexed: false,
      },
      {
        name: 'delegatedAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'DelegateDidPay',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'delegate',
        internalType: 'contract IJBRedemptionDelegate',
        type: 'address',
        indexed: true,
      },
      {
        name: 'data',
        internalType: 'struct JBDidRedeemData',
        type: 'tuple',
        components: [
          { name: 'holder', internalType: 'address', type: 'address' },
          { name: 'projectId', internalType: 'uint256', type: 'uint256' },
          {
            name: 'currentFundingCycleConfiguration',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'projectTokenCount',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'reclaimedAmount',
            internalType: 'struct JBTokenAmount',
            type: 'tuple',
            components: [
              { name: 'token', internalType: 'address', type: 'address' },
              { name: 'value', internalType: 'uint256', type: 'uint256' },
              { name: 'decimals', internalType: 'uint256', type: 'uint256' },
              { name: 'currency', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'forwardedAmount',
            internalType: 'struct JBTokenAmount',
            type: 'tuple',
            components: [
              { name: 'token', internalType: 'address', type: 'address' },
              { name: 'value', internalType: 'uint256', type: 'uint256' },
              { name: 'decimals', internalType: 'uint256', type: 'uint256' },
              { name: 'currency', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'beneficiary',
            internalType: 'address payable',
            type: 'address',
          },
          { name: 'memo', internalType: 'string', type: 'string' },
          { name: 'metadata', internalType: 'bytes', type: 'bytes' },
        ],
        indexed: false,
      },
      {
        name: 'delegatedAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'DelegateDidRedeem',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'fundingCycleConfiguration',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'fundingCycleNumber',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'projectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'beneficiary',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'distributedAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'fee', internalType: 'uint256', type: 'uint256', indexed: false },
      {
        name: 'beneficiaryDistributionAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'memo', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'DistributePayouts',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'projectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'domain',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'group',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'split',
        internalType: 'struct JBSplit',
        type: 'tuple',
        components: [
          { name: 'preferClaimed', internalType: 'bool', type: 'bool' },
          { name: 'preferAddToBalance', internalType: 'bool', type: 'bool' },
          { name: 'percent', internalType: 'uint256', type: 'uint256' },
          { name: 'projectId', internalType: 'uint256', type: 'uint256' },
          {
            name: 'beneficiary',
            internalType: 'address payable',
            type: 'address',
          },
          { name: 'lockedUntil', internalType: 'uint256', type: 'uint256' },
          {
            name: 'allocator',
            internalType: 'contract IJBSplitAllocator',
            type: 'address',
          },
        ],
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'DistributeToPayoutSplit',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'projectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      { name: 'fee', internalType: 'uint256', type: 'uint256', indexed: true },
      {
        name: 'feeDiscount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'beneficiary',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'HoldFee',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'projectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'to',
        internalType: 'contract IJBPaymentTerminal',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Migrate',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'fundingCycleConfiguration',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'fundingCycleNumber',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'projectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'payer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'beneficiary',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'beneficiaryTokenCount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'memo', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'metadata',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Pay',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'projectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      { name: 'wasHeld', internalType: 'bool', type: 'bool', indexed: true },
      {
        name: 'beneficiary',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'ProcessFee',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'fundingCycleConfiguration',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'fundingCycleNumber',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'projectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'holder',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'beneficiary',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'tokenCount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'reclaimedAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'memo', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'metadata',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'RedeemTokens',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'projectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'refundedFees',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'leftoverAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'RefundHeldFees',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'fee', internalType: 'uint256', type: 'uint256', indexed: false },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'SetFee',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feeGauge',
        internalType: 'contract IJBFeeGauge',
        type: 'address',
        indexed: true,
      },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'SetFeeGauge',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'addrs',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'flag', internalType: 'bool', type: 'bool', indexed: true },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'SetFeelessAddress',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'fundingCycleConfiguration',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'fundingCycleNumber',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'projectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'beneficiary',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'distributedAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'netDistributedamount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'memo', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'UseAllowance',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_token', internalType: 'address', type: 'address' },
      { name: '_projectId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'acceptsToken',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: '_projectId', internalType: 'uint256', type: 'uint256' },
      { name: '_amount', internalType: 'uint256', type: 'uint256' },
      { name: '_token', internalType: 'address', type: 'address' },
      { name: '_memo', internalType: 'string', type: 'string' },
      { name: '_metadata', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'addToBalanceOf',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'baseWeightCurrency',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'currency',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_token', internalType: 'address', type: 'address' }],
    name: 'currencyForToken',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_projectId', internalType: 'uint256', type: 'uint256' }],
    name: 'currentEthOverflowOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_token', internalType: 'address', type: 'address' }],
    name: 'decimalsForToken',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'directory',
    outputs: [
      { name: '', internalType: 'contract IJBDirectory', type: 'address' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_projectId', internalType: 'uint256', type: 'uint256' },
      { name: '_amount', internalType: 'uint256', type: 'uint256' },
      { name: '_currency', internalType: 'uint256', type: 'uint256' },
      { name: '_token', internalType: 'address', type: 'address' },
      { name: '_minReturnedTokens', internalType: 'uint256', type: 'uint256' },
      { name: '_memo', internalType: 'string', type: 'string' },
    ],
    name: 'distributePayoutsOf',
    outputs: [
      {
        name: 'netLeftoverDistributionAmount',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'fee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'feeGauge',
    outputs: [
      { name: '', internalType: 'contract IJBFeeGauge', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_projectId', internalType: 'uint256', type: 'uint256' }],
    name: 'heldFeesOf',
    outputs: [
      {
        name: '',
        internalType: 'struct JBFee[]',
        type: 'tuple[]',
        components: [
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'fee', internalType: 'uint32', type: 'uint32' },
          { name: 'feeDiscount', internalType: 'uint32', type: 'uint32' },
          { name: 'beneficiary', internalType: 'address', type: 'address' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'isFeelessAddress',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_projectId', internalType: 'uint256', type: 'uint256' },
      {
        name: '_to',
        internalType: 'contract IJBPaymentTerminal',
        type: 'address',
      },
    ],
    name: 'migrate',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'operatorStore',
    outputs: [
      { name: '', internalType: 'contract IJBOperatorStore', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: '_projectId', internalType: 'uint256', type: 'uint256' },
      { name: '_amount', internalType: 'uint256', type: 'uint256' },
      { name: '_token', internalType: 'address', type: 'address' },
      { name: '_beneficiary', internalType: 'address', type: 'address' },
      { name: '_minReturnedTokens', internalType: 'uint256', type: 'uint256' },
      { name: '_preferClaimedTokens', internalType: 'bool', type: 'bool' },
      { name: '_memo', internalType: 'string', type: 'string' },
      { name: '_metadata', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'pay',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'payoutSplitsGroup',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'prices',
    outputs: [
      { name: '', internalType: 'contract IJBPrices', type: 'address' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_projectId', internalType: 'uint256', type: 'uint256' }],
    name: 'processFees',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'projects',
    outputs: [
      { name: '', internalType: 'contract IJBProjects', type: 'address' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_holder', internalType: 'address', type: 'address' },
      { name: '_projectId', internalType: 'uint256', type: 'uint256' },
      { name: '_tokenCount', internalType: 'uint256', type: 'uint256' },
      { name: '_token', internalType: 'address', type: 'address' },
      { name: '_minReturnedTokens', internalType: 'uint256', type: 'uint256' },
      {
        name: '_beneficiary',
        internalType: 'address payable',
        type: 'address',
      },
      { name: '_memo', internalType: 'string', type: 'string' },
      { name: '_metadata', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'redeemTokensOf',
    outputs: [
      { name: 'reclaimAmount', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_fee', internalType: 'uint256', type: 'uint256' }],
    name: 'setFee',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: '_feeGauge',
        internalType: 'contract IJBFeeGauge',
        type: 'address',
      },
    ],
    name: 'setFeeGauge',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_address', internalType: 'address', type: 'address' },
      { name: '_flag', internalType: 'bool', type: 'bool' },
    ],
    name: 'setFeelessAddress',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'splitsStore',
    outputs: [
      { name: '', internalType: 'contract IJBSplitsStore', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'store',
    outputs: [
      {
        name: '',
        internalType: 'contract IJBSingleTokenPaymentTerminalStore',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'token',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_projectId', internalType: 'uint256', type: 'uint256' },
      { name: '_amount', internalType: 'uint256', type: 'uint256' },
      { name: '_currency', internalType: 'uint256', type: 'uint256' },
      { name: '_token', internalType: 'address', type: 'address' },
      { name: '_minReturnedTokens', internalType: 'uint256', type: 'uint256' },
      {
        name: '_beneficiary',
        internalType: 'address payable',
        type: 'address',
      },
      { name: '_memo', internalType: 'string', type: 'string' },
    ],
    name: 'useAllowanceOf',
    outputs: [
      {
        name: 'netDistributedAmount',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
  },
] as const

/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x594Cb208b5BB48db1bcbC9354d1694998864ec63)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x55d4dfb578daA4d60380995ffF7a706471d7c719)
 */
export const jbethPaymentTerminalAddress = {
  1: '0x594Cb208b5BB48db1bcbC9354d1694998864ec63',
  5: '0x55d4dfb578daA4d60380995ffF7a706471d7c719',
} as const

/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x594Cb208b5BB48db1bcbC9354d1694998864ec63)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x55d4dfb578daA4d60380995ffF7a706471d7c719)
 */
export const jbethPaymentTerminalConfig = {
  address: jbethPaymentTerminalAddress,
  abi: jbethPaymentTerminalABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// JBETHPaymentTerminal3_1
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFA391De95Fcbcd3157268B91d8c7af083E607A5C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0baCb87Cf7DbDdde2299D92673A938E067a9eb29)
 */
export const jbethPaymentTerminal3_1ABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: '_baseWeightCurrency', internalType: 'uint256', type: 'uint256' },
      {
        name: '_operatorStore',
        internalType: 'contract IJBOperatorStore',
        type: 'address',
      },
      {
        name: '_projects',
        internalType: 'contract IJBProjects',
        type: 'address',
      },
      {
        name: '_directory',
        internalType: 'contract IJBDirectory',
        type: 'address',
      },
      {
        name: '_splitsStore',
        internalType: 'contract IJBSplitsStore',
        type: 'address',
      },
      { name: '_prices', internalType: 'contract IJBPrices', type: 'address' },
      {
        name: '_store',
        internalType: 'contract IJBSingleTokenPaymentTerminalStore',
        type: 'address',
      },
      { name: '_owner', internalType: 'address', type: 'address' },
    ],
  },
  { type: 'error', inputs: [], name: 'FEE_TOO_HIGH' },
  { type: 'error', inputs: [], name: 'INADEQUATE_DISTRIBUTION_AMOUNT' },
  { type: 'error', inputs: [], name: 'INADEQUATE_RECLAIM_AMOUNT' },
  { type: 'error', inputs: [], name: 'INADEQUATE_TOKEN_COUNT' },
  { type: 'error', inputs: [], name: 'NO_MSG_VALUE_ALLOWED' },
  { type: 'error', inputs: [], name: 'PAY_TO_ZERO_ADDRESS' },
  {
    type: 'error',
    inputs: [
      { name: 'prod1', internalType: 'uint256', type: 'uint256' },
      { name: 'denominator', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'PRBMath__MulDivOverflow',
  },
  { type: 'error', inputs: [], name: 'PROJECT_TERMINAL_MISMATCH' },
  { type: 'error', inputs: [], name: 'REDEEM_TO_ZERO_ADDRESS' },
  { type: 'error', inputs: [], name: 'TERMINAL_IN_SPLIT_ZERO_ADDRESS' },
  { type: 'error', inputs: [], name: 'TERMINAL_TOKENS_INCOMPATIBLE' },
  { type: 'error', inputs: [], name: 'UNAUTHORIZED' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'projectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'refundedFees',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'memo', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'metadata',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AddToBalance',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'delegate',
        internalType: 'contract IJBPayDelegate',
        type: 'address',
        indexed: true,
      },
      {
        name: 'data',
        internalType: 'struct JBDidPayData',
        type: 'tuple',
        components: [
          { name: 'payer', internalType: 'address', type: 'address' },
          { name: 'projectId', internalType: 'uint256', type: 'uint256' },
          {
            name: 'currentFundingCycleConfiguration',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'amount',
            internalType: 'struct JBTokenAmount',
            type: 'tuple',
            components: [
              { name: 'token', internalType: 'address', type: 'address' },
              { name: 'value', internalType: 'uint256', type: 'uint256' },
              { name: 'decimals', internalType: 'uint256', type: 'uint256' },
              { name: 'currency', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'forwardedAmount',
            internalType: 'struct JBTokenAmount',
            type: 'tuple',
            components: [
              { name: 'token', internalType: 'address', type: 'address' },
              { name: 'value', internalType: 'uint256', type: 'uint256' },
              { name: 'decimals', internalType: 'uint256', type: 'uint256' },
              { name: 'currency', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'projectTokenCount',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'beneficiary', internalType: 'address', type: 'address' },
          { name: 'preferClaimedTokens', internalType: 'bool', type: 'bool' },
          { name: 'memo', internalType: 'string', type: 'string' },
          { name: 'metadata', internalType: 'bytes', type: 'bytes' },
        ],
        indexed: false,
      },
      {
        name: 'delegatedAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'DelegateDidPay',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'delegate',
        internalType: 'contract IJBRedemptionDelegate',
        type: 'address',
        indexed: true,
      },
      {
        name: 'data',
        internalType: 'struct JBDidRedeemData',
        type: 'tuple',
        components: [
          { name: 'holder', internalType: 'address', type: 'address' },
          { name: 'projectId', internalType: 'uint256', type: 'uint256' },
          {
            name: 'currentFundingCycleConfiguration',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'projectTokenCount',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'reclaimedAmount',
            internalType: 'struct JBTokenAmount',
            type: 'tuple',
            components: [
              { name: 'token', internalType: 'address', type: 'address' },
              { name: 'value', internalType: 'uint256', type: 'uint256' },
              { name: 'decimals', internalType: 'uint256', type: 'uint256' },
              { name: 'currency', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'forwardedAmount',
            internalType: 'struct JBTokenAmount',
            type: 'tuple',
            components: [
              { name: 'token', internalType: 'address', type: 'address' },
              { name: 'value', internalType: 'uint256', type: 'uint256' },
              { name: 'decimals', internalType: 'uint256', type: 'uint256' },
              { name: 'currency', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'beneficiary',
            internalType: 'address payable',
            type: 'address',
          },
          { name: 'memo', internalType: 'string', type: 'string' },
          { name: 'metadata', internalType: 'bytes', type: 'bytes' },
        ],
        indexed: false,
      },
      {
        name: 'delegatedAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'DelegateDidRedeem',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'fundingCycleConfiguration',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'fundingCycleNumber',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'projectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'beneficiary',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'distributedAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'fee', internalType: 'uint256', type: 'uint256', indexed: false },
      {
        name: 'beneficiaryDistributionAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'metadata',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'DistributePayouts',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'projectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'domain',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'group',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'split',
        internalType: 'struct JBSplit',
        type: 'tuple',
        components: [
          { name: 'preferClaimed', internalType: 'bool', type: 'bool' },
          { name: 'preferAddToBalance', internalType: 'bool', type: 'bool' },
          { name: 'percent', internalType: 'uint256', type: 'uint256' },
          { name: 'projectId', internalType: 'uint256', type: 'uint256' },
          {
            name: 'beneficiary',
            internalType: 'address payable',
            type: 'address',
          },
          { name: 'lockedUntil', internalType: 'uint256', type: 'uint256' },
          {
            name: 'allocator',
            internalType: 'contract IJBSplitAllocator',
            type: 'address',
          },
        ],
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'netAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'DistributeToPayoutSplit',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'projectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'feeProjectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'reason', internalType: 'bytes', type: 'bytes', indexed: false },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FeeReverted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'projectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      { name: 'fee', internalType: 'uint256', type: 'uint256', indexed: true },
      {
        name: 'feeDiscount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'beneficiary',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'HoldFee',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'projectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'to',
        internalType: 'contract IJBPaymentTerminal',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Migrate',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'fundingCycleConfiguration',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'fundingCycleNumber',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'projectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'payer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'beneficiary',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'beneficiaryTokenCount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'memo', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'metadata',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Pay',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'projectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'split',
        internalType: 'struct JBSplit',
        type: 'tuple',
        components: [
          { name: 'preferClaimed', internalType: 'bool', type: 'bool' },
          { name: 'preferAddToBalance', internalType: 'bool', type: 'bool' },
          { name: 'percent', internalType: 'uint256', type: 'uint256' },
          { name: 'projectId', internalType: 'uint256', type: 'uint256' },
          {
            name: 'beneficiary',
            internalType: 'address payable',
            type: 'address',
          },
          { name: 'lockedUntil', internalType: 'uint256', type: 'uint256' },
          {
            name: 'allocator',
            internalType: 'contract IJBSplitAllocator',
            type: 'address',
          },
        ],
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'reason', internalType: 'bytes', type: 'bytes', indexed: false },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'PayoutReverted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'projectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      { name: 'wasHeld', internalType: 'bool', type: 'bool', indexed: true },
      {
        name: 'beneficiary',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'ProcessFee',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'fundingCycleConfiguration',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'fundingCycleNumber',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'projectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'holder',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'beneficiary',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'tokenCount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'reclaimedAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'memo', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'metadata',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'RedeemTokens',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'projectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'refundedFees',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'leftoverAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'RefundHeldFees',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'fee', internalType: 'uint256', type: 'uint256', indexed: false },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'SetFee',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feeGauge',
        internalType: 'contract IJBFeeGauge',
        type: 'address',
        indexed: true,
      },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'SetFeeGauge',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'addrs',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'flag', internalType: 'bool', type: 'bool', indexed: true },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'SetFeelessAddress',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'fundingCycleConfiguration',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'fundingCycleNumber',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'projectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'beneficiary',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'distributedAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'netDistributedamount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'memo', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'metadata',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'UseAllowance',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_token', internalType: 'address', type: 'address' },
      { name: '_projectId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'acceptsToken',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: '_projectId', internalType: 'uint256', type: 'uint256' },
      { name: '_amount', internalType: 'uint256', type: 'uint256' },
      { name: '_token', internalType: 'address', type: 'address' },
      { name: '_memo', internalType: 'string', type: 'string' },
      { name: '_metadata', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'addToBalanceOf',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: '_projectId', internalType: 'uint256', type: 'uint256' },
      { name: '_amount', internalType: 'uint256', type: 'uint256' },
      { name: '_token', internalType: 'address', type: 'address' },
      { name: '_shouldRefundHeldFees', internalType: 'bool', type: 'bool' },
      { name: '_memo', internalType: 'string', type: 'string' },
      { name: '_metadata', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'addToBalanceOf',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'baseWeightCurrency',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'currency',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_token', internalType: 'address', type: 'address' }],
    name: 'currencyForToken',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_projectId', internalType: 'uint256', type: 'uint256' }],
    name: 'currentEthOverflowOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_token', internalType: 'address', type: 'address' }],
    name: 'decimalsForToken',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'directory',
    outputs: [
      { name: '', internalType: 'contract IJBDirectory', type: 'address' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_projectId', internalType: 'uint256', type: 'uint256' },
      { name: '_amount', internalType: 'uint256', type: 'uint256' },
      { name: '_currency', internalType: 'uint256', type: 'uint256' },
      { name: '_token', internalType: 'address', type: 'address' },
      { name: '_minReturnedTokens', internalType: 'uint256', type: 'uint256' },
      { name: '_metadata', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'distributePayoutsOf',
    outputs: [
      {
        name: 'netLeftoverDistributionAmount',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'fee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'feeGauge',
    outputs: [
      { name: '', internalType: 'contract IJBFeeGauge', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_projectId', internalType: 'uint256', type: 'uint256' }],
    name: 'heldFeesOf',
    outputs: [
      {
        name: '',
        internalType: 'struct JBFee[]',
        type: 'tuple[]',
        components: [
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'fee', internalType: 'uint32', type: 'uint32' },
          { name: 'feeDiscount', internalType: 'uint32', type: 'uint32' },
          { name: 'beneficiary', internalType: 'address', type: 'address' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'isFeelessAddress',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_projectId', internalType: 'uint256', type: 'uint256' },
      {
        name: '_to',
        internalType: 'contract IJBPaymentTerminal',
        type: 'address',
      },
    ],
    name: 'migrate',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'operatorStore',
    outputs: [
      { name: '', internalType: 'contract IJBOperatorStore', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: '_projectId', internalType: 'uint256', type: 'uint256' },
      { name: '_amount', internalType: 'uint256', type: 'uint256' },
      { name: '_token', internalType: 'address', type: 'address' },
      { name: '_beneficiary', internalType: 'address', type: 'address' },
      { name: '_minReturnedTokens', internalType: 'uint256', type: 'uint256' },
      { name: '_preferClaimedTokens', internalType: 'bool', type: 'bool' },
      { name: '_memo', internalType: 'string', type: 'string' },
      { name: '_metadata', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'pay',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'payoutSplitsGroup',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'prices',
    outputs: [
      { name: '', internalType: 'contract IJBPrices', type: 'address' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_projectId', internalType: 'uint256', type: 'uint256' }],
    name: 'processFees',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'projects',
    outputs: [
      { name: '', internalType: 'contract IJBProjects', type: 'address' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_holder', internalType: 'address', type: 'address' },
      { name: '_projectId', internalType: 'uint256', type: 'uint256' },
      { name: '_tokenCount', internalType: 'uint256', type: 'uint256' },
      { name: '_token', internalType: 'address', type: 'address' },
      { name: '_minReturnedTokens', internalType: 'uint256', type: 'uint256' },
      {
        name: '_beneficiary',
        internalType: 'address payable',
        type: 'address',
      },
      { name: '_memo', internalType: 'string', type: 'string' },
      { name: '_metadata', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'redeemTokensOf',
    outputs: [
      { name: 'reclaimAmount', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_fee', internalType: 'uint256', type: 'uint256' }],
    name: 'setFee',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: '_feeGauge',
        internalType: 'contract IJBFeeGauge',
        type: 'address',
      },
    ],
    name: 'setFeeGauge',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_address', internalType: 'address', type: 'address' },
      { name: '_flag', internalType: 'bool', type: 'bool' },
    ],
    name: 'setFeelessAddress',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'splitsStore',
    outputs: [
      { name: '', internalType: 'contract IJBSplitsStore', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'store',
    outputs: [
      {
        name: '',
        internalType: 'contract IJBSingleTokenPaymentTerminalStore',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'token',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_projectId', internalType: 'uint256', type: 'uint256' },
      { name: '_amount', internalType: 'uint256', type: 'uint256' },
      { name: '_currency', internalType: 'uint256', type: 'uint256' },
      { name: '_token', internalType: 'address', type: 'address' },
      { name: '_minReturnedTokens', internalType: 'uint256', type: 'uint256' },
      {
        name: '_beneficiary',
        internalType: 'address payable',
        type: 'address',
      },
      { name: '_memo', internalType: 'string', type: 'string' },
      { name: '_metadata', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'useAllowanceOf',
    outputs: [
      {
        name: 'netDistributedAmount',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
  },
] as const

/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFA391De95Fcbcd3157268B91d8c7af083E607A5C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0baCb87Cf7DbDdde2299D92673A938E067a9eb29)
 */
export const jbethPaymentTerminal3_1Address = {
  1: '0xFA391De95Fcbcd3157268B91d8c7af083E607A5C',
  5: '0x0baCb87Cf7DbDdde2299D92673A938E067a9eb29',
} as const

/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFA391De95Fcbcd3157268B91d8c7af083E607A5C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0baCb87Cf7DbDdde2299D92673A938E067a9eb29)
 */
export const jbethPaymentTerminal3_1Config = {
  address: jbethPaymentTerminal3_1Address,
  abi: jbethPaymentTerminal3_1ABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// JBETHPaymentTerminal3_1_1
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x457cD63bee88ac01f3cD4a67D5DCc921D8C0D573)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x82129d4109625F94582bDdF6101a8Cd1a27919f5)
 */
export const jbethPaymentTerminal3_1_1ABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: '_baseWeightCurrency', internalType: 'uint256', type: 'uint256' },
      {
        name: '_operatorStore',
        internalType: 'contract IJBOperatorStore',
        type: 'address',
      },
      {
        name: '_projects',
        internalType: 'contract IJBProjects',
        type: 'address',
      },
      {
        name: '_directory',
        internalType: 'contract IJBDirectory',
        type: 'address',
      },
      {
        name: '_splitsStore',
        internalType: 'contract IJBSplitsStore',
        type: 'address',
      },
      { name: '_prices', internalType: 'contract IJBPrices', type: 'address' },
      { name: '_store', internalType: 'address', type: 'address' },
      { name: '_owner', internalType: 'address', type: 'address' },
    ],
  },
  { type: 'error', inputs: [], name: 'FEE_TOO_HIGH' },
  { type: 'error', inputs: [], name: 'INADEQUATE_DISTRIBUTION_AMOUNT' },
  { type: 'error', inputs: [], name: 'INADEQUATE_RECLAIM_AMOUNT' },
  { type: 'error', inputs: [], name: 'INADEQUATE_TOKEN_COUNT' },
  { type: 'error', inputs: [], name: 'NO_MSG_VALUE_ALLOWED' },
  { type: 'error', inputs: [], name: 'PAY_TO_ZERO_ADDRESS' },
  {
    type: 'error',
    inputs: [
      { name: 'prod1', internalType: 'uint256', type: 'uint256' },
      { name: 'denominator', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'PRBMath__MulDivOverflow',
  },
  { type: 'error', inputs: [], name: 'PROJECT_TERMINAL_MISMATCH' },
  { type: 'error', inputs: [], name: 'REDEEM_TO_ZERO_ADDRESS' },
  { type: 'error', inputs: [], name: 'TERMINAL_TOKENS_INCOMPATIBLE' },
  { type: 'error', inputs: [], name: 'UNAUTHORIZED' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'projectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'refundedFees',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'memo', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'metadata',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AddToBalance',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'delegate',
        internalType: 'contract IJBPayDelegate3_1_1',
        type: 'address',
        indexed: true,
      },
      {
        name: 'data',
        internalType: 'struct JBDidPayData3_1_1',
        type: 'tuple',
        components: [
          { name: 'payer', internalType: 'address', type: 'address' },
          { name: 'projectId', internalType: 'uint256', type: 'uint256' },
          {
            name: 'currentFundingCycleConfiguration',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'amount',
            internalType: 'struct JBTokenAmount',
            type: 'tuple',
            components: [
              { name: 'token', internalType: 'address', type: 'address' },
              { name: 'value', internalType: 'uint256', type: 'uint256' },
              { name: 'decimals', internalType: 'uint256', type: 'uint256' },
              { name: 'currency', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'forwardedAmount',
            internalType: 'struct JBTokenAmount',
            type: 'tuple',
            components: [
              { name: 'token', internalType: 'address', type: 'address' },
              { name: 'value', internalType: 'uint256', type: 'uint256' },
              { name: 'decimals', internalType: 'uint256', type: 'uint256' },
              { name: 'currency', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'projectTokenCount',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'beneficiary', internalType: 'address', type: 'address' },
          { name: 'preferClaimedTokens', internalType: 'bool', type: 'bool' },
          { name: 'memo', internalType: 'string', type: 'string' },
          { name: 'dataSourceMetadata', internalType: 'bytes', type: 'bytes' },
          { name: 'payerMetadata', internalType: 'bytes', type: 'bytes' },
        ],
        indexed: false,
      },
      {
        name: 'delegatedAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'DelegateDidPay',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'delegate',
        internalType: 'contract IJBPayDelegate',
        type: 'address',
        indexed: true,
      },
      {
        name: 'data',
        internalType: 'struct JBDidPayData',
        type: 'tuple',
        components: [
          { name: 'payer', internalType: 'address', type: 'address' },
          { name: 'projectId', internalType: 'uint256', type: 'uint256' },
          {
            name: 'currentFundingCycleConfiguration',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'amount',
            internalType: 'struct JBTokenAmount',
            type: 'tuple',
            components: [
              { name: 'token', internalType: 'address', type: 'address' },
              { name: 'value', internalType: 'uint256', type: 'uint256' },
              { name: 'decimals', internalType: 'uint256', type: 'uint256' },
              { name: 'currency', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'forwardedAmount',
            internalType: 'struct JBTokenAmount',
            type: 'tuple',
            components: [
              { name: 'token', internalType: 'address', type: 'address' },
              { name: 'value', internalType: 'uint256', type: 'uint256' },
              { name: 'decimals', internalType: 'uint256', type: 'uint256' },
              { name: 'currency', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'projectTokenCount',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'beneficiary', internalType: 'address', type: 'address' },
          { name: 'preferClaimedTokens', internalType: 'bool', type: 'bool' },
          { name: 'memo', internalType: 'string', type: 'string' },
          { name: 'metadata', internalType: 'bytes', type: 'bytes' },
        ],
        indexed: false,
      },
      {
        name: 'delegatedAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'DelegateDidPay',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'delegate',
        internalType: 'contract IJBRedemptionDelegate3_1_1',
        type: 'address',
        indexed: true,
      },
      {
        name: 'data',
        internalType: 'struct JBDidRedeemData3_1_1',
        type: 'tuple',
        components: [
          { name: 'holder', internalType: 'address', type: 'address' },
          { name: 'projectId', internalType: 'uint256', type: 'uint256' },
          {
            name: 'currentFundingCycleConfiguration',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'projectTokenCount',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'reclaimedAmount',
            internalType: 'struct JBTokenAmount',
            type: 'tuple',
            components: [
              { name: 'token', internalType: 'address', type: 'address' },
              { name: 'value', internalType: 'uint256', type: 'uint256' },
              { name: 'decimals', internalType: 'uint256', type: 'uint256' },
              { name: 'currency', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'forwardedAmount',
            internalType: 'struct JBTokenAmount',
            type: 'tuple',
            components: [
              { name: 'token', internalType: 'address', type: 'address' },
              { name: 'value', internalType: 'uint256', type: 'uint256' },
              { name: 'decimals', internalType: 'uint256', type: 'uint256' },
              { name: 'currency', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'beneficiary',
            internalType: 'address payable',
            type: 'address',
          },
          { name: 'memo', internalType: 'string', type: 'string' },
          { name: 'dataSourceMetadata', internalType: 'bytes', type: 'bytes' },
          { name: 'redeemerMetadata', internalType: 'bytes', type: 'bytes' },
        ],
        indexed: false,
      },
      {
        name: 'delegatedAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'fee', internalType: 'uint256', type: 'uint256', indexed: false },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'DelegateDidRedeem',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'delegate',
        internalType: 'contract IJBRedemptionDelegate',
        type: 'address',
        indexed: true,
      },
      {
        name: 'data',
        internalType: 'struct JBDidRedeemData',
        type: 'tuple',
        components: [
          { name: 'holder', internalType: 'address', type: 'address' },
          { name: 'projectId', internalType: 'uint256', type: 'uint256' },
          {
            name: 'currentFundingCycleConfiguration',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'projectTokenCount',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'reclaimedAmount',
            internalType: 'struct JBTokenAmount',
            type: 'tuple',
            components: [
              { name: 'token', internalType: 'address', type: 'address' },
              { name: 'value', internalType: 'uint256', type: 'uint256' },
              { name: 'decimals', internalType: 'uint256', type: 'uint256' },
              { name: 'currency', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'forwardedAmount',
            internalType: 'struct JBTokenAmount',
            type: 'tuple',
            components: [
              { name: 'token', internalType: 'address', type: 'address' },
              { name: 'value', internalType: 'uint256', type: 'uint256' },
              { name: 'decimals', internalType: 'uint256', type: 'uint256' },
              { name: 'currency', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'beneficiary',
            internalType: 'address payable',
            type: 'address',
          },
          { name: 'memo', internalType: 'string', type: 'string' },
          { name: 'metadata', internalType: 'bytes', type: 'bytes' },
        ],
        indexed: false,
      },
      {
        name: 'delegatedAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'DelegateDidRedeem',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'fundingCycleConfiguration',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'fundingCycleNumber',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'projectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'beneficiary',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'distributedAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'fee', internalType: 'uint256', type: 'uint256', indexed: false },
      {
        name: 'beneficiaryDistributionAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'metadata',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'DistributePayouts',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'projectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'domain',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'group',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'split',
        internalType: 'struct JBSplit',
        type: 'tuple',
        components: [
          { name: 'preferClaimed', internalType: 'bool', type: 'bool' },
          { name: 'preferAddToBalance', internalType: 'bool', type: 'bool' },
          { name: 'percent', internalType: 'uint256', type: 'uint256' },
          { name: 'projectId', internalType: 'uint256', type: 'uint256' },
          {
            name: 'beneficiary',
            internalType: 'address payable',
            type: 'address',
          },
          { name: 'lockedUntil', internalType: 'uint256', type: 'uint256' },
          {
            name: 'allocator',
            internalType: 'contract IJBSplitAllocator',
            type: 'address',
          },
        ],
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'netAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'DistributeToPayoutSplit',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'projectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'feeProjectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'reason', internalType: 'bytes', type: 'bytes', indexed: false },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FeeReverted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'projectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      { name: 'fee', internalType: 'uint256', type: 'uint256', indexed: true },
      {
        name: 'feeDiscount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'beneficiary',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'HoldFee',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'projectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'to',
        internalType: 'contract IJBPaymentTerminal',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Migrate',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'fundingCycleConfiguration',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'fundingCycleNumber',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'projectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'payer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'beneficiary',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'beneficiaryTokenCount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'memo', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'metadata',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Pay',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'projectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'split',
        internalType: 'struct JBSplit',
        type: 'tuple',
        components: [
          { name: 'preferClaimed', internalType: 'bool', type: 'bool' },
          { name: 'preferAddToBalance', internalType: 'bool', type: 'bool' },
          { name: 'percent', internalType: 'uint256', type: 'uint256' },
          { name: 'projectId', internalType: 'uint256', type: 'uint256' },
          {
            name: 'beneficiary',
            internalType: 'address payable',
            type: 'address',
          },
          { name: 'lockedUntil', internalType: 'uint256', type: 'uint256' },
          {
            name: 'allocator',
            internalType: 'contract IJBSplitAllocator',
            type: 'address',
          },
        ],
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'reason', internalType: 'bytes', type: 'bytes', indexed: false },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'PayoutReverted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'projectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      { name: 'wasHeld', internalType: 'bool', type: 'bool', indexed: true },
      {
        name: 'beneficiary',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'ProcessFee',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'fundingCycleConfiguration',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'fundingCycleNumber',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'projectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'holder',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'beneficiary',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'tokenCount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'reclaimedAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'memo', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'metadata',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'RedeemTokens',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'projectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'refundedFees',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'leftoverAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'RefundHeldFees',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'fee', internalType: 'uint256', type: 'uint256', indexed: false },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'SetFee',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feeGauge',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'SetFeeGauge',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'addrs',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'flag', internalType: 'bool', type: 'bool', indexed: true },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'SetFeelessAddress',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'fundingCycleConfiguration',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'fundingCycleNumber',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'projectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'beneficiary',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'distributedAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'netDistributedamount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'memo', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'metadata',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'UseAllowance',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_token', internalType: 'address', type: 'address' },
      { name: '_projectId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'acceptsToken',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: '_projectId', internalType: 'uint256', type: 'uint256' },
      { name: '_amount', internalType: 'uint256', type: 'uint256' },
      { name: '_token', internalType: 'address', type: 'address' },
      { name: '_memo', internalType: 'string', type: 'string' },
      { name: '_metadata', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'addToBalanceOf',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: '_projectId', internalType: 'uint256', type: 'uint256' },
      { name: '_amount', internalType: 'uint256', type: 'uint256' },
      { name: '_token', internalType: 'address', type: 'address' },
      { name: '_shouldRefundHeldFees', internalType: 'bool', type: 'bool' },
      { name: '_memo', internalType: 'string', type: 'string' },
      { name: '_metadata', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'addToBalanceOf',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'baseWeightCurrency',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'currency',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_token', internalType: 'address', type: 'address' }],
    name: 'currencyForToken',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_projectId', internalType: 'uint256', type: 'uint256' }],
    name: 'currentEthOverflowOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_token', internalType: 'address', type: 'address' }],
    name: 'decimalsForToken',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'directory',
    outputs: [
      { name: '', internalType: 'contract IJBDirectory', type: 'address' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_projectId', internalType: 'uint256', type: 'uint256' },
      { name: '_amount', internalType: 'uint256', type: 'uint256' },
      { name: '_currency', internalType: 'uint256', type: 'uint256' },
      { name: '_token', internalType: 'address', type: 'address' },
      { name: '_minReturnedTokens', internalType: 'uint256', type: 'uint256' },
      { name: '_metadata', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'distributePayoutsOf',
    outputs: [
      {
        name: 'netLeftoverDistributionAmount',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'fee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'feeGauge',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_projectId', internalType: 'uint256', type: 'uint256' }],
    name: 'heldFeesOf',
    outputs: [
      {
        name: '',
        internalType: 'struct JBFee[]',
        type: 'tuple[]',
        components: [
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'fee', internalType: 'uint32', type: 'uint32' },
          { name: 'feeDiscount', internalType: 'uint32', type: 'uint32' },
          { name: 'beneficiary', internalType: 'address', type: 'address' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'isFeelessAddress',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_projectId', internalType: 'uint256', type: 'uint256' },
      {
        name: '_to',
        internalType: 'contract IJBPaymentTerminal',
        type: 'address',
      },
    ],
    name: 'migrate',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'operatorStore',
    outputs: [
      { name: '', internalType: 'contract IJBOperatorStore', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: '_projectId', internalType: 'uint256', type: 'uint256' },
      { name: '_amount', internalType: 'uint256', type: 'uint256' },
      { name: '_token', internalType: 'address', type: 'address' },
      { name: '_beneficiary', internalType: 'address', type: 'address' },
      { name: '_minReturnedTokens', internalType: 'uint256', type: 'uint256' },
      { name: '_preferClaimedTokens', internalType: 'bool', type: 'bool' },
      { name: '_memo', internalType: 'string', type: 'string' },
      { name: '_metadata', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'pay',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'payoutSplitsGroup',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'prices',
    outputs: [
      { name: '', internalType: 'contract IJBPrices', type: 'address' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_projectId', internalType: 'uint256', type: 'uint256' }],
    name: 'processFees',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'projects',
    outputs: [
      { name: '', internalType: 'contract IJBProjects', type: 'address' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_holder', internalType: 'address', type: 'address' },
      { name: '_projectId', internalType: 'uint256', type: 'uint256' },
      { name: '_tokenCount', internalType: 'uint256', type: 'uint256' },
      { name: '_token', internalType: 'address', type: 'address' },
      { name: '_minReturnedTokens', internalType: 'uint256', type: 'uint256' },
      {
        name: '_beneficiary',
        internalType: 'address payable',
        type: 'address',
      },
      { name: '_memo', internalType: 'string', type: 'string' },
      { name: '_metadata', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'redeemTokensOf',
    outputs: [
      { name: 'reclaimAmount', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_fee', internalType: 'uint256', type: 'uint256' }],
    name: 'setFee',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_feeGauge', internalType: 'address', type: 'address' }],
    name: 'setFeeGauge',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_address', internalType: 'address', type: 'address' },
      { name: '_flag', internalType: 'bool', type: 'bool' },
    ],
    name: 'setFeelessAddress',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'splitsStore',
    outputs: [
      { name: '', internalType: 'contract IJBSplitsStore', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'store',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'token',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_projectId', internalType: 'uint256', type: 'uint256' },
      { name: '_amount', internalType: 'uint256', type: 'uint256' },
      { name: '_currency', internalType: 'uint256', type: 'uint256' },
      { name: '_token', internalType: 'address', type: 'address' },
      { name: '_minReturnedTokens', internalType: 'uint256', type: 'uint256' },
      {
        name: '_beneficiary',
        internalType: 'address payable',
        type: 'address',
      },
      { name: '_memo', internalType: 'string', type: 'string' },
      { name: '_metadata', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'useAllowanceOf',
    outputs: [
      {
        name: 'netDistributedAmount',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
  },
] as const

/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x457cD63bee88ac01f3cD4a67D5DCc921D8C0D573)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x82129d4109625F94582bDdF6101a8Cd1a27919f5)
 */
export const jbethPaymentTerminal3_1_1Address = {
  1: '0x457cD63bee88ac01f3cD4a67D5DCc921D8C0D573',
  5: '0x82129d4109625F94582bDdF6101a8Cd1a27919f5',
} as const

/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x457cD63bee88ac01f3cD4a67D5DCc921D8C0D573)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x82129d4109625F94582bDdF6101a8Cd1a27919f5)
 */
export const jbethPaymentTerminal3_1_1Config = {
  address: jbethPaymentTerminal3_1_1Address,
  abi: jbethPaymentTerminal3_1_1ABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// JBETHPaymentTerminal3_1_2
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1d9619E10086FdC1065B114298384aAe3F680CC0)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xd89Ed8008961F68Aab849f49e122f9a1266240Db)
 */
export const jbethPaymentTerminal3_1_2ABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: '_baseWeightCurrency', internalType: 'uint256', type: 'uint256' },
      {
        name: '_operatorStore',
        internalType: 'contract IJBOperatorStore',
        type: 'address',
      },
      {
        name: '_projects',
        internalType: 'contract IJBProjects',
        type: 'address',
      },
      {
        name: '_directory',
        internalType: 'contract IJBDirectory',
        type: 'address',
      },
      {
        name: '_splitsStore',
        internalType: 'contract IJBSplitsStore',
        type: 'address',
      },
      { name: '_prices', internalType: 'contract IJBPrices', type: 'address' },
      { name: '_store', internalType: 'address', type: 'address' },
      { name: '_owner', internalType: 'address', type: 'address' },
    ],
  },
  { type: 'error', inputs: [], name: 'FEE_TOO_HIGH' },
  { type: 'error', inputs: [], name: 'INADEQUATE_DISTRIBUTION_AMOUNT' },
  { type: 'error', inputs: [], name: 'INADEQUATE_RECLAIM_AMOUNT' },
  { type: 'error', inputs: [], name: 'INADEQUATE_TOKEN_COUNT' },
  { type: 'error', inputs: [], name: 'NO_MSG_VALUE_ALLOWED' },
  { type: 'error', inputs: [], name: 'PAY_TO_ZERO_ADDRESS' },
  {
    type: 'error',
    inputs: [
      { name: 'prod1', internalType: 'uint256', type: 'uint256' },
      { name: 'denominator', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'PRBMath__MulDivOverflow',
  },
  { type: 'error', inputs: [], name: 'PROJECT_TERMINAL_MISMATCH' },
  { type: 'error', inputs: [], name: 'REDEEM_TO_ZERO_ADDRESS' },
  { type: 'error', inputs: [], name: 'TERMINAL_TOKENS_INCOMPATIBLE' },
  { type: 'error', inputs: [], name: 'UNAUTHORIZED' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'projectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'refundedFees',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'memo', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'metadata',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AddToBalance',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'delegate',
        internalType: 'contract IJBPayDelegate3_1_1',
        type: 'address',
        indexed: true,
      },
      {
        name: 'data',
        internalType: 'struct JBDidPayData3_1_1',
        type: 'tuple',
        components: [
          { name: 'payer', internalType: 'address', type: 'address' },
          { name: 'projectId', internalType: 'uint256', type: 'uint256' },
          {
            name: 'currentFundingCycleConfiguration',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'amount',
            internalType: 'struct JBTokenAmount',
            type: 'tuple',
            components: [
              { name: 'token', internalType: 'address', type: 'address' },
              { name: 'value', internalType: 'uint256', type: 'uint256' },
              { name: 'decimals', internalType: 'uint256', type: 'uint256' },
              { name: 'currency', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'forwardedAmount',
            internalType: 'struct JBTokenAmount',
            type: 'tuple',
            components: [
              { name: 'token', internalType: 'address', type: 'address' },
              { name: 'value', internalType: 'uint256', type: 'uint256' },
              { name: 'decimals', internalType: 'uint256', type: 'uint256' },
              { name: 'currency', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'projectTokenCount',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'beneficiary', internalType: 'address', type: 'address' },
          { name: 'preferClaimedTokens', internalType: 'bool', type: 'bool' },
          { name: 'memo', internalType: 'string', type: 'string' },
          { name: 'dataSourceMetadata', internalType: 'bytes', type: 'bytes' },
          { name: 'payerMetadata', internalType: 'bytes', type: 'bytes' },
        ],
        indexed: false,
      },
      {
        name: 'delegatedAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'DelegateDidPay',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'delegate',
        internalType: 'contract IJBPayDelegate',
        type: 'address',
        indexed: true,
      },
      {
        name: 'data',
        internalType: 'struct JBDidPayData',
        type: 'tuple',
        components: [
          { name: 'payer', internalType: 'address', type: 'address' },
          { name: 'projectId', internalType: 'uint256', type: 'uint256' },
          {
            name: 'currentFundingCycleConfiguration',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'amount',
            internalType: 'struct JBTokenAmount',
            type: 'tuple',
            components: [
              { name: 'token', internalType: 'address', type: 'address' },
              { name: 'value', internalType: 'uint256', type: 'uint256' },
              { name: 'decimals', internalType: 'uint256', type: 'uint256' },
              { name: 'currency', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'forwardedAmount',
            internalType: 'struct JBTokenAmount',
            type: 'tuple',
            components: [
              { name: 'token', internalType: 'address', type: 'address' },
              { name: 'value', internalType: 'uint256', type: 'uint256' },
              { name: 'decimals', internalType: 'uint256', type: 'uint256' },
              { name: 'currency', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'projectTokenCount',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'beneficiary', internalType: 'address', type: 'address' },
          { name: 'preferClaimedTokens', internalType: 'bool', type: 'bool' },
          { name: 'memo', internalType: 'string', type: 'string' },
          { name: 'metadata', internalType: 'bytes', type: 'bytes' },
        ],
        indexed: false,
      },
      {
        name: 'delegatedAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'DelegateDidPay',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'delegate',
        internalType: 'contract IJBRedemptionDelegate3_1_1',
        type: 'address',
        indexed: true,
      },
      {
        name: 'data',
        internalType: 'struct JBDidRedeemData3_1_1',
        type: 'tuple',
        components: [
          { name: 'holder', internalType: 'address', type: 'address' },
          { name: 'projectId', internalType: 'uint256', type: 'uint256' },
          {
            name: 'currentFundingCycleConfiguration',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'projectTokenCount',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'reclaimedAmount',
            internalType: 'struct JBTokenAmount',
            type: 'tuple',
            components: [
              { name: 'token', internalType: 'address', type: 'address' },
              { name: 'value', internalType: 'uint256', type: 'uint256' },
              { name: 'decimals', internalType: 'uint256', type: 'uint256' },
              { name: 'currency', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'forwardedAmount',
            internalType: 'struct JBTokenAmount',
            type: 'tuple',
            components: [
              { name: 'token', internalType: 'address', type: 'address' },
              { name: 'value', internalType: 'uint256', type: 'uint256' },
              { name: 'decimals', internalType: 'uint256', type: 'uint256' },
              { name: 'currency', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'beneficiary',
            internalType: 'address payable',
            type: 'address',
          },
          { name: 'memo', internalType: 'string', type: 'string' },
          { name: 'dataSourceMetadata', internalType: 'bytes', type: 'bytes' },
          { name: 'redeemerMetadata', internalType: 'bytes', type: 'bytes' },
        ],
        indexed: false,
      },
      {
        name: 'delegatedAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'fee', internalType: 'uint256', type: 'uint256', indexed: false },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'DelegateDidRedeem',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'delegate',
        internalType: 'contract IJBRedemptionDelegate',
        type: 'address',
        indexed: true,
      },
      {
        name: 'data',
        internalType: 'struct JBDidRedeemData',
        type: 'tuple',
        components: [
          { name: 'holder', internalType: 'address', type: 'address' },
          { name: 'projectId', internalType: 'uint256', type: 'uint256' },
          {
            name: 'currentFundingCycleConfiguration',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'projectTokenCount',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'reclaimedAmount',
            internalType: 'struct JBTokenAmount',
            type: 'tuple',
            components: [
              { name: 'token', internalType: 'address', type: 'address' },
              { name: 'value', internalType: 'uint256', type: 'uint256' },
              { name: 'decimals', internalType: 'uint256', type: 'uint256' },
              { name: 'currency', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'forwardedAmount',
            internalType: 'struct JBTokenAmount',
            type: 'tuple',
            components: [
              { name: 'token', internalType: 'address', type: 'address' },
              { name: 'value', internalType: 'uint256', type: 'uint256' },
              { name: 'decimals', internalType: 'uint256', type: 'uint256' },
              { name: 'currency', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'beneficiary',
            internalType: 'address payable',
            type: 'address',
          },
          { name: 'memo', internalType: 'string', type: 'string' },
          { name: 'metadata', internalType: 'bytes', type: 'bytes' },
        ],
        indexed: false,
      },
      {
        name: 'delegatedAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'DelegateDidRedeem',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'fundingCycleConfiguration',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'fundingCycleNumber',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'projectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'beneficiary',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'distributedAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'fee', internalType: 'uint256', type: 'uint256', indexed: false },
      {
        name: 'beneficiaryDistributionAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'metadata',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'DistributePayouts',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'projectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'domain',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'group',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'split',
        internalType: 'struct JBSplit',
        type: 'tuple',
        components: [
          { name: 'preferClaimed', internalType: 'bool', type: 'bool' },
          { name: 'preferAddToBalance', internalType: 'bool', type: 'bool' },
          { name: 'percent', internalType: 'uint256', type: 'uint256' },
          { name: 'projectId', internalType: 'uint256', type: 'uint256' },
          {
            name: 'beneficiary',
            internalType: 'address payable',
            type: 'address',
          },
          { name: 'lockedUntil', internalType: 'uint256', type: 'uint256' },
          {
            name: 'allocator',
            internalType: 'contract IJBSplitAllocator',
            type: 'address',
          },
        ],
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'netAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'DistributeToPayoutSplit',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'projectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'feeProjectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'reason', internalType: 'bytes', type: 'bytes', indexed: false },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FeeReverted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'projectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      { name: 'fee', internalType: 'uint256', type: 'uint256', indexed: true },
      {
        name: 'feeDiscount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'beneficiary',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'HoldFee',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'projectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'to',
        internalType: 'contract IJBPaymentTerminal',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Migrate',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'fundingCycleConfiguration',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'fundingCycleNumber',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'projectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'payer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'beneficiary',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'beneficiaryTokenCount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'memo', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'metadata',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Pay',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'projectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'split',
        internalType: 'struct JBSplit',
        type: 'tuple',
        components: [
          { name: 'preferClaimed', internalType: 'bool', type: 'bool' },
          { name: 'preferAddToBalance', internalType: 'bool', type: 'bool' },
          { name: 'percent', internalType: 'uint256', type: 'uint256' },
          { name: 'projectId', internalType: 'uint256', type: 'uint256' },
          {
            name: 'beneficiary',
            internalType: 'address payable',
            type: 'address',
          },
          { name: 'lockedUntil', internalType: 'uint256', type: 'uint256' },
          {
            name: 'allocator',
            internalType: 'contract IJBSplitAllocator',
            type: 'address',
          },
        ],
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'reason', internalType: 'bytes', type: 'bytes', indexed: false },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'PayoutReverted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'projectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      { name: 'wasHeld', internalType: 'bool', type: 'bool', indexed: true },
      {
        name: 'beneficiary',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'ProcessFee',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'fundingCycleConfiguration',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'fundingCycleNumber',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'projectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'holder',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'beneficiary',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'tokenCount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'reclaimedAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'memo', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'metadata',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'RedeemTokens',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'projectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'refundedFees',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'leftoverAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'RefundHeldFees',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'fee', internalType: 'uint256', type: 'uint256', indexed: false },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'SetFee',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feeGauge',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'SetFeeGauge',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'addrs',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'flag', internalType: 'bool', type: 'bool', indexed: true },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'SetFeelessAddress',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'fundingCycleConfiguration',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'fundingCycleNumber',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'projectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'beneficiary',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'distributedAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'netDistributedamount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'memo', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'metadata',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'UseAllowance',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_token', internalType: 'address', type: 'address' },
      { name: '_projectId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'acceptsToken',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: '_projectId', internalType: 'uint256', type: 'uint256' },
      { name: '_amount', internalType: 'uint256', type: 'uint256' },
      { name: '_token', internalType: 'address', type: 'address' },
      { name: '_memo', internalType: 'string', type: 'string' },
      { name: '_metadata', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'addToBalanceOf',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: '_projectId', internalType: 'uint256', type: 'uint256' },
      { name: '_amount', internalType: 'uint256', type: 'uint256' },
      { name: '_token', internalType: 'address', type: 'address' },
      { name: '_shouldRefundHeldFees', internalType: 'bool', type: 'bool' },
      { name: '_memo', internalType: 'string', type: 'string' },
      { name: '_metadata', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'addToBalanceOf',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'baseWeightCurrency',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'currency',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_token', internalType: 'address', type: 'address' }],
    name: 'currencyForToken',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_projectId', internalType: 'uint256', type: 'uint256' }],
    name: 'currentEthOverflowOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_token', internalType: 'address', type: 'address' }],
    name: 'decimalsForToken',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'directory',
    outputs: [
      { name: '', internalType: 'contract IJBDirectory', type: 'address' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_projectId', internalType: 'uint256', type: 'uint256' },
      { name: '_amount', internalType: 'uint256', type: 'uint256' },
      { name: '_currency', internalType: 'uint256', type: 'uint256' },
      { name: '_token', internalType: 'address', type: 'address' },
      { name: '_minReturnedTokens', internalType: 'uint256', type: 'uint256' },
      { name: '_metadata', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'distributePayoutsOf',
    outputs: [
      {
        name: 'netLeftoverDistributionAmount',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'fee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'feeGauge',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_projectId', internalType: 'uint256', type: 'uint256' }],
    name: 'heldFeesOf',
    outputs: [
      {
        name: '',
        internalType: 'struct JBFee[]',
        type: 'tuple[]',
        components: [
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'fee', internalType: 'uint32', type: 'uint32' },
          { name: 'feeDiscount', internalType: 'uint32', type: 'uint32' },
          { name: 'beneficiary', internalType: 'address', type: 'address' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'isFeelessAddress',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_projectId', internalType: 'uint256', type: 'uint256' },
      {
        name: '_to',
        internalType: 'contract IJBPaymentTerminal',
        type: 'address',
      },
    ],
    name: 'migrate',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'operatorStore',
    outputs: [
      { name: '', internalType: 'contract IJBOperatorStore', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: '_projectId', internalType: 'uint256', type: 'uint256' },
      { name: '_amount', internalType: 'uint256', type: 'uint256' },
      { name: '_token', internalType: 'address', type: 'address' },
      { name: '_beneficiary', internalType: 'address', type: 'address' },
      { name: '_minReturnedTokens', internalType: 'uint256', type: 'uint256' },
      { name: '_preferClaimedTokens', internalType: 'bool', type: 'bool' },
      { name: '_memo', internalType: 'string', type: 'string' },
      { name: '_metadata', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'pay',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'payoutSplitsGroup',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'prices',
    outputs: [
      { name: '', internalType: 'contract IJBPrices', type: 'address' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_projectId', internalType: 'uint256', type: 'uint256' }],
    name: 'processFees',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'projects',
    outputs: [
      { name: '', internalType: 'contract IJBProjects', type: 'address' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_holder', internalType: 'address', type: 'address' },
      { name: '_projectId', internalType: 'uint256', type: 'uint256' },
      { name: '_tokenCount', internalType: 'uint256', type: 'uint256' },
      { name: '_token', internalType: 'address', type: 'address' },
      { name: '_minReturnedTokens', internalType: 'uint256', type: 'uint256' },
      {
        name: '_beneficiary',
        internalType: 'address payable',
        type: 'address',
      },
      { name: '_memo', internalType: 'string', type: 'string' },
      { name: '_metadata', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'redeemTokensOf',
    outputs: [
      { name: 'reclaimAmount', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_fee', internalType: 'uint256', type: 'uint256' }],
    name: 'setFee',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_feeGauge', internalType: 'address', type: 'address' }],
    name: 'setFeeGauge',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_address', internalType: 'address', type: 'address' },
      { name: '_flag', internalType: 'bool', type: 'bool' },
    ],
    name: 'setFeelessAddress',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'splitsStore',
    outputs: [
      { name: '', internalType: 'contract IJBSplitsStore', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'store',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'token',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_projectId', internalType: 'uint256', type: 'uint256' },
      { name: '_amount', internalType: 'uint256', type: 'uint256' },
      { name: '_currency', internalType: 'uint256', type: 'uint256' },
      { name: '_token', internalType: 'address', type: 'address' },
      { name: '_minReturnedTokens', internalType: 'uint256', type: 'uint256' },
      {
        name: '_beneficiary',
        internalType: 'address payable',
        type: 'address',
      },
      { name: '_memo', internalType: 'string', type: 'string' },
      { name: '_metadata', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'useAllowanceOf',
    outputs: [
      {
        name: 'netDistributedAmount',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
  },
] as const

/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1d9619E10086FdC1065B114298384aAe3F680CC0)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xd89Ed8008961F68Aab849f49e122f9a1266240Db)
 */
export const jbethPaymentTerminal3_1_2Address = {
  1: '0x1d9619E10086FdC1065B114298384aAe3F680CC0',
  5: '0xd89Ed8008961F68Aab849f49e122f9a1266240Db',
} as const

/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1d9619E10086FdC1065B114298384aAe3F680CC0)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xd89Ed8008961F68Aab849f49e122f9a1266240Db)
 */
export const jbethPaymentTerminal3_1_2Config = {
  address: jbethPaymentTerminal3_1_2Address,
  abi: jbethPaymentTerminal3_1_2ABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// JBFundingCycleStore
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x6f18cF9173136c0B5A6eBF45f19D58d3ff2E17e6)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xB9Ee9d8203467f6EC0eAC81163d210bd1a7d3b55)
 */
export const jbFundingCycleStoreABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      {
        name: '_directory',
        internalType: 'contract IJBDirectory',
        type: 'address',
      },
    ],
  },
  { type: 'error', inputs: [], name: 'CONTROLLER_UNAUTHORIZED' },
  { type: 'error', inputs: [], name: 'INVALID_BALLOT' },
  { type: 'error', inputs: [], name: 'INVALID_DISCOUNT_RATE' },
  { type: 'error', inputs: [], name: 'INVALID_DURATION' },
  { type: 'error', inputs: [], name: 'INVALID_TIMEFRAME' },
  { type: 'error', inputs: [], name: 'INVALID_WEIGHT' },
  { type: 'error', inputs: [], name: 'NO_SAME_BLOCK_RECONFIGURATION' },
  {
    type: 'error',
    inputs: [
      { name: 'prod1', internalType: 'uint256', type: 'uint256' },
      { name: 'denominator', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'PRBMath__MulDivOverflow',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'configuration',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'projectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'data',
        internalType: 'struct JBFundingCycleData',
        type: 'tuple',
        components: [
          { name: 'duration', internalType: 'uint256', type: 'uint256' },
          { name: 'weight', internalType: 'uint256', type: 'uint256' },
          { name: 'discountRate', internalType: 'uint256', type: 'uint256' },
          {
            name: 'ballot',
            internalType: 'contract IJBFundingCycleBallot',
            type: 'address',
          },
        ],
        indexed: false,
      },
      {
        name: 'metadata',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'mustStartAtOrAfter',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Configure',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'configuration',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'projectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'basedOn',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Init',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_projectId', internalType: 'uint256', type: 'uint256' },
      {
        name: '_data',
        internalType: 'struct JBFundingCycleData',
        type: 'tuple',
        components: [
          { name: 'duration', internalType: 'uint256', type: 'uint256' },
          { name: 'weight', internalType: 'uint256', type: 'uint256' },
          { name: 'discountRate', internalType: 'uint256', type: 'uint256' },
          {
            name: 'ballot',
            internalType: 'contract IJBFundingCycleBallot',
            type: 'address',
          },
        ],
      },
      { name: '_metadata', internalType: 'uint256', type: 'uint256' },
      { name: '_mustStartAtOrAfter', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'configureFor',
    outputs: [
      {
        name: '',
        internalType: 'struct JBFundingCycle',
        type: 'tuple',
        components: [
          { name: 'number', internalType: 'uint256', type: 'uint256' },
          { name: 'configuration', internalType: 'uint256', type: 'uint256' },
          { name: 'basedOn', internalType: 'uint256', type: 'uint256' },
          { name: 'start', internalType: 'uint256', type: 'uint256' },
          { name: 'duration', internalType: 'uint256', type: 'uint256' },
          { name: 'weight', internalType: 'uint256', type: 'uint256' },
          { name: 'discountRate', internalType: 'uint256', type: 'uint256' },
          {
            name: 'ballot',
            internalType: 'contract IJBFundingCycleBallot',
            type: 'address',
          },
          { name: 'metadata', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_projectId', internalType: 'uint256', type: 'uint256' }],
    name: 'currentBallotStateOf',
    outputs: [{ name: '', internalType: 'enum JBBallotState', type: 'uint8' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_projectId', internalType: 'uint256', type: 'uint256' }],
    name: 'currentOf',
    outputs: [
      {
        name: 'fundingCycle',
        internalType: 'struct JBFundingCycle',
        type: 'tuple',
        components: [
          { name: 'number', internalType: 'uint256', type: 'uint256' },
          { name: 'configuration', internalType: 'uint256', type: 'uint256' },
          { name: 'basedOn', internalType: 'uint256', type: 'uint256' },
          { name: 'start', internalType: 'uint256', type: 'uint256' },
          { name: 'duration', internalType: 'uint256', type: 'uint256' },
          { name: 'weight', internalType: 'uint256', type: 'uint256' },
          { name: 'discountRate', internalType: 'uint256', type: 'uint256' },
          {
            name: 'ballot',
            internalType: 'contract IJBFundingCycleBallot',
            type: 'address',
          },
          { name: 'metadata', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'directory',
    outputs: [
      { name: '', internalType: 'contract IJBDirectory', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_projectId', internalType: 'uint256', type: 'uint256' },
      { name: '_configuration', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'get',
    outputs: [
      {
        name: 'fundingCycle',
        internalType: 'struct JBFundingCycle',
        type: 'tuple',
        components: [
          { name: 'number', internalType: 'uint256', type: 'uint256' },
          { name: 'configuration', internalType: 'uint256', type: 'uint256' },
          { name: 'basedOn', internalType: 'uint256', type: 'uint256' },
          { name: 'start', internalType: 'uint256', type: 'uint256' },
          { name: 'duration', internalType: 'uint256', type: 'uint256' },
          { name: 'weight', internalType: 'uint256', type: 'uint256' },
          { name: 'discountRate', internalType: 'uint256', type: 'uint256' },
          {
            name: 'ballot',
            internalType: 'contract IJBFundingCycleBallot',
            type: 'address',
          },
          { name: 'metadata', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'latestConfigurationOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_projectId', internalType: 'uint256', type: 'uint256' }],
    name: 'latestConfiguredOf',
    outputs: [
      {
        name: 'fundingCycle',
        internalType: 'struct JBFundingCycle',
        type: 'tuple',
        components: [
          { name: 'number', internalType: 'uint256', type: 'uint256' },
          { name: 'configuration', internalType: 'uint256', type: 'uint256' },
          { name: 'basedOn', internalType: 'uint256', type: 'uint256' },
          { name: 'start', internalType: 'uint256', type: 'uint256' },
          { name: 'duration', internalType: 'uint256', type: 'uint256' },
          { name: 'weight', internalType: 'uint256', type: 'uint256' },
          { name: 'discountRate', internalType: 'uint256', type: 'uint256' },
          {
            name: 'ballot',
            internalType: 'contract IJBFundingCycleBallot',
            type: 'address',
          },
          { name: 'metadata', internalType: 'uint256', type: 'uint256' },
        ],
      },
      {
        name: 'ballotState',
        internalType: 'enum JBBallotState',
        type: 'uint8',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_projectId', internalType: 'uint256', type: 'uint256' }],
    name: 'queuedOf',
    outputs: [
      {
        name: 'fundingCycle',
        internalType: 'struct JBFundingCycle',
        type: 'tuple',
        components: [
          { name: 'number', internalType: 'uint256', type: 'uint256' },
          { name: 'configuration', internalType: 'uint256', type: 'uint256' },
          { name: 'basedOn', internalType: 'uint256', type: 'uint256' },
          { name: 'start', internalType: 'uint256', type: 'uint256' },
          { name: 'duration', internalType: 'uint256', type: 'uint256' },
          { name: 'weight', internalType: 'uint256', type: 'uint256' },
          { name: 'discountRate', internalType: 'uint256', type: 'uint256' },
          {
            name: 'ballot',
            internalType: 'contract IJBFundingCycleBallot',
            type: 'address',
          },
          { name: 'metadata', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
] as const

/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x6f18cF9173136c0B5A6eBF45f19D58d3ff2E17e6)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xB9Ee9d8203467f6EC0eAC81163d210bd1a7d3b55)
 */
export const jbFundingCycleStoreAddress = {
  1: '0x6f18cF9173136c0B5A6eBF45f19D58d3ff2E17e6',
  5: '0xB9Ee9d8203467f6EC0eAC81163d210bd1a7d3b55',
} as const

/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x6f18cF9173136c0B5A6eBF45f19D58d3ff2E17e6)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xB9Ee9d8203467f6EC0eAC81163d210bd1a7d3b55)
 */
export const jbFundingCycleStoreConfig = {
  address: jbFundingCycleStoreAddress,
  abi: jbFundingCycleStoreABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// JBFundAccessConstraintsStore
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xA4425A1E5b7B28Cb689719B1428e3088C1F89E30)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xbF8b5ea02e50073348767fd9418beDEd30C835D4)
 */
export const jbFundAccessConstraintsStoreABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      {
        name: '_directory',
        internalType: 'contract IJBDirectory',
        type: 'address',
      },
    ],
  },
  { type: 'error', inputs: [], name: 'CONTROLLER_UNAUTHORIZED' },
  { type: 'error', inputs: [], name: 'INVALID_DISTRIBUTION_LIMIT' },
  { type: 'error', inputs: [], name: 'INVALID_DISTRIBUTION_LIMIT_CURRENCY' },
  { type: 'error', inputs: [], name: 'INVALID_OVERFLOW_ALLOWANCE' },
  { type: 'error', inputs: [], name: 'INVALID_OVERFLOW_ALLOWANCE_CURRENCY' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'fundingCycleConfiguration',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'projectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'constraints',
        internalType: 'struct JBFundAccessConstraints',
        type: 'tuple',
        components: [
          {
            name: 'terminal',
            internalType: 'contract IJBPaymentTerminal',
            type: 'address',
          },
          { name: 'token', internalType: 'address', type: 'address' },
          {
            name: 'distributionLimit',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'distributionLimitCurrency',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'overflowAllowance',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'overflowAllowanceCurrency',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
        indexed: false,
      },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'SetFundAccessConstraints',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'directory',
    outputs: [
      { name: '', internalType: 'contract IJBDirectory', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_projectId', internalType: 'uint256', type: 'uint256' },
      { name: '_configuration', internalType: 'uint256', type: 'uint256' },
      {
        name: '_terminal',
        internalType: 'contract IJBPaymentTerminal',
        type: 'address',
      },
      { name: '_token', internalType: 'address', type: 'address' },
    ],
    name: 'distributionLimitOf',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_projectId', internalType: 'uint256', type: 'uint256' },
      { name: '_configuration', internalType: 'uint256', type: 'uint256' },
      {
        name: '_terminal',
        internalType: 'contract IJBPaymentTerminal',
        type: 'address',
      },
      { name: '_token', internalType: 'address', type: 'address' },
    ],
    name: 'overflowAllowanceOf',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_projectId', internalType: 'uint256', type: 'uint256' },
      { name: '_configuration', internalType: 'uint256', type: 'uint256' },
      {
        name: '_fundAccessConstraints',
        internalType: 'struct JBFundAccessConstraints[]',
        type: 'tuple[]',
        components: [
          {
            name: 'terminal',
            internalType: 'contract IJBPaymentTerminal',
            type: 'address',
          },
          { name: 'token', internalType: 'address', type: 'address' },
          {
            name: 'distributionLimit',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'distributionLimitCurrency',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'overflowAllowance',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'overflowAllowanceCurrency',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
    name: 'setFor',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xA4425A1E5b7B28Cb689719B1428e3088C1F89E30)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xbF8b5ea02e50073348767fd9418beDEd30C835D4)
 */
export const jbFundAccessConstraintsStoreAddress = {
  1: '0xA4425A1E5b7B28Cb689719B1428e3088C1F89E30',
  5: '0xbF8b5ea02e50073348767fd9418beDEd30C835D4',
} as const

/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xA4425A1E5b7B28Cb689719B1428e3088C1F89E30)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xbF8b5ea02e50073348767fd9418beDEd30C835D4)
 */
export const jbFundAccessConstraintsStoreConfig = {
  address: jbFundAccessConstraintsStoreAddress,
  abi: jbFundAccessConstraintsStoreABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// JBOperatorStore
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x6F3C5afCa0c9eDf3926eF2dDF17c8ae6391afEfb)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x99dB6b517683237dE9C494bbd17861f3608F3585)
 */
export const jbOperatorStoreABI = [
  { type: 'error', inputs: [], name: 'PERMISSION_INDEX_OUT_OF_BOUNDS' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'domain',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'permissionIndexes',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
      {
        name: 'packed',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SetOperator',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_operator', internalType: 'address', type: 'address' },
      { name: '_account', internalType: 'address', type: 'address' },
      { name: '_domain', internalType: 'uint256', type: 'uint256' },
      { name: '_permissionIndex', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'hasPermission',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_operator', internalType: 'address', type: 'address' },
      { name: '_account', internalType: 'address', type: 'address' },
      { name: '_domain', internalType: 'uint256', type: 'uint256' },
      {
        name: '_permissionIndexes',
        internalType: 'uint256[]',
        type: 'uint256[]',
      },
    ],
    name: 'hasPermissions',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'permissionsOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: '_operatorData',
        internalType: 'struct JBOperatorData',
        type: 'tuple',
        components: [
          { name: 'operator', internalType: 'address', type: 'address' },
          { name: 'domain', internalType: 'uint256', type: 'uint256' },
          {
            name: 'permissionIndexes',
            internalType: 'uint256[]',
            type: 'uint256[]',
          },
        ],
      },
    ],
    name: 'setOperator',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: '_operatorData',
        internalType: 'struct JBOperatorData[]',
        type: 'tuple[]',
        components: [
          { name: 'operator', internalType: 'address', type: 'address' },
          { name: 'domain', internalType: 'uint256', type: 'uint256' },
          {
            name: 'permissionIndexes',
            internalType: 'uint256[]',
            type: 'uint256[]',
          },
        ],
      },
    ],
    name: 'setOperators',
    outputs: [],
  },
] as const

/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x6F3C5afCa0c9eDf3926eF2dDF17c8ae6391afEfb)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x99dB6b517683237dE9C494bbd17861f3608F3585)
 */
export const jbOperatorStoreAddress = {
  1: '0x6F3C5afCa0c9eDf3926eF2dDF17c8ae6391afEfb',
  5: '0x99dB6b517683237dE9C494bbd17861f3608F3585',
} as const

/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x6F3C5afCa0c9eDf3926eF2dDF17c8ae6391afEfb)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x99dB6b517683237dE9C494bbd17861f3608F3585)
 */
export const jbOperatorStoreConfig = {
  address: jbOperatorStoreAddress,
  abi: jbOperatorStoreABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// JBProjects
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xD8B4359143eda5B2d763E127Ed27c77addBc47d3)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x21263a042aFE4bAE34F08Bb318056C181bD96D3b)
 */
export const jbProjectsABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      {
        name: '_operatorStore',
        internalType: 'contract IJBOperatorStore',
        type: 'address',
      },
    ],
  },
  { type: 'error', inputs: [], name: 'UNAUTHORIZED' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'projectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'metadata',
        internalType: 'struct JBProjectMetadata',
        type: 'tuple',
        components: [
          { name: 'content', internalType: 'string', type: 'string' },
          { name: 'domain', internalType: 'uint256', type: 'uint256' },
        ],
        indexed: false,
      },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Create',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'delegator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'fromDelegate',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'toDelegate',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'DelegateChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'delegate',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'previousBalance',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'newBalance',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'DelegateVotesChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'projectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'metadata',
        internalType: 'struct JBProjectMetadata',
        type: 'tuple',
        components: [
          { name: 'content', internalType: 'string', type: 'string' },
          { name: 'domain', internalType: 'uint256', type: 'uint256' },
        ],
        indexed: false,
      },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'SetMetadata',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'resolver',
        internalType: 'contract IJBTokenUriResolver',
        type: 'address',
        indexed: true,
      },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'SetTokenUriResolver',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DOMAIN_SEPARATOR',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'count',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_owner', internalType: 'address', type: 'address' },
      {
        name: '_metadata',
        internalType: 'struct JBProjectMetadata',
        type: 'tuple',
        components: [
          { name: 'content', internalType: 'string', type: 'string' },
          { name: 'domain', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
    name: 'createFor',
    outputs: [{ name: 'projectId', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'delegatee', internalType: 'address', type: 'address' }],
    name: 'delegate',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'delegatee', internalType: 'address', type: 'address' },
      { name: 'nonce', internalType: 'uint256', type: 'uint256' },
      { name: 'expiry', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'delegateBySig',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'delegates',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'getPastTotalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getPastVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'metadataContentOf',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'nonces',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'operatorStore',
    outputs: [
      { name: '', internalType: 'contract IJBOperatorStore', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: '_data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_projectId', internalType: 'uint256', type: 'uint256' },
      {
        name: '_metadata',
        internalType: 'struct JBProjectMetadata',
        type: 'tuple',
        components: [
          { name: 'content', internalType: 'string', type: 'string' },
          { name: 'domain', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
    name: 'setMetadataOf',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: '_newResolver',
        internalType: 'contract IJBTokenUriResolver',
        type: 'address',
      },
    ],
    name: 'setTokenUriResolver',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_projectId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'tokenUriResolver',
    outputs: [
      {
        name: '',
        internalType: 'contract IJBTokenUriResolver',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
] as const

/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xD8B4359143eda5B2d763E127Ed27c77addBc47d3)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x21263a042aFE4bAE34F08Bb318056C181bD96D3b)
 */
export const jbProjectsAddress = {
  1: '0xD8B4359143eda5B2d763E127Ed27c77addBc47d3',
  5: '0x21263a042aFE4bAE34F08Bb318056C181bD96D3b',
} as const

/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xD8B4359143eda5B2d763E127Ed27c77addBc47d3)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x21263a042aFE4bAE34F08Bb318056C181bD96D3b)
 */
export const jbProjectsConfig = {
  address: jbProjectsAddress,
  abi: jbProjectsABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// JBSplitsStore
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x0D25194ABE95185Db8e4B0294F5669E21C534785)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xce2Ce2F37fE5B2C2Dd047908B2F61c9c3f707272)
 */
export const jbSplitsStoreABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      {
        name: '_operatorStore',
        internalType: 'contract IJBOperatorStore',
        type: 'address',
      },
      {
        name: '_projects',
        internalType: 'contract IJBProjects',
        type: 'address',
      },
      {
        name: '_directory',
        internalType: 'contract IJBDirectory',
        type: 'address',
      },
    ],
  },
  { type: 'error', inputs: [], name: 'INVALID_LOCKED_UNTIL' },
  { type: 'error', inputs: [], name: 'INVALID_PROJECT_ID' },
  { type: 'error', inputs: [], name: 'INVALID_SPLIT_PERCENT' },
  { type: 'error', inputs: [], name: 'INVALID_TOTAL_PERCENT' },
  { type: 'error', inputs: [], name: 'PREVIOUS_LOCKED_SPLITS_NOT_INCLUDED' },
  { type: 'error', inputs: [], name: 'UNAUTHORIZED' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'projectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'domain',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'group',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'split',
        internalType: 'struct JBSplit',
        type: 'tuple',
        components: [
          { name: 'preferClaimed', internalType: 'bool', type: 'bool' },
          { name: 'preferAddToBalance', internalType: 'bool', type: 'bool' },
          { name: 'percent', internalType: 'uint256', type: 'uint256' },
          { name: 'projectId', internalType: 'uint256', type: 'uint256' },
          {
            name: 'beneficiary',
            internalType: 'address payable',
            type: 'address',
          },
          { name: 'lockedUntil', internalType: 'uint256', type: 'uint256' },
          {
            name: 'allocator',
            internalType: 'contract IJBSplitAllocator',
            type: 'address',
          },
        ],
        indexed: false,
      },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'SetSplit',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'directory',
    outputs: [
      { name: '', internalType: 'contract IJBDirectory', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'operatorStore',
    outputs: [
      { name: '', internalType: 'contract IJBOperatorStore', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'projects',
    outputs: [
      { name: '', internalType: 'contract IJBProjects', type: 'address' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_projectId', internalType: 'uint256', type: 'uint256' },
      { name: '_domain', internalType: 'uint256', type: 'uint256' },
      {
        name: '_groupedSplits',
        internalType: 'struct JBGroupedSplits[]',
        type: 'tuple[]',
        components: [
          { name: 'group', internalType: 'uint256', type: 'uint256' },
          {
            name: 'splits',
            internalType: 'struct JBSplit[]',
            type: 'tuple[]',
            components: [
              { name: 'preferClaimed', internalType: 'bool', type: 'bool' },
              {
                name: 'preferAddToBalance',
                internalType: 'bool',
                type: 'bool',
              },
              { name: 'percent', internalType: 'uint256', type: 'uint256' },
              { name: 'projectId', internalType: 'uint256', type: 'uint256' },
              {
                name: 'beneficiary',
                internalType: 'address payable',
                type: 'address',
              },
              { name: 'lockedUntil', internalType: 'uint256', type: 'uint256' },
              {
                name: 'allocator',
                internalType: 'contract IJBSplitAllocator',
                type: 'address',
              },
            ],
          },
        ],
      },
    ],
    name: 'set',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_projectId', internalType: 'uint256', type: 'uint256' },
      { name: '_domain', internalType: 'uint256', type: 'uint256' },
      { name: '_group', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'splitsOf',
    outputs: [
      {
        name: '',
        internalType: 'struct JBSplit[]',
        type: 'tuple[]',
        components: [
          { name: 'preferClaimed', internalType: 'bool', type: 'bool' },
          { name: 'preferAddToBalance', internalType: 'bool', type: 'bool' },
          { name: 'percent', internalType: 'uint256', type: 'uint256' },
          { name: 'projectId', internalType: 'uint256', type: 'uint256' },
          {
            name: 'beneficiary',
            internalType: 'address payable',
            type: 'address',
          },
          { name: 'lockedUntil', internalType: 'uint256', type: 'uint256' },
          {
            name: 'allocator',
            internalType: 'contract IJBSplitAllocator',
            type: 'address',
          },
        ],
      },
    ],
  },
] as const

/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x0D25194ABE95185Db8e4B0294F5669E21C534785)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xce2Ce2F37fE5B2C2Dd047908B2F61c9c3f707272)
 */
export const jbSplitsStoreAddress = {
  1: '0x0D25194ABE95185Db8e4B0294F5669E21C534785',
  5: '0xce2Ce2F37fE5B2C2Dd047908B2F61c9c3f707272',
} as const

/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x0D25194ABE95185Db8e4B0294F5669E21C534785)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xce2Ce2F37fE5B2C2Dd047908B2F61c9c3f707272)
 */
export const jbSplitsStoreConfig = {
  address: jbSplitsStoreAddress,
  abi: jbSplitsStoreABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// JBTokenStore
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x6FA996581D7edaABE62C15eaE19fEeD4F1DdDfE7)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1246a50e3aDaF684Ac566f0c40816fF738F309B3)
 */
export const jbTokenStoreABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      {
        name: '_operatorStore',
        internalType: 'contract IJBOperatorStore',
        type: 'address',
      },
      {
        name: '_projects',
        internalType: 'contract IJBProjects',
        type: 'address',
      },
      {
        name: '_directory',
        internalType: 'contract IJBDirectory',
        type: 'address',
      },
      {
        name: '_fundingCycleStore',
        internalType: 'contract IJBFundingCycleStore',
        type: 'address',
      },
    ],
  },
  { type: 'error', inputs: [], name: 'ALREADY_SET' },
  { type: 'error', inputs: [], name: 'CONTROLLER_UNAUTHORIZED' },
  { type: 'error', inputs: [], name: 'EMPTY_NAME' },
  { type: 'error', inputs: [], name: 'EMPTY_SYMBOL' },
  { type: 'error', inputs: [], name: 'EMPTY_TOKEN' },
  { type: 'error', inputs: [], name: 'INSUFFICIENT_FUNDS' },
  { type: 'error', inputs: [], name: 'INSUFFICIENT_UNCLAIMED_TOKENS' },
  { type: 'error', inputs: [], name: 'OVERFLOW_ALERT' },
  { type: 'error', inputs: [], name: 'PROJECT_ALREADY_HAS_TOKEN' },
  { type: 'error', inputs: [], name: 'RECIPIENT_ZERO_ADDRESS' },
  { type: 'error', inputs: [], name: 'TOKENS_MUST_HAVE_18_DECIMALS' },
  { type: 'error', inputs: [], name: 'TOKEN_NOT_FOUND' },
  { type: 'error', inputs: [], name: 'TRANSFERS_PAUSED' },
  { type: 'error', inputs: [], name: 'UNAUTHORIZED' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'holder',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'projectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'initialUnclaimedBalance',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'initialClaimedBalance',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'preferClaimedTokens',
        internalType: 'bool',
        type: 'bool',
        indexed: false,
      },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Burn',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'holder',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'projectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'initialUnclaimedBalance',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Claim',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'projectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'token',
        internalType: 'contract IJBToken',
        type: 'address',
        indexed: true,
      },
      { name: 'name', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'symbol',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Issue',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'holder',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'projectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'tokensWereClaimed',
        internalType: 'bool',
        type: 'bool',
        indexed: false,
      },
      {
        name: 'preferClaimedTokens',
        internalType: 'bool',
        type: 'bool',
        indexed: false,
      },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Mint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'projectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'newToken',
        internalType: 'contract IJBToken',
        type: 'address',
        indexed: true,
      },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Set',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'holder',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'projectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'recipient',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_holder', internalType: 'address', type: 'address' },
      { name: '_projectId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'balanceOf',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_holder', internalType: 'address', type: 'address' },
      { name: '_projectId', internalType: 'uint256', type: 'uint256' },
      { name: '_amount', internalType: 'uint256', type: 'uint256' },
      { name: '_preferClaimedTokens', internalType: 'bool', type: 'bool' },
    ],
    name: 'burnFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_holder', internalType: 'address', type: 'address' },
      { name: '_projectId', internalType: 'uint256', type: 'uint256' },
      { name: '_amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'claimFor',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'directory',
    outputs: [
      { name: '', internalType: 'contract IJBDirectory', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'fundingCycleStore',
    outputs: [
      {
        name: '',
        internalType: 'contract IJBFundingCycleStore',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_projectId', internalType: 'uint256', type: 'uint256' },
      { name: '_name', internalType: 'string', type: 'string' },
      { name: '_symbol', internalType: 'string', type: 'string' },
    ],
    name: 'issueFor',
    outputs: [
      { name: 'token', internalType: 'contract IJBToken', type: 'address' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_holder', internalType: 'address', type: 'address' },
      { name: '_projectId', internalType: 'uint256', type: 'uint256' },
      { name: '_amount', internalType: 'uint256', type: 'uint256' },
      { name: '_preferClaimedTokens', internalType: 'bool', type: 'bool' },
    ],
    name: 'mintFor',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'operatorStore',
    outputs: [
      { name: '', internalType: 'contract IJBOperatorStore', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'projects',
    outputs: [
      { name: '', internalType: 'contract IJBProjects', type: 'address' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_projectId', internalType: 'uint256', type: 'uint256' },
      { name: '_token', internalType: 'contract IJBToken', type: 'address' },
    ],
    name: 'setFor',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenOf',
    outputs: [{ name: '', internalType: 'contract IJBToken', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_projectId', internalType: 'uint256', type: 'uint256' }],
    name: 'totalSupplyOf',
    outputs: [
      { name: 'totalSupply', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_holder', internalType: 'address', type: 'address' },
      { name: '_projectId', internalType: 'uint256', type: 'uint256' },
      { name: '_recipient', internalType: 'address', type: 'address' },
      { name: '_amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'unclaimedBalanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'unclaimedTotalSupplyOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x6FA996581D7edaABE62C15eaE19fEeD4F1DdDfE7)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1246a50e3aDaF684Ac566f0c40816fF738F309B3)
 */
export const jbTokenStoreAddress = {
  1: '0x6FA996581D7edaABE62C15eaE19fEeD4F1DdDfE7',
  5: '0x1246a50e3aDaF684Ac566f0c40816fF738F309B3',
} as const

/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x6FA996581D7edaABE62C15eaE19fEeD4F1DdDfE7)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1246a50e3aDaF684Ac566f0c40816fF738F309B3)
 */
export const jbTokenStoreConfig = {
  address: jbTokenStoreAddress,
  abi: jbTokenStoreABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// JBSingleTokenPaymentTerminalStore
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xdF7Ca703225c5da79A86E08E03A206c267B7470C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x5b62ccB7fdA139185374c8f36FAa388c20E1387F)
 */
export const jbSingleTokenPaymentTerminalStoreABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      {
        name: '_directory',
        internalType: 'contract IJBDirectory',
        type: 'address',
      },
      {
        name: '_fundingCycleStore',
        internalType: 'contract IJBFundingCycleStore',
        type: 'address',
      },
      { name: '_prices', internalType: 'contract IJBPrices', type: 'address' },
    ],
  },
  { type: 'error', inputs: [], name: 'CURRENCY_MISMATCH' },
  { type: 'error', inputs: [], name: 'DISTRIBUTION_AMOUNT_LIMIT_REACHED' },
  { type: 'error', inputs: [], name: 'FUNDING_CYCLE_DISTRIBUTION_PAUSED' },
  { type: 'error', inputs: [], name: 'FUNDING_CYCLE_PAYMENT_PAUSED' },
  { type: 'error', inputs: [], name: 'FUNDING_CYCLE_REDEEM_PAUSED' },
  { type: 'error', inputs: [], name: 'INADEQUATE_CONTROLLER_ALLOWANCE' },
  {
    type: 'error',
    inputs: [],
    name: 'INADEQUATE_PAYMENT_TERMINAL_STORE_BALANCE',
  },
  { type: 'error', inputs: [], name: 'INSUFFICIENT_TOKENS' },
  { type: 'error', inputs: [], name: 'INVALID_AMOUNT_TO_SEND_DELEGATE' },
  { type: 'error', inputs: [], name: 'INVALID_FUNDING_CYCLE' },
  { type: 'error', inputs: [], name: 'PAYMENT_TERMINAL_MIGRATION_NOT_ALLOWED' },
  {
    type: 'error',
    inputs: [
      { name: 'prod1', internalType: 'uint256', type: 'uint256' },
      { name: 'denominator', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'PRBMath__MulDivOverflow',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      {
        name: '',
        internalType: 'contract IJBSingleTokenPaymentTerminal',
        type: 'address',
      },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      {
        name: '_terminal',
        internalType: 'contract IJBSingleTokenPaymentTerminal',
        type: 'address',
      },
      { name: '_projectId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'currentOverflowOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_projectId', internalType: 'uint256', type: 'uint256' },
      { name: '_tokenCount', internalType: 'uint256', type: 'uint256' },
      { name: '_totalSupply', internalType: 'uint256', type: 'uint256' },
      { name: '_overflow', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'currentReclaimableOverflowOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      {
        name: '_terminal',
        internalType: 'contract IJBSingleTokenPaymentTerminal',
        type: 'address',
      },
      { name: '_projectId', internalType: 'uint256', type: 'uint256' },
      { name: '_tokenCount', internalType: 'uint256', type: 'uint256' },
      { name: '_useTotalOverflow', internalType: 'bool', type: 'bool' },
    ],
    name: 'currentReclaimableOverflowOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_projectId', internalType: 'uint256', type: 'uint256' },
      { name: '_decimals', internalType: 'uint256', type: 'uint256' },
      { name: '_currency', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'currentTotalOverflowOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'directory',
    outputs: [
      { name: '', internalType: 'contract IJBDirectory', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'fundingCycleStore',
    outputs: [
      {
        name: '',
        internalType: 'contract IJBFundingCycleStore',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'prices',
    outputs: [
      { name: '', internalType: 'contract IJBPrices', type: 'address' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_projectId', internalType: 'uint256', type: 'uint256' },
      { name: '_amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'recordAddedBalanceFor',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_projectId', internalType: 'uint256', type: 'uint256' },
      { name: '_amount', internalType: 'uint256', type: 'uint256' },
      { name: '_currency', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'recordDistributionFor',
    outputs: [
      {
        name: 'fundingCycle',
        internalType: 'struct JBFundingCycle',
        type: 'tuple',
        components: [
          { name: 'number', internalType: 'uint256', type: 'uint256' },
          { name: 'configuration', internalType: 'uint256', type: 'uint256' },
          { name: 'basedOn', internalType: 'uint256', type: 'uint256' },
          { name: 'start', internalType: 'uint256', type: 'uint256' },
          { name: 'duration', internalType: 'uint256', type: 'uint256' },
          { name: 'weight', internalType: 'uint256', type: 'uint256' },
          { name: 'discountRate', internalType: 'uint256', type: 'uint256' },
          {
            name: 'ballot',
            internalType: 'contract IJBFundingCycleBallot',
            type: 'address',
          },
          { name: 'metadata', internalType: 'uint256', type: 'uint256' },
        ],
      },
      { name: 'distributedAmount', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_projectId', internalType: 'uint256', type: 'uint256' }],
    name: 'recordMigration',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_payer', internalType: 'address', type: 'address' },
      {
        name: '_amount',
        internalType: 'struct JBTokenAmount',
        type: 'tuple',
        components: [
          { name: 'token', internalType: 'address', type: 'address' },
          { name: 'value', internalType: 'uint256', type: 'uint256' },
          { name: 'decimals', internalType: 'uint256', type: 'uint256' },
          { name: 'currency', internalType: 'uint256', type: 'uint256' },
        ],
      },
      { name: '_projectId', internalType: 'uint256', type: 'uint256' },
      { name: '_baseWeightCurrency', internalType: 'uint256', type: 'uint256' },
      { name: '_beneficiary', internalType: 'address', type: 'address' },
      { name: '_memo', internalType: 'string', type: 'string' },
      { name: '_metadata', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'recordPaymentFrom',
    outputs: [
      {
        name: 'fundingCycle',
        internalType: 'struct JBFundingCycle',
        type: 'tuple',
        components: [
          { name: 'number', internalType: 'uint256', type: 'uint256' },
          { name: 'configuration', internalType: 'uint256', type: 'uint256' },
          { name: 'basedOn', internalType: 'uint256', type: 'uint256' },
          { name: 'start', internalType: 'uint256', type: 'uint256' },
          { name: 'duration', internalType: 'uint256', type: 'uint256' },
          { name: 'weight', internalType: 'uint256', type: 'uint256' },
          { name: 'discountRate', internalType: 'uint256', type: 'uint256' },
          {
            name: 'ballot',
            internalType: 'contract IJBFundingCycleBallot',
            type: 'address',
          },
          { name: 'metadata', internalType: 'uint256', type: 'uint256' },
        ],
      },
      { name: 'tokenCount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'delegateAllocations',
        internalType: 'struct JBPayDelegateAllocation[]',
        type: 'tuple[]',
        components: [
          {
            name: 'delegate',
            internalType: 'contract IJBPayDelegate',
            type: 'address',
          },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
        ],
      },
      { name: 'memo', internalType: 'string', type: 'string' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_holder', internalType: 'address', type: 'address' },
      { name: '_projectId', internalType: 'uint256', type: 'uint256' },
      { name: '_tokenCount', internalType: 'uint256', type: 'uint256' },
      { name: '_memo', internalType: 'string', type: 'string' },
      { name: '_metadata', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'recordRedemptionFor',
    outputs: [
      {
        name: 'fundingCycle',
        internalType: 'struct JBFundingCycle',
        type: 'tuple',
        components: [
          { name: 'number', internalType: 'uint256', type: 'uint256' },
          { name: 'configuration', internalType: 'uint256', type: 'uint256' },
          { name: 'basedOn', internalType: 'uint256', type: 'uint256' },
          { name: 'start', internalType: 'uint256', type: 'uint256' },
          { name: 'duration', internalType: 'uint256', type: 'uint256' },
          { name: 'weight', internalType: 'uint256', type: 'uint256' },
          { name: 'discountRate', internalType: 'uint256', type: 'uint256' },
          {
            name: 'ballot',
            internalType: 'contract IJBFundingCycleBallot',
            type: 'address',
          },
          { name: 'metadata', internalType: 'uint256', type: 'uint256' },
        ],
      },
      { name: 'reclaimAmount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'delegateAllocations',
        internalType: 'struct JBRedemptionDelegateAllocation[]',
        type: 'tuple[]',
        components: [
          {
            name: 'delegate',
            internalType: 'contract IJBRedemptionDelegate',
            type: 'address',
          },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
        ],
      },
      { name: 'memo', internalType: 'string', type: 'string' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_projectId', internalType: 'uint256', type: 'uint256' },
      { name: '_amount', internalType: 'uint256', type: 'uint256' },
      { name: '_currency', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'recordUsedAllowanceOf',
    outputs: [
      {
        name: 'fundingCycle',
        internalType: 'struct JBFundingCycle',
        type: 'tuple',
        components: [
          { name: 'number', internalType: 'uint256', type: 'uint256' },
          { name: 'configuration', internalType: 'uint256', type: 'uint256' },
          { name: 'basedOn', internalType: 'uint256', type: 'uint256' },
          { name: 'start', internalType: 'uint256', type: 'uint256' },
          { name: 'duration', internalType: 'uint256', type: 'uint256' },
          { name: 'weight', internalType: 'uint256', type: 'uint256' },
          { name: 'discountRate', internalType: 'uint256', type: 'uint256' },
          {
            name: 'ballot',
            internalType: 'contract IJBFundingCycleBallot',
            type: 'address',
          },
          { name: 'metadata', internalType: 'uint256', type: 'uint256' },
        ],
      },
      { name: 'usedAmount', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      {
        name: '',
        internalType: 'contract IJBSingleTokenPaymentTerminal',
        type: 'address',
      },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'usedDistributionLimitOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      {
        name: '',
        internalType: 'contract IJBSingleTokenPaymentTerminal',
        type: 'address',
      },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'usedOverflowAllowanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xdF7Ca703225c5da79A86E08E03A206c267B7470C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x5b62ccB7fdA139185374c8f36FAa388c20E1387F)
 */
export const jbSingleTokenPaymentTerminalStoreAddress = {
  1: '0xdF7Ca703225c5da79A86E08E03A206c267B7470C',
  5: '0x5b62ccB7fdA139185374c8f36FAa388c20E1387F',
} as const

/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xdF7Ca703225c5da79A86E08E03A206c267B7470C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x5b62ccB7fdA139185374c8f36FAa388c20E1387F)
 */
export const jbSingleTokenPaymentTerminalStoreConfig = {
  address: jbSingleTokenPaymentTerminalStoreAddress,
  abi: jbSingleTokenPaymentTerminalStoreABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// JBETHERC20ProjectPayerDeployer
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xa5ca9CEa71Df4b680484e5Ff753a1b1185ba5b43)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x483bFC77f28DB242d40aa456D801354fEEBb502E)
 */
export const jbetherc20ProjectPayerDeployerABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      {
        name: '_directory',
        internalType: 'contract IJBDirectory',
        type: 'address',
      },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'projectPayer',
        internalType: 'contract IJBProjectPayer',
        type: 'address',
        indexed: true,
      },
      {
        name: 'defaultProjectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'defaultBeneficiary',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'defaultPreferClaimedTokens',
        internalType: 'bool',
        type: 'bool',
        indexed: false,
      },
      {
        name: 'defaultMemo',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      {
        name: 'defaultMetadata',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
      {
        name: 'preferAddToBalance',
        internalType: 'bool',
        type: 'bool',
        indexed: false,
      },
      {
        name: 'directory',
        internalType: 'contract IJBDirectory',
        type: 'address',
        indexed: false,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'DeployProjectPayer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_defaultProjectId', internalType: 'uint256', type: 'uint256' },
      {
        name: '_defaultBeneficiary',
        internalType: 'address payable',
        type: 'address',
      },
      {
        name: '_defaultPreferClaimedTokens',
        internalType: 'bool',
        type: 'bool',
      },
      { name: '_defaultMemo', internalType: 'string', type: 'string' },
      { name: '_defaultMetadata', internalType: 'bytes', type: 'bytes' },
      {
        name: '_defaultPreferAddToBalance',
        internalType: 'bool',
        type: 'bool',
      },
      { name: '_owner', internalType: 'address', type: 'address' },
    ],
    name: 'deployProjectPayer',
    outputs: [
      {
        name: 'projectPayer',
        internalType: 'contract IJBProjectPayer',
        type: 'address',
      },
    ],
  },
] as const

/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xa5ca9CEa71Df4b680484e5Ff753a1b1185ba5b43)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x483bFC77f28DB242d40aa456D801354fEEBb502E)
 */
export const jbetherc20ProjectPayerDeployerAddress = {
  1: '0xa5ca9CEa71Df4b680484e5Ff753a1b1185ba5b43',
  5: '0x483bFC77f28DB242d40aa456D801354fEEBb502E',
} as const

/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xa5ca9CEa71Df4b680484e5Ff753a1b1185ba5b43)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x483bFC77f28DB242d40aa456D801354fEEBb502E)
 */
export const jbetherc20ProjectPayerDeployerConfig = {
  address: jbetherc20ProjectPayerDeployerAddress,
  abi: jbetherc20ProjectPayerDeployerABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// JBETHERC20SplitsPayerDeployer
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3ff1f0583a41CE8B9463F74a1227C75FC13f7C27)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x4C466008867c471316Be2606E5D76D1940fC4765)
 */
export const jbetherc20SplitsPayerDeployerABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      {
        name: '_splitsStore',
        internalType: 'contract IJBSplitsStore',
        type: 'address',
      },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'splitsPayer',
        internalType: 'contract IJBSplitsPayer',
        type: 'address',
        indexed: true,
      },
      {
        name: 'defaultSplitsProjectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'defaultSplitsDomain',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'defaultSplitsGroup',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'splitsStore',
        internalType: 'contract IJBSplitsStore',
        type: 'address',
        indexed: false,
      },
      {
        name: 'defaultProjectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'defaultBeneficiary',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'defaultPreferClaimedTokens',
        internalType: 'bool',
        type: 'bool',
        indexed: false,
      },
      {
        name: 'defaultMemo',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      {
        name: 'defaultMetadata',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
      {
        name: 'preferAddToBalance',
        internalType: 'bool',
        type: 'bool',
        indexed: false,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'DeploySplitsPayer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: '_defaultSplitsProjectId',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: '_defaultSplitsDomain',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: '_defaultSplitsGroup', internalType: 'uint256', type: 'uint256' },
      { name: '_defaultProjectId', internalType: 'uint256', type: 'uint256' },
      {
        name: '_defaultBeneficiary',
        internalType: 'address payable',
        type: 'address',
      },
      {
        name: '_defaultPreferClaimedTokens',
        internalType: 'bool',
        type: 'bool',
      },
      { name: '_defaultMemo', internalType: 'string', type: 'string' },
      { name: '_defaultMetadata', internalType: 'bytes', type: 'bytes' },
      {
        name: '_defaultPreferAddToBalance',
        internalType: 'bool',
        type: 'bool',
      },
      { name: '_owner', internalType: 'address', type: 'address' },
    ],
    name: 'deploySplitsPayer',
    outputs: [
      {
        name: 'splitsPayer',
        internalType: 'contract IJBSplitsPayer',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: '_defaultSplitsProjectId',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: '_defaultSplits',
        internalType: 'struct JBSplit[]',
        type: 'tuple[]',
        components: [
          { name: 'preferClaimed', internalType: 'bool', type: 'bool' },
          { name: 'preferAddToBalance', internalType: 'bool', type: 'bool' },
          { name: 'percent', internalType: 'uint256', type: 'uint256' },
          { name: 'projectId', internalType: 'uint256', type: 'uint256' },
          {
            name: 'beneficiary',
            internalType: 'address payable',
            type: 'address',
          },
          { name: 'lockedUntil', internalType: 'uint256', type: 'uint256' },
          {
            name: 'allocator',
            internalType: 'contract IJBSplitAllocator',
            type: 'address',
          },
        ],
      },
      {
        name: '_splitsStore',
        internalType: 'contract IJBSplitsStore',
        type: 'address',
      },
      { name: '_defaultProjectId', internalType: 'uint256', type: 'uint256' },
      {
        name: '_defaultBeneficiary',
        internalType: 'address payable',
        type: 'address',
      },
      {
        name: '_defaultPreferClaimedTokens',
        internalType: 'bool',
        type: 'bool',
      },
      { name: '_defaultMemo', internalType: 'string', type: 'string' },
      { name: '_defaultMetadata', internalType: 'bytes', type: 'bytes' },
      {
        name: '_defaultPreferAddToBalance',
        internalType: 'bool',
        type: 'bool',
      },
      { name: '_owner', internalType: 'address', type: 'address' },
    ],
    name: 'deploySplitsPayerWithSplits',
    outputs: [
      {
        name: 'splitsPayer',
        internalType: 'contract IJBSplitsPayer',
        type: 'address',
      },
    ],
  },
] as const

/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3ff1f0583a41CE8B9463F74a1227C75FC13f7C27)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x4C466008867c471316Be2606E5D76D1940fC4765)
 */
export const jbetherc20SplitsPayerDeployerAddress = {
  1: '0x3ff1f0583a41CE8B9463F74a1227C75FC13f7C27',
  5: '0x4C466008867c471316Be2606E5D76D1940fC4765',
} as const

/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3ff1f0583a41CE8B9463F74a1227C75FC13f7C27)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x4C466008867c471316Be2606E5D76D1940fC4765)
 */
export const jbetherc20SplitsPayerDeployerConfig = {
  address: jbetherc20SplitsPayerDeployerAddress,
  abi: jbetherc20SplitsPayerDeployerABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbControllerABI}__.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFFdD70C318915879d5192e8a0dcbFcB0285b3C98)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x7Cb86D43B665196BC719b6974D320bf674AFb395)
 */
export function useJbControllerRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof jbControllerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof jbControllerABI, TFunctionName, TSelectData>,
    'abi'
  > & { chainId?: keyof typeof jbControllerAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbControllerABI,
    address: jbControllerAddress[chainId as keyof typeof jbControllerAddress],
    ...config,
  } as UseContractReadConfig<
    typeof jbControllerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbControllerABI}__ and `functionName` set to `"currentFundingCycleOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFFdD70C318915879d5192e8a0dcbFcB0285b3C98)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x7Cb86D43B665196BC719b6974D320bf674AFb395)
 */
export function useJbControllerCurrentFundingCycleOf<
  TFunctionName extends 'currentFundingCycleOf',
  TSelectData = ReadContractResult<typeof jbControllerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof jbControllerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbControllerAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbControllerABI,
    address: jbControllerAddress[chainId as keyof typeof jbControllerAddress],
    functionName: 'currentFundingCycleOf',
    ...config,
  } as UseContractReadConfig<
    typeof jbControllerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbControllerABI}__ and `functionName` set to `"directory"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFFdD70C318915879d5192e8a0dcbFcB0285b3C98)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x7Cb86D43B665196BC719b6974D320bf674AFb395)
 */
export function useJbControllerDirectory<
  TFunctionName extends 'directory',
  TSelectData = ReadContractResult<typeof jbControllerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof jbControllerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbControllerAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbControllerABI,
    address: jbControllerAddress[chainId as keyof typeof jbControllerAddress],
    functionName: 'directory',
    ...config,
  } as UseContractReadConfig<
    typeof jbControllerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbControllerABI}__ and `functionName` set to `"distributionLimitOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFFdD70C318915879d5192e8a0dcbFcB0285b3C98)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x7Cb86D43B665196BC719b6974D320bf674AFb395)
 */
export function useJbControllerDistributionLimitOf<
  TFunctionName extends 'distributionLimitOf',
  TSelectData = ReadContractResult<typeof jbControllerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof jbControllerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbControllerAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbControllerABI,
    address: jbControllerAddress[chainId as keyof typeof jbControllerAddress],
    functionName: 'distributionLimitOf',
    ...config,
  } as UseContractReadConfig<
    typeof jbControllerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbControllerABI}__ and `functionName` set to `"fundingCycleStore"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFFdD70C318915879d5192e8a0dcbFcB0285b3C98)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x7Cb86D43B665196BC719b6974D320bf674AFb395)
 */
export function useJbControllerFundingCycleStore<
  TFunctionName extends 'fundingCycleStore',
  TSelectData = ReadContractResult<typeof jbControllerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof jbControllerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbControllerAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbControllerABI,
    address: jbControllerAddress[chainId as keyof typeof jbControllerAddress],
    functionName: 'fundingCycleStore',
    ...config,
  } as UseContractReadConfig<
    typeof jbControllerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbControllerABI}__ and `functionName` set to `"getFundingCycleOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFFdD70C318915879d5192e8a0dcbFcB0285b3C98)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x7Cb86D43B665196BC719b6974D320bf674AFb395)
 */
export function useJbControllerGetFundingCycleOf<
  TFunctionName extends 'getFundingCycleOf',
  TSelectData = ReadContractResult<typeof jbControllerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof jbControllerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbControllerAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbControllerABI,
    address: jbControllerAddress[chainId as keyof typeof jbControllerAddress],
    functionName: 'getFundingCycleOf',
    ...config,
  } as UseContractReadConfig<
    typeof jbControllerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbControllerABI}__ and `functionName` set to `"latestConfiguredFundingCycleOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFFdD70C318915879d5192e8a0dcbFcB0285b3C98)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x7Cb86D43B665196BC719b6974D320bf674AFb395)
 */
export function useJbControllerLatestConfiguredFundingCycleOf<
  TFunctionName extends 'latestConfiguredFundingCycleOf',
  TSelectData = ReadContractResult<typeof jbControllerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof jbControllerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbControllerAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbControllerABI,
    address: jbControllerAddress[chainId as keyof typeof jbControllerAddress],
    functionName: 'latestConfiguredFundingCycleOf',
    ...config,
  } as UseContractReadConfig<
    typeof jbControllerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbControllerABI}__ and `functionName` set to `"operatorStore"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFFdD70C318915879d5192e8a0dcbFcB0285b3C98)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x7Cb86D43B665196BC719b6974D320bf674AFb395)
 */
export function useJbControllerOperatorStore<
  TFunctionName extends 'operatorStore',
  TSelectData = ReadContractResult<typeof jbControllerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof jbControllerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbControllerAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbControllerABI,
    address: jbControllerAddress[chainId as keyof typeof jbControllerAddress],
    functionName: 'operatorStore',
    ...config,
  } as UseContractReadConfig<
    typeof jbControllerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbControllerABI}__ and `functionName` set to `"overflowAllowanceOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFFdD70C318915879d5192e8a0dcbFcB0285b3C98)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x7Cb86D43B665196BC719b6974D320bf674AFb395)
 */
export function useJbControllerOverflowAllowanceOf<
  TFunctionName extends 'overflowAllowanceOf',
  TSelectData = ReadContractResult<typeof jbControllerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof jbControllerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbControllerAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbControllerABI,
    address: jbControllerAddress[chainId as keyof typeof jbControllerAddress],
    functionName: 'overflowAllowanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof jbControllerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbControllerABI}__ and `functionName` set to `"projects"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFFdD70C318915879d5192e8a0dcbFcB0285b3C98)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x7Cb86D43B665196BC719b6974D320bf674AFb395)
 */
export function useJbControllerProjects<
  TFunctionName extends 'projects',
  TSelectData = ReadContractResult<typeof jbControllerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof jbControllerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbControllerAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbControllerABI,
    address: jbControllerAddress[chainId as keyof typeof jbControllerAddress],
    functionName: 'projects',
    ...config,
  } as UseContractReadConfig<
    typeof jbControllerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbControllerABI}__ and `functionName` set to `"queuedFundingCycleOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFFdD70C318915879d5192e8a0dcbFcB0285b3C98)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x7Cb86D43B665196BC719b6974D320bf674AFb395)
 */
export function useJbControllerQueuedFundingCycleOf<
  TFunctionName extends 'queuedFundingCycleOf',
  TSelectData = ReadContractResult<typeof jbControllerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof jbControllerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbControllerAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbControllerABI,
    address: jbControllerAddress[chainId as keyof typeof jbControllerAddress],
    functionName: 'queuedFundingCycleOf',
    ...config,
  } as UseContractReadConfig<
    typeof jbControllerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbControllerABI}__ and `functionName` set to `"reservedTokenBalanceOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFFdD70C318915879d5192e8a0dcbFcB0285b3C98)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x7Cb86D43B665196BC719b6974D320bf674AFb395)
 */
export function useJbControllerReservedTokenBalanceOf<
  TFunctionName extends 'reservedTokenBalanceOf',
  TSelectData = ReadContractResult<typeof jbControllerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof jbControllerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbControllerAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbControllerABI,
    address: jbControllerAddress[chainId as keyof typeof jbControllerAddress],
    functionName: 'reservedTokenBalanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof jbControllerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbControllerABI}__ and `functionName` set to `"splitsStore"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFFdD70C318915879d5192e8a0dcbFcB0285b3C98)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x7Cb86D43B665196BC719b6974D320bf674AFb395)
 */
export function useJbControllerSplitsStore<
  TFunctionName extends 'splitsStore',
  TSelectData = ReadContractResult<typeof jbControllerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof jbControllerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbControllerAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbControllerABI,
    address: jbControllerAddress[chainId as keyof typeof jbControllerAddress],
    functionName: 'splitsStore',
    ...config,
  } as UseContractReadConfig<
    typeof jbControllerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbControllerABI}__ and `functionName` set to `"supportsInterface"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFFdD70C318915879d5192e8a0dcbFcB0285b3C98)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x7Cb86D43B665196BC719b6974D320bf674AFb395)
 */
export function useJbControllerSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof jbControllerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof jbControllerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbControllerAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbControllerABI,
    address: jbControllerAddress[chainId as keyof typeof jbControllerAddress],
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof jbControllerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbControllerABI}__ and `functionName` set to `"tokenStore"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFFdD70C318915879d5192e8a0dcbFcB0285b3C98)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x7Cb86D43B665196BC719b6974D320bf674AFb395)
 */
export function useJbControllerTokenStore<
  TFunctionName extends 'tokenStore',
  TSelectData = ReadContractResult<typeof jbControllerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof jbControllerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbControllerAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbControllerABI,
    address: jbControllerAddress[chainId as keyof typeof jbControllerAddress],
    functionName: 'tokenStore',
    ...config,
  } as UseContractReadConfig<
    typeof jbControllerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbControllerABI}__ and `functionName` set to `"totalOutstandingTokensOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFFdD70C318915879d5192e8a0dcbFcB0285b3C98)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x7Cb86D43B665196BC719b6974D320bf674AFb395)
 */
export function useJbControllerTotalOutstandingTokensOf<
  TFunctionName extends 'totalOutstandingTokensOf',
  TSelectData = ReadContractResult<typeof jbControllerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof jbControllerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbControllerAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbControllerABI,
    address: jbControllerAddress[chainId as keyof typeof jbControllerAddress],
    functionName: 'totalOutstandingTokensOf',
    ...config,
  } as UseContractReadConfig<
    typeof jbControllerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbControllerABI}__.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFFdD70C318915879d5192e8a0dcbFcB0285b3C98)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x7Cb86D43B665196BC719b6974D320bf674AFb395)
 */
export function useJbControllerWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbControllerAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbControllerABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      > & { address?: Address; chainId?: TChainId }
    : UseContractWriteConfig<typeof jbControllerABI, TFunctionName, TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof jbControllerABI, TFunctionName, TMode>({
    abi: jbControllerABI,
    address: jbControllerAddress[chainId as keyof typeof jbControllerAddress],
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbControllerABI}__ and `functionName` set to `"burnTokensOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFFdD70C318915879d5192e8a0dcbFcB0285b3C98)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x7Cb86D43B665196BC719b6974D320bf674AFb395)
 */
export function useJbControllerBurnTokensOf<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbControllerAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbControllerABI,
          'burnTokensOf'
        >['request']['abi'],
        'burnTokensOf',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'burnTokensOf'
      }
    : UseContractWriteConfig<typeof jbControllerABI, 'burnTokensOf', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'burnTokensOf'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof jbControllerABI, 'burnTokensOf', TMode>({
    abi: jbControllerABI,
    address: jbControllerAddress[chainId as keyof typeof jbControllerAddress],
    functionName: 'burnTokensOf',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbControllerABI}__ and `functionName` set to `"distributeReservedTokensOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFFdD70C318915879d5192e8a0dcbFcB0285b3C98)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x7Cb86D43B665196BC719b6974D320bf674AFb395)
 */
export function useJbControllerDistributeReservedTokensOf<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbControllerAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbControllerABI,
          'distributeReservedTokensOf'
        >['request']['abi'],
        'distributeReservedTokensOf',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'distributeReservedTokensOf'
      }
    : UseContractWriteConfig<
        typeof jbControllerABI,
        'distributeReservedTokensOf',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'distributeReservedTokensOf'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof jbControllerABI,
    'distributeReservedTokensOf',
    TMode
  >({
    abi: jbControllerABI,
    address: jbControllerAddress[chainId as keyof typeof jbControllerAddress],
    functionName: 'distributeReservedTokensOf',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbControllerABI}__ and `functionName` set to `"launchFundingCyclesFor"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFFdD70C318915879d5192e8a0dcbFcB0285b3C98)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x7Cb86D43B665196BC719b6974D320bf674AFb395)
 */
export function useJbControllerLaunchFundingCyclesFor<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbControllerAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbControllerABI,
          'launchFundingCyclesFor'
        >['request']['abi'],
        'launchFundingCyclesFor',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'launchFundingCyclesFor'
      }
    : UseContractWriteConfig<
        typeof jbControllerABI,
        'launchFundingCyclesFor',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'launchFundingCyclesFor'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof jbControllerABI,
    'launchFundingCyclesFor',
    TMode
  >({
    abi: jbControllerABI,
    address: jbControllerAddress[chainId as keyof typeof jbControllerAddress],
    functionName: 'launchFundingCyclesFor',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbControllerABI}__ and `functionName` set to `"launchProjectFor"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFFdD70C318915879d5192e8a0dcbFcB0285b3C98)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x7Cb86D43B665196BC719b6974D320bf674AFb395)
 */
export function useJbControllerLaunchProjectFor<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbControllerAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbControllerABI,
          'launchProjectFor'
        >['request']['abi'],
        'launchProjectFor',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'launchProjectFor'
      }
    : UseContractWriteConfig<
        typeof jbControllerABI,
        'launchProjectFor',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'launchProjectFor'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof jbControllerABI, 'launchProjectFor', TMode>({
    abi: jbControllerABI,
    address: jbControllerAddress[chainId as keyof typeof jbControllerAddress],
    functionName: 'launchProjectFor',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbControllerABI}__ and `functionName` set to `"migrate"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFFdD70C318915879d5192e8a0dcbFcB0285b3C98)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x7Cb86D43B665196BC719b6974D320bf674AFb395)
 */
export function useJbControllerMigrate<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbControllerAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbControllerABI,
          'migrate'
        >['request']['abi'],
        'migrate',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'migrate' }
    : UseContractWriteConfig<typeof jbControllerABI, 'migrate', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'migrate'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof jbControllerABI, 'migrate', TMode>({
    abi: jbControllerABI,
    address: jbControllerAddress[chainId as keyof typeof jbControllerAddress],
    functionName: 'migrate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbControllerABI}__ and `functionName` set to `"mintTokensOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFFdD70C318915879d5192e8a0dcbFcB0285b3C98)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x7Cb86D43B665196BC719b6974D320bf674AFb395)
 */
export function useJbControllerMintTokensOf<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbControllerAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbControllerABI,
          'mintTokensOf'
        >['request']['abi'],
        'mintTokensOf',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'mintTokensOf'
      }
    : UseContractWriteConfig<typeof jbControllerABI, 'mintTokensOf', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'mintTokensOf'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof jbControllerABI, 'mintTokensOf', TMode>({
    abi: jbControllerABI,
    address: jbControllerAddress[chainId as keyof typeof jbControllerAddress],
    functionName: 'mintTokensOf',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbControllerABI}__ and `functionName` set to `"prepForMigrationOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFFdD70C318915879d5192e8a0dcbFcB0285b3C98)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x7Cb86D43B665196BC719b6974D320bf674AFb395)
 */
export function useJbControllerPrepForMigrationOf<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbControllerAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbControllerABI,
          'prepForMigrationOf'
        >['request']['abi'],
        'prepForMigrationOf',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'prepForMigrationOf'
      }
    : UseContractWriteConfig<
        typeof jbControllerABI,
        'prepForMigrationOf',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'prepForMigrationOf'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof jbControllerABI, 'prepForMigrationOf', TMode>({
    abi: jbControllerABI,
    address: jbControllerAddress[chainId as keyof typeof jbControllerAddress],
    functionName: 'prepForMigrationOf',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbControllerABI}__ and `functionName` set to `"reconfigureFundingCyclesOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFFdD70C318915879d5192e8a0dcbFcB0285b3C98)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x7Cb86D43B665196BC719b6974D320bf674AFb395)
 */
export function useJbControllerReconfigureFundingCyclesOf<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbControllerAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbControllerABI,
          'reconfigureFundingCyclesOf'
        >['request']['abi'],
        'reconfigureFundingCyclesOf',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'reconfigureFundingCyclesOf'
      }
    : UseContractWriteConfig<
        typeof jbControllerABI,
        'reconfigureFundingCyclesOf',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'reconfigureFundingCyclesOf'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof jbControllerABI,
    'reconfigureFundingCyclesOf',
    TMode
  >({
    abi: jbControllerABI,
    address: jbControllerAddress[chainId as keyof typeof jbControllerAddress],
    functionName: 'reconfigureFundingCyclesOf',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbControllerABI}__.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFFdD70C318915879d5192e8a0dcbFcB0285b3C98)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x7Cb86D43B665196BC719b6974D320bf674AFb395)
 */
export function usePrepareJbControllerWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof jbControllerABI, TFunctionName>,
    'abi'
  > & { chainId?: keyof typeof jbControllerAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbControllerABI,
    address: jbControllerAddress[chainId as keyof typeof jbControllerAddress],
    ...config,
  } as UsePrepareContractWriteConfig<typeof jbControllerABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbControllerABI}__ and `functionName` set to `"burnTokensOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFFdD70C318915879d5192e8a0dcbFcB0285b3C98)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x7Cb86D43B665196BC719b6974D320bf674AFb395)
 */
export function usePrepareJbControllerBurnTokensOf(
  config: Omit<
    UsePrepareContractWriteConfig<typeof jbControllerABI, 'burnTokensOf'>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbControllerAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbControllerABI,
    address: jbControllerAddress[chainId as keyof typeof jbControllerAddress],
    functionName: 'burnTokensOf',
    ...config,
  } as UsePrepareContractWriteConfig<typeof jbControllerABI, 'burnTokensOf'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbControllerABI}__ and `functionName` set to `"distributeReservedTokensOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFFdD70C318915879d5192e8a0dcbFcB0285b3C98)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x7Cb86D43B665196BC719b6974D320bf674AFb395)
 */
export function usePrepareJbControllerDistributeReservedTokensOf(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof jbControllerABI,
      'distributeReservedTokensOf'
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbControllerAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbControllerABI,
    address: jbControllerAddress[chainId as keyof typeof jbControllerAddress],
    functionName: 'distributeReservedTokensOf',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof jbControllerABI,
    'distributeReservedTokensOf'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbControllerABI}__ and `functionName` set to `"launchFundingCyclesFor"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFFdD70C318915879d5192e8a0dcbFcB0285b3C98)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x7Cb86D43B665196BC719b6974D320bf674AFb395)
 */
export function usePrepareJbControllerLaunchFundingCyclesFor(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof jbControllerABI,
      'launchFundingCyclesFor'
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbControllerAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbControllerABI,
    address: jbControllerAddress[chainId as keyof typeof jbControllerAddress],
    functionName: 'launchFundingCyclesFor',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof jbControllerABI,
    'launchFundingCyclesFor'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbControllerABI}__ and `functionName` set to `"launchProjectFor"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFFdD70C318915879d5192e8a0dcbFcB0285b3C98)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x7Cb86D43B665196BC719b6974D320bf674AFb395)
 */
export function usePrepareJbControllerLaunchProjectFor(
  config: Omit<
    UsePrepareContractWriteConfig<typeof jbControllerABI, 'launchProjectFor'>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbControllerAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbControllerABI,
    address: jbControllerAddress[chainId as keyof typeof jbControllerAddress],
    functionName: 'launchProjectFor',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof jbControllerABI,
    'launchProjectFor'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbControllerABI}__ and `functionName` set to `"migrate"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFFdD70C318915879d5192e8a0dcbFcB0285b3C98)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x7Cb86D43B665196BC719b6974D320bf674AFb395)
 */
export function usePrepareJbControllerMigrate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof jbControllerABI, 'migrate'>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbControllerAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbControllerABI,
    address: jbControllerAddress[chainId as keyof typeof jbControllerAddress],
    functionName: 'migrate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof jbControllerABI, 'migrate'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbControllerABI}__ and `functionName` set to `"mintTokensOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFFdD70C318915879d5192e8a0dcbFcB0285b3C98)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x7Cb86D43B665196BC719b6974D320bf674AFb395)
 */
export function usePrepareJbControllerMintTokensOf(
  config: Omit<
    UsePrepareContractWriteConfig<typeof jbControllerABI, 'mintTokensOf'>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbControllerAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbControllerABI,
    address: jbControllerAddress[chainId as keyof typeof jbControllerAddress],
    functionName: 'mintTokensOf',
    ...config,
  } as UsePrepareContractWriteConfig<typeof jbControllerABI, 'mintTokensOf'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbControllerABI}__ and `functionName` set to `"prepForMigrationOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFFdD70C318915879d5192e8a0dcbFcB0285b3C98)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x7Cb86D43B665196BC719b6974D320bf674AFb395)
 */
export function usePrepareJbControllerPrepForMigrationOf(
  config: Omit<
    UsePrepareContractWriteConfig<typeof jbControllerABI, 'prepForMigrationOf'>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbControllerAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbControllerABI,
    address: jbControllerAddress[chainId as keyof typeof jbControllerAddress],
    functionName: 'prepForMigrationOf',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof jbControllerABI,
    'prepForMigrationOf'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbControllerABI}__ and `functionName` set to `"reconfigureFundingCyclesOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFFdD70C318915879d5192e8a0dcbFcB0285b3C98)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x7Cb86D43B665196BC719b6974D320bf674AFb395)
 */
export function usePrepareJbControllerReconfigureFundingCyclesOf(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof jbControllerABI,
      'reconfigureFundingCyclesOf'
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbControllerAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbControllerABI,
    address: jbControllerAddress[chainId as keyof typeof jbControllerAddress],
    functionName: 'reconfigureFundingCyclesOf',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof jbControllerABI,
    'reconfigureFundingCyclesOf'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbControllerABI}__.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFFdD70C318915879d5192e8a0dcbFcB0285b3C98)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x7Cb86D43B665196BC719b6974D320bf674AFb395)
 */
export function useJbControllerEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof jbControllerABI, TEventName>,
    'abi'
  > & { chainId?: keyof typeof jbControllerAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbControllerABI,
    address: jbControllerAddress[chainId as keyof typeof jbControllerAddress],
    ...config,
  } as UseContractEventConfig<typeof jbControllerABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbControllerABI}__ and `eventName` set to `"BurnTokens"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFFdD70C318915879d5192e8a0dcbFcB0285b3C98)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x7Cb86D43B665196BC719b6974D320bf674AFb395)
 */
export function useJbControllerBurnTokensEvent(
  config: Omit<
    UseContractEventConfig<typeof jbControllerABI, 'BurnTokens'>,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbControllerAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbControllerABI,
    address: jbControllerAddress[chainId as keyof typeof jbControllerAddress],
    eventName: 'BurnTokens',
    ...config,
  } as UseContractEventConfig<typeof jbControllerABI, 'BurnTokens'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbControllerABI}__ and `eventName` set to `"DistributeReservedTokens"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFFdD70C318915879d5192e8a0dcbFcB0285b3C98)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x7Cb86D43B665196BC719b6974D320bf674AFb395)
 */
export function useJbControllerDistributeReservedTokensEvent(
  config: Omit<
    UseContractEventConfig<typeof jbControllerABI, 'DistributeReservedTokens'>,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbControllerAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbControllerABI,
    address: jbControllerAddress[chainId as keyof typeof jbControllerAddress],
    eventName: 'DistributeReservedTokens',
    ...config,
  } as UseContractEventConfig<
    typeof jbControllerABI,
    'DistributeReservedTokens'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbControllerABI}__ and `eventName` set to `"DistributeToReservedTokenSplit"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFFdD70C318915879d5192e8a0dcbFcB0285b3C98)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x7Cb86D43B665196BC719b6974D320bf674AFb395)
 */
export function useJbControllerDistributeToReservedTokenSplitEvent(
  config: Omit<
    UseContractEventConfig<
      typeof jbControllerABI,
      'DistributeToReservedTokenSplit'
    >,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbControllerAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbControllerABI,
    address: jbControllerAddress[chainId as keyof typeof jbControllerAddress],
    eventName: 'DistributeToReservedTokenSplit',
    ...config,
  } as UseContractEventConfig<
    typeof jbControllerABI,
    'DistributeToReservedTokenSplit'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbControllerABI}__ and `eventName` set to `"LaunchFundingCycles"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFFdD70C318915879d5192e8a0dcbFcB0285b3C98)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x7Cb86D43B665196BC719b6974D320bf674AFb395)
 */
export function useJbControllerLaunchFundingCyclesEvent(
  config: Omit<
    UseContractEventConfig<typeof jbControllerABI, 'LaunchFundingCycles'>,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbControllerAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbControllerABI,
    address: jbControllerAddress[chainId as keyof typeof jbControllerAddress],
    eventName: 'LaunchFundingCycles',
    ...config,
  } as UseContractEventConfig<typeof jbControllerABI, 'LaunchFundingCycles'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbControllerABI}__ and `eventName` set to `"LaunchProject"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFFdD70C318915879d5192e8a0dcbFcB0285b3C98)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x7Cb86D43B665196BC719b6974D320bf674AFb395)
 */
export function useJbControllerLaunchProjectEvent(
  config: Omit<
    UseContractEventConfig<typeof jbControllerABI, 'LaunchProject'>,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbControllerAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbControllerABI,
    address: jbControllerAddress[chainId as keyof typeof jbControllerAddress],
    eventName: 'LaunchProject',
    ...config,
  } as UseContractEventConfig<typeof jbControllerABI, 'LaunchProject'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbControllerABI}__ and `eventName` set to `"Migrate"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFFdD70C318915879d5192e8a0dcbFcB0285b3C98)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x7Cb86D43B665196BC719b6974D320bf674AFb395)
 */
export function useJbControllerMigrateEvent(
  config: Omit<
    UseContractEventConfig<typeof jbControllerABI, 'Migrate'>,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbControllerAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbControllerABI,
    address: jbControllerAddress[chainId as keyof typeof jbControllerAddress],
    eventName: 'Migrate',
    ...config,
  } as UseContractEventConfig<typeof jbControllerABI, 'Migrate'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbControllerABI}__ and `eventName` set to `"MintTokens"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFFdD70C318915879d5192e8a0dcbFcB0285b3C98)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x7Cb86D43B665196BC719b6974D320bf674AFb395)
 */
export function useJbControllerMintTokensEvent(
  config: Omit<
    UseContractEventConfig<typeof jbControllerABI, 'MintTokens'>,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbControllerAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbControllerABI,
    address: jbControllerAddress[chainId as keyof typeof jbControllerAddress],
    eventName: 'MintTokens',
    ...config,
  } as UseContractEventConfig<typeof jbControllerABI, 'MintTokens'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbControllerABI}__ and `eventName` set to `"PrepMigration"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFFdD70C318915879d5192e8a0dcbFcB0285b3C98)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x7Cb86D43B665196BC719b6974D320bf674AFb395)
 */
export function useJbControllerPrepMigrationEvent(
  config: Omit<
    UseContractEventConfig<typeof jbControllerABI, 'PrepMigration'>,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbControllerAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbControllerABI,
    address: jbControllerAddress[chainId as keyof typeof jbControllerAddress],
    eventName: 'PrepMigration',
    ...config,
  } as UseContractEventConfig<typeof jbControllerABI, 'PrepMigration'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbControllerABI}__ and `eventName` set to `"ReconfigureFundingCycles"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFFdD70C318915879d5192e8a0dcbFcB0285b3C98)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x7Cb86D43B665196BC719b6974D320bf674AFb395)
 */
export function useJbControllerReconfigureFundingCyclesEvent(
  config: Omit<
    UseContractEventConfig<typeof jbControllerABI, 'ReconfigureFundingCycles'>,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbControllerAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbControllerABI,
    address: jbControllerAddress[chainId as keyof typeof jbControllerAddress],
    eventName: 'ReconfigureFundingCycles',
    ...config,
  } as UseContractEventConfig<
    typeof jbControllerABI,
    'ReconfigureFundingCycles'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbControllerABI}__ and `eventName` set to `"SetFundAccessConstraints"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFFdD70C318915879d5192e8a0dcbFcB0285b3C98)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x7Cb86D43B665196BC719b6974D320bf674AFb395)
 */
export function useJbControllerSetFundAccessConstraintsEvent(
  config: Omit<
    UseContractEventConfig<typeof jbControllerABI, 'SetFundAccessConstraints'>,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbControllerAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbControllerABI,
    address: jbControllerAddress[chainId as keyof typeof jbControllerAddress],
    eventName: 'SetFundAccessConstraints',
    ...config,
  } as UseContractEventConfig<
    typeof jbControllerABI,
    'SetFundAccessConstraints'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbController3_1ABI}__.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x97a5b9D9F0F7cD676B69f584F29048D0Ef4BB59b)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1d260DE91233e650F136Bf35f8A4ea1F2b68aDB6)
 */
export function useJbController3_1Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof jbController3_1ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbController3_1ABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > & { chainId?: keyof typeof jbController3_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbController3_1ABI,
    address:
      jbController3_1Address[chainId as keyof typeof jbController3_1Address],
    ...config,
  } as UseContractReadConfig<
    typeof jbController3_1ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbController3_1ABI}__ and `functionName` set to `"currentFundingCycleOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x97a5b9D9F0F7cD676B69f584F29048D0Ef4BB59b)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1d260DE91233e650F136Bf35f8A4ea1F2b68aDB6)
 */
export function useJbController3_1CurrentFundingCycleOf<
  TFunctionName extends 'currentFundingCycleOf',
  TSelectData = ReadContractResult<typeof jbController3_1ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbController3_1ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbController3_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbController3_1ABI,
    address:
      jbController3_1Address[chainId as keyof typeof jbController3_1Address],
    functionName: 'currentFundingCycleOf',
    ...config,
  } as UseContractReadConfig<
    typeof jbController3_1ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbController3_1ABI}__ and `functionName` set to `"directory"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x97a5b9D9F0F7cD676B69f584F29048D0Ef4BB59b)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1d260DE91233e650F136Bf35f8A4ea1F2b68aDB6)
 */
export function useJbController3_1Directory<
  TFunctionName extends 'directory',
  TSelectData = ReadContractResult<typeof jbController3_1ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbController3_1ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbController3_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbController3_1ABI,
    address:
      jbController3_1Address[chainId as keyof typeof jbController3_1Address],
    functionName: 'directory',
    ...config,
  } as UseContractReadConfig<
    typeof jbController3_1ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbController3_1ABI}__ and `functionName` set to `"fundAccessConstraintsStore"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x97a5b9D9F0F7cD676B69f584F29048D0Ef4BB59b)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1d260DE91233e650F136Bf35f8A4ea1F2b68aDB6)
 */
export function useJbController3_1FundAccessConstraintsStore<
  TFunctionName extends 'fundAccessConstraintsStore',
  TSelectData = ReadContractResult<typeof jbController3_1ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbController3_1ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbController3_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbController3_1ABI,
    address:
      jbController3_1Address[chainId as keyof typeof jbController3_1Address],
    functionName: 'fundAccessConstraintsStore',
    ...config,
  } as UseContractReadConfig<
    typeof jbController3_1ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbController3_1ABI}__ and `functionName` set to `"fundingCycleStore"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x97a5b9D9F0F7cD676B69f584F29048D0Ef4BB59b)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1d260DE91233e650F136Bf35f8A4ea1F2b68aDB6)
 */
export function useJbController3_1FundingCycleStore<
  TFunctionName extends 'fundingCycleStore',
  TSelectData = ReadContractResult<typeof jbController3_1ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbController3_1ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbController3_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbController3_1ABI,
    address:
      jbController3_1Address[chainId as keyof typeof jbController3_1Address],
    functionName: 'fundingCycleStore',
    ...config,
  } as UseContractReadConfig<
    typeof jbController3_1ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbController3_1ABI}__ and `functionName` set to `"getFundingCycleOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x97a5b9D9F0F7cD676B69f584F29048D0Ef4BB59b)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1d260DE91233e650F136Bf35f8A4ea1F2b68aDB6)
 */
export function useJbController3_1GetFundingCycleOf<
  TFunctionName extends 'getFundingCycleOf',
  TSelectData = ReadContractResult<typeof jbController3_1ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbController3_1ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbController3_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbController3_1ABI,
    address:
      jbController3_1Address[chainId as keyof typeof jbController3_1Address],
    functionName: 'getFundingCycleOf',
    ...config,
  } as UseContractReadConfig<
    typeof jbController3_1ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbController3_1ABI}__ and `functionName` set to `"latestConfiguredFundingCycleOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x97a5b9D9F0F7cD676B69f584F29048D0Ef4BB59b)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1d260DE91233e650F136Bf35f8A4ea1F2b68aDB6)
 */
export function useJbController3_1LatestConfiguredFundingCycleOf<
  TFunctionName extends 'latestConfiguredFundingCycleOf',
  TSelectData = ReadContractResult<typeof jbController3_1ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbController3_1ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbController3_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbController3_1ABI,
    address:
      jbController3_1Address[chainId as keyof typeof jbController3_1Address],
    functionName: 'latestConfiguredFundingCycleOf',
    ...config,
  } as UseContractReadConfig<
    typeof jbController3_1ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbController3_1ABI}__ and `functionName` set to `"operatorStore"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x97a5b9D9F0F7cD676B69f584F29048D0Ef4BB59b)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1d260DE91233e650F136Bf35f8A4ea1F2b68aDB6)
 */
export function useJbController3_1OperatorStore<
  TFunctionName extends 'operatorStore',
  TSelectData = ReadContractResult<typeof jbController3_1ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbController3_1ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbController3_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbController3_1ABI,
    address:
      jbController3_1Address[chainId as keyof typeof jbController3_1Address],
    functionName: 'operatorStore',
    ...config,
  } as UseContractReadConfig<
    typeof jbController3_1ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbController3_1ABI}__ and `functionName` set to `"projects"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x97a5b9D9F0F7cD676B69f584F29048D0Ef4BB59b)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1d260DE91233e650F136Bf35f8A4ea1F2b68aDB6)
 */
export function useJbController3_1Projects<
  TFunctionName extends 'projects',
  TSelectData = ReadContractResult<typeof jbController3_1ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbController3_1ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbController3_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbController3_1ABI,
    address:
      jbController3_1Address[chainId as keyof typeof jbController3_1Address],
    functionName: 'projects',
    ...config,
  } as UseContractReadConfig<
    typeof jbController3_1ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbController3_1ABI}__ and `functionName` set to `"queuedFundingCycleOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x97a5b9D9F0F7cD676B69f584F29048D0Ef4BB59b)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1d260DE91233e650F136Bf35f8A4ea1F2b68aDB6)
 */
export function useJbController3_1QueuedFundingCycleOf<
  TFunctionName extends 'queuedFundingCycleOf',
  TSelectData = ReadContractResult<typeof jbController3_1ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbController3_1ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbController3_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbController3_1ABI,
    address:
      jbController3_1Address[chainId as keyof typeof jbController3_1Address],
    functionName: 'queuedFundingCycleOf',
    ...config,
  } as UseContractReadConfig<
    typeof jbController3_1ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbController3_1ABI}__ and `functionName` set to `"reservedTokenBalanceOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x97a5b9D9F0F7cD676B69f584F29048D0Ef4BB59b)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1d260DE91233e650F136Bf35f8A4ea1F2b68aDB6)
 */
export function useJbController3_1ReservedTokenBalanceOf<
  TFunctionName extends 'reservedTokenBalanceOf',
  TSelectData = ReadContractResult<typeof jbController3_1ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbController3_1ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbController3_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbController3_1ABI,
    address:
      jbController3_1Address[chainId as keyof typeof jbController3_1Address],
    functionName: 'reservedTokenBalanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof jbController3_1ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbController3_1ABI}__ and `functionName` set to `"splitsStore"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x97a5b9D9F0F7cD676B69f584F29048D0Ef4BB59b)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1d260DE91233e650F136Bf35f8A4ea1F2b68aDB6)
 */
export function useJbController3_1SplitsStore<
  TFunctionName extends 'splitsStore',
  TSelectData = ReadContractResult<typeof jbController3_1ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbController3_1ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbController3_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbController3_1ABI,
    address:
      jbController3_1Address[chainId as keyof typeof jbController3_1Address],
    functionName: 'splitsStore',
    ...config,
  } as UseContractReadConfig<
    typeof jbController3_1ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbController3_1ABI}__ and `functionName` set to `"supportsInterface"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x97a5b9D9F0F7cD676B69f584F29048D0Ef4BB59b)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1d260DE91233e650F136Bf35f8A4ea1F2b68aDB6)
 */
export function useJbController3_1SupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof jbController3_1ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbController3_1ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbController3_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbController3_1ABI,
    address:
      jbController3_1Address[chainId as keyof typeof jbController3_1Address],
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof jbController3_1ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbController3_1ABI}__ and `functionName` set to `"tokenStore"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x97a5b9D9F0F7cD676B69f584F29048D0Ef4BB59b)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1d260DE91233e650F136Bf35f8A4ea1F2b68aDB6)
 */
export function useJbController3_1TokenStore<
  TFunctionName extends 'tokenStore',
  TSelectData = ReadContractResult<typeof jbController3_1ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbController3_1ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbController3_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbController3_1ABI,
    address:
      jbController3_1Address[chainId as keyof typeof jbController3_1Address],
    functionName: 'tokenStore',
    ...config,
  } as UseContractReadConfig<
    typeof jbController3_1ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbController3_1ABI}__ and `functionName` set to `"totalOutstandingTokensOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x97a5b9D9F0F7cD676B69f584F29048D0Ef4BB59b)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1d260DE91233e650F136Bf35f8A4ea1F2b68aDB6)
 */
export function useJbController3_1TotalOutstandingTokensOf<
  TFunctionName extends 'totalOutstandingTokensOf',
  TSelectData = ReadContractResult<typeof jbController3_1ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbController3_1ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbController3_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbController3_1ABI,
    address:
      jbController3_1Address[chainId as keyof typeof jbController3_1Address],
    functionName: 'totalOutstandingTokensOf',
    ...config,
  } as UseContractReadConfig<
    typeof jbController3_1ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbController3_1ABI}__.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x97a5b9D9F0F7cD676B69f584F29048D0Ef4BB59b)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1d260DE91233e650F136Bf35f8A4ea1F2b68aDB6)
 */
export function useJbController3_1Write<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbController3_1Address,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbController3_1ABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      > & { address?: Address; chainId?: TChainId }
    : UseContractWriteConfig<
        typeof jbController3_1ABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof jbController3_1ABI, TFunctionName, TMode>({
    abi: jbController3_1ABI,
    address:
      jbController3_1Address[chainId as keyof typeof jbController3_1Address],
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbController3_1ABI}__ and `functionName` set to `"burnTokensOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x97a5b9D9F0F7cD676B69f584F29048D0Ef4BB59b)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1d260DE91233e650F136Bf35f8A4ea1F2b68aDB6)
 */
export function useJbController3_1BurnTokensOf<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbController3_1Address,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbController3_1ABI,
          'burnTokensOf'
        >['request']['abi'],
        'burnTokensOf',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'burnTokensOf'
      }
    : UseContractWriteConfig<
        typeof jbController3_1ABI,
        'burnTokensOf',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'burnTokensOf'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof jbController3_1ABI, 'burnTokensOf', TMode>({
    abi: jbController3_1ABI,
    address:
      jbController3_1Address[chainId as keyof typeof jbController3_1Address],
    functionName: 'burnTokensOf',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbController3_1ABI}__ and `functionName` set to `"distributeReservedTokensOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x97a5b9D9F0F7cD676B69f584F29048D0Ef4BB59b)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1d260DE91233e650F136Bf35f8A4ea1F2b68aDB6)
 */
export function useJbController3_1DistributeReservedTokensOf<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbController3_1Address,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbController3_1ABI,
          'distributeReservedTokensOf'
        >['request']['abi'],
        'distributeReservedTokensOf',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'distributeReservedTokensOf'
      }
    : UseContractWriteConfig<
        typeof jbController3_1ABI,
        'distributeReservedTokensOf',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'distributeReservedTokensOf'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof jbController3_1ABI,
    'distributeReservedTokensOf',
    TMode
  >({
    abi: jbController3_1ABI,
    address:
      jbController3_1Address[chainId as keyof typeof jbController3_1Address],
    functionName: 'distributeReservedTokensOf',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbController3_1ABI}__ and `functionName` set to `"launchFundingCyclesFor"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x97a5b9D9F0F7cD676B69f584F29048D0Ef4BB59b)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1d260DE91233e650F136Bf35f8A4ea1F2b68aDB6)
 */
export function useJbController3_1LaunchFundingCyclesFor<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbController3_1Address,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbController3_1ABI,
          'launchFundingCyclesFor'
        >['request']['abi'],
        'launchFundingCyclesFor',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'launchFundingCyclesFor'
      }
    : UseContractWriteConfig<
        typeof jbController3_1ABI,
        'launchFundingCyclesFor',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'launchFundingCyclesFor'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof jbController3_1ABI,
    'launchFundingCyclesFor',
    TMode
  >({
    abi: jbController3_1ABI,
    address:
      jbController3_1Address[chainId as keyof typeof jbController3_1Address],
    functionName: 'launchFundingCyclesFor',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbController3_1ABI}__ and `functionName` set to `"launchProjectFor"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x97a5b9D9F0F7cD676B69f584F29048D0Ef4BB59b)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1d260DE91233e650F136Bf35f8A4ea1F2b68aDB6)
 */
export function useJbController3_1LaunchProjectFor<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbController3_1Address,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbController3_1ABI,
          'launchProjectFor'
        >['request']['abi'],
        'launchProjectFor',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'launchProjectFor'
      }
    : UseContractWriteConfig<
        typeof jbController3_1ABI,
        'launchProjectFor',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'launchProjectFor'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof jbController3_1ABI, 'launchProjectFor', TMode>(
    {
      abi: jbController3_1ABI,
      address:
        jbController3_1Address[chainId as keyof typeof jbController3_1Address],
      functionName: 'launchProjectFor',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbController3_1ABI}__ and `functionName` set to `"migrate"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x97a5b9D9F0F7cD676B69f584F29048D0Ef4BB59b)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1d260DE91233e650F136Bf35f8A4ea1F2b68aDB6)
 */
export function useJbController3_1Migrate<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbController3_1Address,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbController3_1ABI,
          'migrate'
        >['request']['abi'],
        'migrate',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'migrate' }
    : UseContractWriteConfig<typeof jbController3_1ABI, 'migrate', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'migrate'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof jbController3_1ABI, 'migrate', TMode>({
    abi: jbController3_1ABI,
    address:
      jbController3_1Address[chainId as keyof typeof jbController3_1Address],
    functionName: 'migrate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbController3_1ABI}__ and `functionName` set to `"mintTokensOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x97a5b9D9F0F7cD676B69f584F29048D0Ef4BB59b)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1d260DE91233e650F136Bf35f8A4ea1F2b68aDB6)
 */
export function useJbController3_1MintTokensOf<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbController3_1Address,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbController3_1ABI,
          'mintTokensOf'
        >['request']['abi'],
        'mintTokensOf',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'mintTokensOf'
      }
    : UseContractWriteConfig<
        typeof jbController3_1ABI,
        'mintTokensOf',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'mintTokensOf'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof jbController3_1ABI, 'mintTokensOf', TMode>({
    abi: jbController3_1ABI,
    address:
      jbController3_1Address[chainId as keyof typeof jbController3_1Address],
    functionName: 'mintTokensOf',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbController3_1ABI}__ and `functionName` set to `"prepForMigrationOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x97a5b9D9F0F7cD676B69f584F29048D0Ef4BB59b)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1d260DE91233e650F136Bf35f8A4ea1F2b68aDB6)
 */
export function useJbController3_1PrepForMigrationOf<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbController3_1Address,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbController3_1ABI,
          'prepForMigrationOf'
        >['request']['abi'],
        'prepForMigrationOf',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'prepForMigrationOf'
      }
    : UseContractWriteConfig<
        typeof jbController3_1ABI,
        'prepForMigrationOf',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'prepForMigrationOf'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof jbController3_1ABI,
    'prepForMigrationOf',
    TMode
  >({
    abi: jbController3_1ABI,
    address:
      jbController3_1Address[chainId as keyof typeof jbController3_1Address],
    functionName: 'prepForMigrationOf',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbController3_1ABI}__ and `functionName` set to `"reconfigureFundingCyclesOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x97a5b9D9F0F7cD676B69f584F29048D0Ef4BB59b)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1d260DE91233e650F136Bf35f8A4ea1F2b68aDB6)
 */
export function useJbController3_1ReconfigureFundingCyclesOf<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbController3_1Address,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbController3_1ABI,
          'reconfigureFundingCyclesOf'
        >['request']['abi'],
        'reconfigureFundingCyclesOf',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'reconfigureFundingCyclesOf'
      }
    : UseContractWriteConfig<
        typeof jbController3_1ABI,
        'reconfigureFundingCyclesOf',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'reconfigureFundingCyclesOf'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof jbController3_1ABI,
    'reconfigureFundingCyclesOf',
    TMode
  >({
    abi: jbController3_1ABI,
    address:
      jbController3_1Address[chainId as keyof typeof jbController3_1Address],
    functionName: 'reconfigureFundingCyclesOf',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbController3_1ABI}__.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x97a5b9D9F0F7cD676B69f584F29048D0Ef4BB59b)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1d260DE91233e650F136Bf35f8A4ea1F2b68aDB6)
 */
export function usePrepareJbController3_1Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof jbController3_1ABI, TFunctionName>,
    'abi'
  > & { chainId?: keyof typeof jbController3_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbController3_1ABI,
    address:
      jbController3_1Address[chainId as keyof typeof jbController3_1Address],
    ...config,
  } as UsePrepareContractWriteConfig<typeof jbController3_1ABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbController3_1ABI}__ and `functionName` set to `"burnTokensOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x97a5b9D9F0F7cD676B69f584F29048D0Ef4BB59b)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1d260DE91233e650F136Bf35f8A4ea1F2b68aDB6)
 */
export function usePrepareJbController3_1BurnTokensOf(
  config: Omit<
    UsePrepareContractWriteConfig<typeof jbController3_1ABI, 'burnTokensOf'>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbController3_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbController3_1ABI,
    address:
      jbController3_1Address[chainId as keyof typeof jbController3_1Address],
    functionName: 'burnTokensOf',
    ...config,
  } as UsePrepareContractWriteConfig<typeof jbController3_1ABI, 'burnTokensOf'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbController3_1ABI}__ and `functionName` set to `"distributeReservedTokensOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x97a5b9D9F0F7cD676B69f584F29048D0Ef4BB59b)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1d260DE91233e650F136Bf35f8A4ea1F2b68aDB6)
 */
export function usePrepareJbController3_1DistributeReservedTokensOf(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof jbController3_1ABI,
      'distributeReservedTokensOf'
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbController3_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbController3_1ABI,
    address:
      jbController3_1Address[chainId as keyof typeof jbController3_1Address],
    functionName: 'distributeReservedTokensOf',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof jbController3_1ABI,
    'distributeReservedTokensOf'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbController3_1ABI}__ and `functionName` set to `"launchFundingCyclesFor"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x97a5b9D9F0F7cD676B69f584F29048D0Ef4BB59b)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1d260DE91233e650F136Bf35f8A4ea1F2b68aDB6)
 */
export function usePrepareJbController3_1LaunchFundingCyclesFor(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof jbController3_1ABI,
      'launchFundingCyclesFor'
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbController3_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbController3_1ABI,
    address:
      jbController3_1Address[chainId as keyof typeof jbController3_1Address],
    functionName: 'launchFundingCyclesFor',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof jbController3_1ABI,
    'launchFundingCyclesFor'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbController3_1ABI}__ and `functionName` set to `"launchProjectFor"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x97a5b9D9F0F7cD676B69f584F29048D0Ef4BB59b)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1d260DE91233e650F136Bf35f8A4ea1F2b68aDB6)
 */
export function usePrepareJbController3_1LaunchProjectFor(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof jbController3_1ABI,
      'launchProjectFor'
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbController3_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbController3_1ABI,
    address:
      jbController3_1Address[chainId as keyof typeof jbController3_1Address],
    functionName: 'launchProjectFor',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof jbController3_1ABI,
    'launchProjectFor'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbController3_1ABI}__ and `functionName` set to `"migrate"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x97a5b9D9F0F7cD676B69f584F29048D0Ef4BB59b)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1d260DE91233e650F136Bf35f8A4ea1F2b68aDB6)
 */
export function usePrepareJbController3_1Migrate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof jbController3_1ABI, 'migrate'>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbController3_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbController3_1ABI,
    address:
      jbController3_1Address[chainId as keyof typeof jbController3_1Address],
    functionName: 'migrate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof jbController3_1ABI, 'migrate'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbController3_1ABI}__ and `functionName` set to `"mintTokensOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x97a5b9D9F0F7cD676B69f584F29048D0Ef4BB59b)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1d260DE91233e650F136Bf35f8A4ea1F2b68aDB6)
 */
export function usePrepareJbController3_1MintTokensOf(
  config: Omit<
    UsePrepareContractWriteConfig<typeof jbController3_1ABI, 'mintTokensOf'>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbController3_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbController3_1ABI,
    address:
      jbController3_1Address[chainId as keyof typeof jbController3_1Address],
    functionName: 'mintTokensOf',
    ...config,
  } as UsePrepareContractWriteConfig<typeof jbController3_1ABI, 'mintTokensOf'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbController3_1ABI}__ and `functionName` set to `"prepForMigrationOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x97a5b9D9F0F7cD676B69f584F29048D0Ef4BB59b)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1d260DE91233e650F136Bf35f8A4ea1F2b68aDB6)
 */
export function usePrepareJbController3_1PrepForMigrationOf(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof jbController3_1ABI,
      'prepForMigrationOf'
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbController3_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbController3_1ABI,
    address:
      jbController3_1Address[chainId as keyof typeof jbController3_1Address],
    functionName: 'prepForMigrationOf',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof jbController3_1ABI,
    'prepForMigrationOf'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbController3_1ABI}__ and `functionName` set to `"reconfigureFundingCyclesOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x97a5b9D9F0F7cD676B69f584F29048D0Ef4BB59b)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1d260DE91233e650F136Bf35f8A4ea1F2b68aDB6)
 */
export function usePrepareJbController3_1ReconfigureFundingCyclesOf(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof jbController3_1ABI,
      'reconfigureFundingCyclesOf'
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbController3_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbController3_1ABI,
    address:
      jbController3_1Address[chainId as keyof typeof jbController3_1Address],
    functionName: 'reconfigureFundingCyclesOf',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof jbController3_1ABI,
    'reconfigureFundingCyclesOf'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbController3_1ABI}__.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x97a5b9D9F0F7cD676B69f584F29048D0Ef4BB59b)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1d260DE91233e650F136Bf35f8A4ea1F2b68aDB6)
 */
export function useJbController3_1Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof jbController3_1ABI, TEventName>,
    'abi'
  > & { chainId?: keyof typeof jbController3_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbController3_1ABI,
    address:
      jbController3_1Address[chainId as keyof typeof jbController3_1Address],
    ...config,
  } as UseContractEventConfig<typeof jbController3_1ABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbController3_1ABI}__ and `eventName` set to `"BurnTokens"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x97a5b9D9F0F7cD676B69f584F29048D0Ef4BB59b)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1d260DE91233e650F136Bf35f8A4ea1F2b68aDB6)
 */
export function useJbController3_1BurnTokensEvent(
  config: Omit<
    UseContractEventConfig<typeof jbController3_1ABI, 'BurnTokens'>,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbController3_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbController3_1ABI,
    address:
      jbController3_1Address[chainId as keyof typeof jbController3_1Address],
    eventName: 'BurnTokens',
    ...config,
  } as UseContractEventConfig<typeof jbController3_1ABI, 'BurnTokens'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbController3_1ABI}__ and `eventName` set to `"DistributeReservedTokens"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x97a5b9D9F0F7cD676B69f584F29048D0Ef4BB59b)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1d260DE91233e650F136Bf35f8A4ea1F2b68aDB6)
 */
export function useJbController3_1DistributeReservedTokensEvent(
  config: Omit<
    UseContractEventConfig<
      typeof jbController3_1ABI,
      'DistributeReservedTokens'
    >,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbController3_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbController3_1ABI,
    address:
      jbController3_1Address[chainId as keyof typeof jbController3_1Address],
    eventName: 'DistributeReservedTokens',
    ...config,
  } as UseContractEventConfig<
    typeof jbController3_1ABI,
    'DistributeReservedTokens'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbController3_1ABI}__ and `eventName` set to `"DistributeToReservedTokenSplit"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x97a5b9D9F0F7cD676B69f584F29048D0Ef4BB59b)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1d260DE91233e650F136Bf35f8A4ea1F2b68aDB6)
 */
export function useJbController3_1DistributeToReservedTokenSplitEvent(
  config: Omit<
    UseContractEventConfig<
      typeof jbController3_1ABI,
      'DistributeToReservedTokenSplit'
    >,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbController3_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbController3_1ABI,
    address:
      jbController3_1Address[chainId as keyof typeof jbController3_1Address],
    eventName: 'DistributeToReservedTokenSplit',
    ...config,
  } as UseContractEventConfig<
    typeof jbController3_1ABI,
    'DistributeToReservedTokenSplit'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbController3_1ABI}__ and `eventName` set to `"LaunchFundingCycles"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x97a5b9D9F0F7cD676B69f584F29048D0Ef4BB59b)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1d260DE91233e650F136Bf35f8A4ea1F2b68aDB6)
 */
export function useJbController3_1LaunchFundingCyclesEvent(
  config: Omit<
    UseContractEventConfig<typeof jbController3_1ABI, 'LaunchFundingCycles'>,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbController3_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbController3_1ABI,
    address:
      jbController3_1Address[chainId as keyof typeof jbController3_1Address],
    eventName: 'LaunchFundingCycles',
    ...config,
  } as UseContractEventConfig<typeof jbController3_1ABI, 'LaunchFundingCycles'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbController3_1ABI}__ and `eventName` set to `"LaunchProject"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x97a5b9D9F0F7cD676B69f584F29048D0Ef4BB59b)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1d260DE91233e650F136Bf35f8A4ea1F2b68aDB6)
 */
export function useJbController3_1LaunchProjectEvent(
  config: Omit<
    UseContractEventConfig<typeof jbController3_1ABI, 'LaunchProject'>,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbController3_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbController3_1ABI,
    address:
      jbController3_1Address[chainId as keyof typeof jbController3_1Address],
    eventName: 'LaunchProject',
    ...config,
  } as UseContractEventConfig<typeof jbController3_1ABI, 'LaunchProject'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbController3_1ABI}__ and `eventName` set to `"Migrate"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x97a5b9D9F0F7cD676B69f584F29048D0Ef4BB59b)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1d260DE91233e650F136Bf35f8A4ea1F2b68aDB6)
 */
export function useJbController3_1MigrateEvent(
  config: Omit<
    UseContractEventConfig<typeof jbController3_1ABI, 'Migrate'>,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbController3_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbController3_1ABI,
    address:
      jbController3_1Address[chainId as keyof typeof jbController3_1Address],
    eventName: 'Migrate',
    ...config,
  } as UseContractEventConfig<typeof jbController3_1ABI, 'Migrate'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbController3_1ABI}__ and `eventName` set to `"MintTokens"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x97a5b9D9F0F7cD676B69f584F29048D0Ef4BB59b)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1d260DE91233e650F136Bf35f8A4ea1F2b68aDB6)
 */
export function useJbController3_1MintTokensEvent(
  config: Omit<
    UseContractEventConfig<typeof jbController3_1ABI, 'MintTokens'>,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbController3_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbController3_1ABI,
    address:
      jbController3_1Address[chainId as keyof typeof jbController3_1Address],
    eventName: 'MintTokens',
    ...config,
  } as UseContractEventConfig<typeof jbController3_1ABI, 'MintTokens'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbController3_1ABI}__ and `eventName` set to `"PrepMigration"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x97a5b9D9F0F7cD676B69f584F29048D0Ef4BB59b)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1d260DE91233e650F136Bf35f8A4ea1F2b68aDB6)
 */
export function useJbController3_1PrepMigrationEvent(
  config: Omit<
    UseContractEventConfig<typeof jbController3_1ABI, 'PrepMigration'>,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbController3_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbController3_1ABI,
    address:
      jbController3_1Address[chainId as keyof typeof jbController3_1Address],
    eventName: 'PrepMigration',
    ...config,
  } as UseContractEventConfig<typeof jbController3_1ABI, 'PrepMigration'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbController3_1ABI}__ and `eventName` set to `"ReconfigureFundingCycles"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x97a5b9D9F0F7cD676B69f584F29048D0Ef4BB59b)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1d260DE91233e650F136Bf35f8A4ea1F2b68aDB6)
 */
export function useJbController3_1ReconfigureFundingCyclesEvent(
  config: Omit<
    UseContractEventConfig<
      typeof jbController3_1ABI,
      'ReconfigureFundingCycles'
    >,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbController3_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbController3_1ABI,
    address:
      jbController3_1Address[chainId as keyof typeof jbController3_1Address],
    eventName: 'ReconfigureFundingCycles',
    ...config,
  } as UseContractEventConfig<
    typeof jbController3_1ABI,
    'ReconfigureFundingCycles'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbDirectoryABI}__.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x65572FB928b46f9aDB7cfe5A4c41226F636161ea)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x8E05bcD2812E1449f0EC3aE24E2C395F533d9A99)
 */
export function useJbDirectoryRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof jbDirectoryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof jbDirectoryABI, TFunctionName, TSelectData>,
    'abi'
  > & { chainId?: keyof typeof jbDirectoryAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbDirectoryABI,
    address: jbDirectoryAddress[chainId as keyof typeof jbDirectoryAddress],
    ...config,
  } as UseContractReadConfig<typeof jbDirectoryABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbDirectoryABI}__ and `functionName` set to `"controllerOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x65572FB928b46f9aDB7cfe5A4c41226F636161ea)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x8E05bcD2812E1449f0EC3aE24E2C395F533d9A99)
 */
export function useJbDirectoryControllerOf<
  TFunctionName extends 'controllerOf',
  TSelectData = ReadContractResult<typeof jbDirectoryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof jbDirectoryABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbDirectoryAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbDirectoryABI,
    address: jbDirectoryAddress[chainId as keyof typeof jbDirectoryAddress],
    functionName: 'controllerOf',
    ...config,
  } as UseContractReadConfig<typeof jbDirectoryABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbDirectoryABI}__ and `functionName` set to `"fundingCycleStore"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x65572FB928b46f9aDB7cfe5A4c41226F636161ea)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x8E05bcD2812E1449f0EC3aE24E2C395F533d9A99)
 */
export function useJbDirectoryFundingCycleStore<
  TFunctionName extends 'fundingCycleStore',
  TSelectData = ReadContractResult<typeof jbDirectoryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof jbDirectoryABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbDirectoryAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbDirectoryABI,
    address: jbDirectoryAddress[chainId as keyof typeof jbDirectoryAddress],
    functionName: 'fundingCycleStore',
    ...config,
  } as UseContractReadConfig<typeof jbDirectoryABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbDirectoryABI}__ and `functionName` set to `"isAllowedToSetFirstController"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x65572FB928b46f9aDB7cfe5A4c41226F636161ea)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x8E05bcD2812E1449f0EC3aE24E2C395F533d9A99)
 */
export function useJbDirectoryIsAllowedToSetFirstController<
  TFunctionName extends 'isAllowedToSetFirstController',
  TSelectData = ReadContractResult<typeof jbDirectoryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof jbDirectoryABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbDirectoryAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbDirectoryABI,
    address: jbDirectoryAddress[chainId as keyof typeof jbDirectoryAddress],
    functionName: 'isAllowedToSetFirstController',
    ...config,
  } as UseContractReadConfig<typeof jbDirectoryABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbDirectoryABI}__ and `functionName` set to `"isTerminalOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x65572FB928b46f9aDB7cfe5A4c41226F636161ea)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x8E05bcD2812E1449f0EC3aE24E2C395F533d9A99)
 */
export function useJbDirectoryIsTerminalOf<
  TFunctionName extends 'isTerminalOf',
  TSelectData = ReadContractResult<typeof jbDirectoryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof jbDirectoryABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbDirectoryAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbDirectoryABI,
    address: jbDirectoryAddress[chainId as keyof typeof jbDirectoryAddress],
    functionName: 'isTerminalOf',
    ...config,
  } as UseContractReadConfig<typeof jbDirectoryABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbDirectoryABI}__ and `functionName` set to `"operatorStore"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x65572FB928b46f9aDB7cfe5A4c41226F636161ea)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x8E05bcD2812E1449f0EC3aE24E2C395F533d9A99)
 */
export function useJbDirectoryOperatorStore<
  TFunctionName extends 'operatorStore',
  TSelectData = ReadContractResult<typeof jbDirectoryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof jbDirectoryABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbDirectoryAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbDirectoryABI,
    address: jbDirectoryAddress[chainId as keyof typeof jbDirectoryAddress],
    functionName: 'operatorStore',
    ...config,
  } as UseContractReadConfig<typeof jbDirectoryABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbDirectoryABI}__ and `functionName` set to `"owner"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x65572FB928b46f9aDB7cfe5A4c41226F636161ea)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x8E05bcD2812E1449f0EC3aE24E2C395F533d9A99)
 */
export function useJbDirectoryOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof jbDirectoryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof jbDirectoryABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbDirectoryAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbDirectoryABI,
    address: jbDirectoryAddress[chainId as keyof typeof jbDirectoryAddress],
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof jbDirectoryABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbDirectoryABI}__ and `functionName` set to `"primaryTerminalOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x65572FB928b46f9aDB7cfe5A4c41226F636161ea)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x8E05bcD2812E1449f0EC3aE24E2C395F533d9A99)
 */
export function useJbDirectoryPrimaryTerminalOf<
  TFunctionName extends 'primaryTerminalOf',
  TSelectData = ReadContractResult<typeof jbDirectoryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof jbDirectoryABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbDirectoryAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbDirectoryABI,
    address: jbDirectoryAddress[chainId as keyof typeof jbDirectoryAddress],
    functionName: 'primaryTerminalOf',
    ...config,
  } as UseContractReadConfig<typeof jbDirectoryABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbDirectoryABI}__ and `functionName` set to `"projects"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x65572FB928b46f9aDB7cfe5A4c41226F636161ea)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x8E05bcD2812E1449f0EC3aE24E2C395F533d9A99)
 */
export function useJbDirectoryProjects<
  TFunctionName extends 'projects',
  TSelectData = ReadContractResult<typeof jbDirectoryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof jbDirectoryABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbDirectoryAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbDirectoryABI,
    address: jbDirectoryAddress[chainId as keyof typeof jbDirectoryAddress],
    functionName: 'projects',
    ...config,
  } as UseContractReadConfig<typeof jbDirectoryABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbDirectoryABI}__ and `functionName` set to `"terminalsOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x65572FB928b46f9aDB7cfe5A4c41226F636161ea)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x8E05bcD2812E1449f0EC3aE24E2C395F533d9A99)
 */
export function useJbDirectoryTerminalsOf<
  TFunctionName extends 'terminalsOf',
  TSelectData = ReadContractResult<typeof jbDirectoryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof jbDirectoryABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbDirectoryAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbDirectoryABI,
    address: jbDirectoryAddress[chainId as keyof typeof jbDirectoryAddress],
    functionName: 'terminalsOf',
    ...config,
  } as UseContractReadConfig<typeof jbDirectoryABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbDirectoryABI}__.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x65572FB928b46f9aDB7cfe5A4c41226F636161ea)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x8E05bcD2812E1449f0EC3aE24E2C395F533d9A99)
 */
export function useJbDirectoryWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbDirectoryAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbDirectoryABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      > & { address?: Address; chainId?: TChainId }
    : UseContractWriteConfig<typeof jbDirectoryABI, TFunctionName, TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof jbDirectoryABI, TFunctionName, TMode>({
    abi: jbDirectoryABI,
    address: jbDirectoryAddress[chainId as keyof typeof jbDirectoryAddress],
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbDirectoryABI}__ and `functionName` set to `"renounceOwnership"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x65572FB928b46f9aDB7cfe5A4c41226F636161ea)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x8E05bcD2812E1449f0EC3aE24E2C395F533d9A99)
 */
export function useJbDirectoryRenounceOwnership<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbDirectoryAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbDirectoryABI,
          'renounceOwnership'
        >['request']['abi'],
        'renounceOwnership',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'renounceOwnership'
      }
    : UseContractWriteConfig<
        typeof jbDirectoryABI,
        'renounceOwnership',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof jbDirectoryABI, 'renounceOwnership', TMode>({
    abi: jbDirectoryABI,
    address: jbDirectoryAddress[chainId as keyof typeof jbDirectoryAddress],
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbDirectoryABI}__ and `functionName` set to `"setControllerOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x65572FB928b46f9aDB7cfe5A4c41226F636161ea)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x8E05bcD2812E1449f0EC3aE24E2C395F533d9A99)
 */
export function useJbDirectorySetControllerOf<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbDirectoryAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbDirectoryABI,
          'setControllerOf'
        >['request']['abi'],
        'setControllerOf',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'setControllerOf'
      }
    : UseContractWriteConfig<
        typeof jbDirectoryABI,
        'setControllerOf',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setControllerOf'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof jbDirectoryABI, 'setControllerOf', TMode>({
    abi: jbDirectoryABI,
    address: jbDirectoryAddress[chainId as keyof typeof jbDirectoryAddress],
    functionName: 'setControllerOf',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbDirectoryABI}__ and `functionName` set to `"setIsAllowedToSetFirstController"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x65572FB928b46f9aDB7cfe5A4c41226F636161ea)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x8E05bcD2812E1449f0EC3aE24E2C395F533d9A99)
 */
export function useJbDirectorySetIsAllowedToSetFirstController<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbDirectoryAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbDirectoryABI,
          'setIsAllowedToSetFirstController'
        >['request']['abi'],
        'setIsAllowedToSetFirstController',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'setIsAllowedToSetFirstController'
      }
    : UseContractWriteConfig<
        typeof jbDirectoryABI,
        'setIsAllowedToSetFirstController',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setIsAllowedToSetFirstController'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof jbDirectoryABI,
    'setIsAllowedToSetFirstController',
    TMode
  >({
    abi: jbDirectoryABI,
    address: jbDirectoryAddress[chainId as keyof typeof jbDirectoryAddress],
    functionName: 'setIsAllowedToSetFirstController',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbDirectoryABI}__ and `functionName` set to `"setPrimaryTerminalOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x65572FB928b46f9aDB7cfe5A4c41226F636161ea)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x8E05bcD2812E1449f0EC3aE24E2C395F533d9A99)
 */
export function useJbDirectorySetPrimaryTerminalOf<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbDirectoryAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbDirectoryABI,
          'setPrimaryTerminalOf'
        >['request']['abi'],
        'setPrimaryTerminalOf',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'setPrimaryTerminalOf'
      }
    : UseContractWriteConfig<
        typeof jbDirectoryABI,
        'setPrimaryTerminalOf',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setPrimaryTerminalOf'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof jbDirectoryABI, 'setPrimaryTerminalOf', TMode>(
    {
      abi: jbDirectoryABI,
      address: jbDirectoryAddress[chainId as keyof typeof jbDirectoryAddress],
      functionName: 'setPrimaryTerminalOf',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbDirectoryABI}__ and `functionName` set to `"setTerminalsOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x65572FB928b46f9aDB7cfe5A4c41226F636161ea)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x8E05bcD2812E1449f0EC3aE24E2C395F533d9A99)
 */
export function useJbDirectorySetTerminalsOf<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbDirectoryAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbDirectoryABI,
          'setTerminalsOf'
        >['request']['abi'],
        'setTerminalsOf',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'setTerminalsOf'
      }
    : UseContractWriteConfig<typeof jbDirectoryABI, 'setTerminalsOf', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setTerminalsOf'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof jbDirectoryABI, 'setTerminalsOf', TMode>({
    abi: jbDirectoryABI,
    address: jbDirectoryAddress[chainId as keyof typeof jbDirectoryAddress],
    functionName: 'setTerminalsOf',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbDirectoryABI}__ and `functionName` set to `"transferOwnership"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x65572FB928b46f9aDB7cfe5A4c41226F636161ea)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x8E05bcD2812E1449f0EC3aE24E2C395F533d9A99)
 */
export function useJbDirectoryTransferOwnership<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbDirectoryAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbDirectoryABI,
          'transferOwnership'
        >['request']['abi'],
        'transferOwnership',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'transferOwnership'
      }
    : UseContractWriteConfig<
        typeof jbDirectoryABI,
        'transferOwnership',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof jbDirectoryABI, 'transferOwnership', TMode>({
    abi: jbDirectoryABI,
    address: jbDirectoryAddress[chainId as keyof typeof jbDirectoryAddress],
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbDirectoryABI}__.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x65572FB928b46f9aDB7cfe5A4c41226F636161ea)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x8E05bcD2812E1449f0EC3aE24E2C395F533d9A99)
 */
export function usePrepareJbDirectoryWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof jbDirectoryABI, TFunctionName>,
    'abi'
  > & { chainId?: keyof typeof jbDirectoryAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbDirectoryABI,
    address: jbDirectoryAddress[chainId as keyof typeof jbDirectoryAddress],
    ...config,
  } as UsePrepareContractWriteConfig<typeof jbDirectoryABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbDirectoryABI}__ and `functionName` set to `"renounceOwnership"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x65572FB928b46f9aDB7cfe5A4c41226F636161ea)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x8E05bcD2812E1449f0EC3aE24E2C395F533d9A99)
 */
export function usePrepareJbDirectoryRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof jbDirectoryABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbDirectoryAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbDirectoryABI,
    address: jbDirectoryAddress[chainId as keyof typeof jbDirectoryAddress],
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof jbDirectoryABI,
    'renounceOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbDirectoryABI}__ and `functionName` set to `"setControllerOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x65572FB928b46f9aDB7cfe5A4c41226F636161ea)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x8E05bcD2812E1449f0EC3aE24E2C395F533d9A99)
 */
export function usePrepareJbDirectorySetControllerOf(
  config: Omit<
    UsePrepareContractWriteConfig<typeof jbDirectoryABI, 'setControllerOf'>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbDirectoryAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbDirectoryABI,
    address: jbDirectoryAddress[chainId as keyof typeof jbDirectoryAddress],
    functionName: 'setControllerOf',
    ...config,
  } as UsePrepareContractWriteConfig<typeof jbDirectoryABI, 'setControllerOf'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbDirectoryABI}__ and `functionName` set to `"setIsAllowedToSetFirstController"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x65572FB928b46f9aDB7cfe5A4c41226F636161ea)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x8E05bcD2812E1449f0EC3aE24E2C395F533d9A99)
 */
export function usePrepareJbDirectorySetIsAllowedToSetFirstController(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof jbDirectoryABI,
      'setIsAllowedToSetFirstController'
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbDirectoryAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbDirectoryABI,
    address: jbDirectoryAddress[chainId as keyof typeof jbDirectoryAddress],
    functionName: 'setIsAllowedToSetFirstController',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof jbDirectoryABI,
    'setIsAllowedToSetFirstController'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbDirectoryABI}__ and `functionName` set to `"setPrimaryTerminalOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x65572FB928b46f9aDB7cfe5A4c41226F636161ea)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x8E05bcD2812E1449f0EC3aE24E2C395F533d9A99)
 */
export function usePrepareJbDirectorySetPrimaryTerminalOf(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof jbDirectoryABI,
      'setPrimaryTerminalOf'
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbDirectoryAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbDirectoryABI,
    address: jbDirectoryAddress[chainId as keyof typeof jbDirectoryAddress],
    functionName: 'setPrimaryTerminalOf',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof jbDirectoryABI,
    'setPrimaryTerminalOf'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbDirectoryABI}__ and `functionName` set to `"setTerminalsOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x65572FB928b46f9aDB7cfe5A4c41226F636161ea)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x8E05bcD2812E1449f0EC3aE24E2C395F533d9A99)
 */
export function usePrepareJbDirectorySetTerminalsOf(
  config: Omit<
    UsePrepareContractWriteConfig<typeof jbDirectoryABI, 'setTerminalsOf'>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbDirectoryAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbDirectoryABI,
    address: jbDirectoryAddress[chainId as keyof typeof jbDirectoryAddress],
    functionName: 'setTerminalsOf',
    ...config,
  } as UsePrepareContractWriteConfig<typeof jbDirectoryABI, 'setTerminalsOf'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbDirectoryABI}__ and `functionName` set to `"transferOwnership"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x65572FB928b46f9aDB7cfe5A4c41226F636161ea)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x8E05bcD2812E1449f0EC3aE24E2C395F533d9A99)
 */
export function usePrepareJbDirectoryTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof jbDirectoryABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbDirectoryAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbDirectoryABI,
    address: jbDirectoryAddress[chainId as keyof typeof jbDirectoryAddress],
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof jbDirectoryABI,
    'transferOwnership'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbDirectoryABI}__.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x65572FB928b46f9aDB7cfe5A4c41226F636161ea)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x8E05bcD2812E1449f0EC3aE24E2C395F533d9A99)
 */
export function useJbDirectoryEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof jbDirectoryABI, TEventName>,
    'abi'
  > & { chainId?: keyof typeof jbDirectoryAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbDirectoryABI,
    address: jbDirectoryAddress[chainId as keyof typeof jbDirectoryAddress],
    ...config,
  } as UseContractEventConfig<typeof jbDirectoryABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbDirectoryABI}__ and `eventName` set to `"AddTerminal"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x65572FB928b46f9aDB7cfe5A4c41226F636161ea)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x8E05bcD2812E1449f0EC3aE24E2C395F533d9A99)
 */
export function useJbDirectoryAddTerminalEvent(
  config: Omit<
    UseContractEventConfig<typeof jbDirectoryABI, 'AddTerminal'>,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbDirectoryAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbDirectoryABI,
    address: jbDirectoryAddress[chainId as keyof typeof jbDirectoryAddress],
    eventName: 'AddTerminal',
    ...config,
  } as UseContractEventConfig<typeof jbDirectoryABI, 'AddTerminal'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbDirectoryABI}__ and `eventName` set to `"OwnershipTransferred"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x65572FB928b46f9aDB7cfe5A4c41226F636161ea)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x8E05bcD2812E1449f0EC3aE24E2C395F533d9A99)
 */
export function useJbDirectoryOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof jbDirectoryABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbDirectoryAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbDirectoryABI,
    address: jbDirectoryAddress[chainId as keyof typeof jbDirectoryAddress],
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof jbDirectoryABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbDirectoryABI}__ and `eventName` set to `"SetController"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x65572FB928b46f9aDB7cfe5A4c41226F636161ea)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x8E05bcD2812E1449f0EC3aE24E2C395F533d9A99)
 */
export function useJbDirectorySetControllerEvent(
  config: Omit<
    UseContractEventConfig<typeof jbDirectoryABI, 'SetController'>,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbDirectoryAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbDirectoryABI,
    address: jbDirectoryAddress[chainId as keyof typeof jbDirectoryAddress],
    eventName: 'SetController',
    ...config,
  } as UseContractEventConfig<typeof jbDirectoryABI, 'SetController'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbDirectoryABI}__ and `eventName` set to `"SetIsAllowedToSetFirstController"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x65572FB928b46f9aDB7cfe5A4c41226F636161ea)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x8E05bcD2812E1449f0EC3aE24E2C395F533d9A99)
 */
export function useJbDirectorySetIsAllowedToSetFirstControllerEvent(
  config: Omit<
    UseContractEventConfig<
      typeof jbDirectoryABI,
      'SetIsAllowedToSetFirstController'
    >,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbDirectoryAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbDirectoryABI,
    address: jbDirectoryAddress[chainId as keyof typeof jbDirectoryAddress],
    eventName: 'SetIsAllowedToSetFirstController',
    ...config,
  } as UseContractEventConfig<
    typeof jbDirectoryABI,
    'SetIsAllowedToSetFirstController'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbDirectoryABI}__ and `eventName` set to `"SetPrimaryTerminal"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x65572FB928b46f9aDB7cfe5A4c41226F636161ea)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x8E05bcD2812E1449f0EC3aE24E2C395F533d9A99)
 */
export function useJbDirectorySetPrimaryTerminalEvent(
  config: Omit<
    UseContractEventConfig<typeof jbDirectoryABI, 'SetPrimaryTerminal'>,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbDirectoryAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbDirectoryABI,
    address: jbDirectoryAddress[chainId as keyof typeof jbDirectoryAddress],
    eventName: 'SetPrimaryTerminal',
    ...config,
  } as UseContractEventConfig<typeof jbDirectoryABI, 'SetPrimaryTerminal'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbDirectoryABI}__ and `eventName` set to `"SetTerminals"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x65572FB928b46f9aDB7cfe5A4c41226F636161ea)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x8E05bcD2812E1449f0EC3aE24E2C395F533d9A99)
 */
export function useJbDirectorySetTerminalsEvent(
  config: Omit<
    UseContractEventConfig<typeof jbDirectoryABI, 'SetTerminals'>,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbDirectoryAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbDirectoryABI,
    address: jbDirectoryAddress[chainId as keyof typeof jbDirectoryAddress],
    eventName: 'SetTerminals',
    ...config,
  } as UseContractEventConfig<typeof jbDirectoryABI, 'SetTerminals'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbethPaymentTerminalABI}__.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x594Cb208b5BB48db1bcbC9354d1694998864ec63)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x55d4dfb578daA4d60380995ffF7a706471d7c719)
 */
export function useJbethPaymentTerminalRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof jbethPaymentTerminalABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbethPaymentTerminalABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > & { chainId?: keyof typeof jbethPaymentTerminalAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbethPaymentTerminalABI,
    address:
      jbethPaymentTerminalAddress[
        chainId as keyof typeof jbethPaymentTerminalAddress
      ],
    ...config,
  } as UseContractReadConfig<
    typeof jbethPaymentTerminalABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbethPaymentTerminalABI}__ and `functionName` set to `"acceptsToken"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x594Cb208b5BB48db1bcbC9354d1694998864ec63)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x55d4dfb578daA4d60380995ffF7a706471d7c719)
 */
export function useJbethPaymentTerminalAcceptsToken<
  TFunctionName extends 'acceptsToken',
  TSelectData = ReadContractResult<
    typeof jbethPaymentTerminalABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbethPaymentTerminalABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminalAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbethPaymentTerminalABI,
    address:
      jbethPaymentTerminalAddress[
        chainId as keyof typeof jbethPaymentTerminalAddress
      ],
    functionName: 'acceptsToken',
    ...config,
  } as UseContractReadConfig<
    typeof jbethPaymentTerminalABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbethPaymentTerminalABI}__ and `functionName` set to `"baseWeightCurrency"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x594Cb208b5BB48db1bcbC9354d1694998864ec63)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x55d4dfb578daA4d60380995ffF7a706471d7c719)
 */
export function useJbethPaymentTerminalBaseWeightCurrency<
  TFunctionName extends 'baseWeightCurrency',
  TSelectData = ReadContractResult<
    typeof jbethPaymentTerminalABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbethPaymentTerminalABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminalAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbethPaymentTerminalABI,
    address:
      jbethPaymentTerminalAddress[
        chainId as keyof typeof jbethPaymentTerminalAddress
      ],
    functionName: 'baseWeightCurrency',
    ...config,
  } as UseContractReadConfig<
    typeof jbethPaymentTerminalABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbethPaymentTerminalABI}__ and `functionName` set to `"currency"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x594Cb208b5BB48db1bcbC9354d1694998864ec63)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x55d4dfb578daA4d60380995ffF7a706471d7c719)
 */
export function useJbethPaymentTerminalCurrency<
  TFunctionName extends 'currency',
  TSelectData = ReadContractResult<
    typeof jbethPaymentTerminalABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbethPaymentTerminalABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminalAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbethPaymentTerminalABI,
    address:
      jbethPaymentTerminalAddress[
        chainId as keyof typeof jbethPaymentTerminalAddress
      ],
    functionName: 'currency',
    ...config,
  } as UseContractReadConfig<
    typeof jbethPaymentTerminalABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbethPaymentTerminalABI}__ and `functionName` set to `"currencyForToken"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x594Cb208b5BB48db1bcbC9354d1694998864ec63)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x55d4dfb578daA4d60380995ffF7a706471d7c719)
 */
export function useJbethPaymentTerminalCurrencyForToken<
  TFunctionName extends 'currencyForToken',
  TSelectData = ReadContractResult<
    typeof jbethPaymentTerminalABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbethPaymentTerminalABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminalAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbethPaymentTerminalABI,
    address:
      jbethPaymentTerminalAddress[
        chainId as keyof typeof jbethPaymentTerminalAddress
      ],
    functionName: 'currencyForToken',
    ...config,
  } as UseContractReadConfig<
    typeof jbethPaymentTerminalABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbethPaymentTerminalABI}__ and `functionName` set to `"currentEthOverflowOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x594Cb208b5BB48db1bcbC9354d1694998864ec63)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x55d4dfb578daA4d60380995ffF7a706471d7c719)
 */
export function useJbethPaymentTerminalCurrentEthOverflowOf<
  TFunctionName extends 'currentEthOverflowOf',
  TSelectData = ReadContractResult<
    typeof jbethPaymentTerminalABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbethPaymentTerminalABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminalAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbethPaymentTerminalABI,
    address:
      jbethPaymentTerminalAddress[
        chainId as keyof typeof jbethPaymentTerminalAddress
      ],
    functionName: 'currentEthOverflowOf',
    ...config,
  } as UseContractReadConfig<
    typeof jbethPaymentTerminalABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbethPaymentTerminalABI}__ and `functionName` set to `"decimals"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x594Cb208b5BB48db1bcbC9354d1694998864ec63)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x55d4dfb578daA4d60380995ffF7a706471d7c719)
 */
export function useJbethPaymentTerminalDecimals<
  TFunctionName extends 'decimals',
  TSelectData = ReadContractResult<
    typeof jbethPaymentTerminalABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbethPaymentTerminalABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminalAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbethPaymentTerminalABI,
    address:
      jbethPaymentTerminalAddress[
        chainId as keyof typeof jbethPaymentTerminalAddress
      ],
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<
    typeof jbethPaymentTerminalABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbethPaymentTerminalABI}__ and `functionName` set to `"decimalsForToken"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x594Cb208b5BB48db1bcbC9354d1694998864ec63)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x55d4dfb578daA4d60380995ffF7a706471d7c719)
 */
export function useJbethPaymentTerminalDecimalsForToken<
  TFunctionName extends 'decimalsForToken',
  TSelectData = ReadContractResult<
    typeof jbethPaymentTerminalABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbethPaymentTerminalABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminalAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbethPaymentTerminalABI,
    address:
      jbethPaymentTerminalAddress[
        chainId as keyof typeof jbethPaymentTerminalAddress
      ],
    functionName: 'decimalsForToken',
    ...config,
  } as UseContractReadConfig<
    typeof jbethPaymentTerminalABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbethPaymentTerminalABI}__ and `functionName` set to `"directory"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x594Cb208b5BB48db1bcbC9354d1694998864ec63)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x55d4dfb578daA4d60380995ffF7a706471d7c719)
 */
export function useJbethPaymentTerminalDirectory<
  TFunctionName extends 'directory',
  TSelectData = ReadContractResult<
    typeof jbethPaymentTerminalABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbethPaymentTerminalABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminalAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbethPaymentTerminalABI,
    address:
      jbethPaymentTerminalAddress[
        chainId as keyof typeof jbethPaymentTerminalAddress
      ],
    functionName: 'directory',
    ...config,
  } as UseContractReadConfig<
    typeof jbethPaymentTerminalABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbethPaymentTerminalABI}__ and `functionName` set to `"fee"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x594Cb208b5BB48db1bcbC9354d1694998864ec63)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x55d4dfb578daA4d60380995ffF7a706471d7c719)
 */
export function useJbethPaymentTerminalFee<
  TFunctionName extends 'fee',
  TSelectData = ReadContractResult<
    typeof jbethPaymentTerminalABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbethPaymentTerminalABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminalAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbethPaymentTerminalABI,
    address:
      jbethPaymentTerminalAddress[
        chainId as keyof typeof jbethPaymentTerminalAddress
      ],
    functionName: 'fee',
    ...config,
  } as UseContractReadConfig<
    typeof jbethPaymentTerminalABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbethPaymentTerminalABI}__ and `functionName` set to `"feeGauge"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x594Cb208b5BB48db1bcbC9354d1694998864ec63)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x55d4dfb578daA4d60380995ffF7a706471d7c719)
 */
export function useJbethPaymentTerminalFeeGauge<
  TFunctionName extends 'feeGauge',
  TSelectData = ReadContractResult<
    typeof jbethPaymentTerminalABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbethPaymentTerminalABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminalAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbethPaymentTerminalABI,
    address:
      jbethPaymentTerminalAddress[
        chainId as keyof typeof jbethPaymentTerminalAddress
      ],
    functionName: 'feeGauge',
    ...config,
  } as UseContractReadConfig<
    typeof jbethPaymentTerminalABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbethPaymentTerminalABI}__ and `functionName` set to `"heldFeesOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x594Cb208b5BB48db1bcbC9354d1694998864ec63)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x55d4dfb578daA4d60380995ffF7a706471d7c719)
 */
export function useJbethPaymentTerminalHeldFeesOf<
  TFunctionName extends 'heldFeesOf',
  TSelectData = ReadContractResult<
    typeof jbethPaymentTerminalABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbethPaymentTerminalABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminalAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbethPaymentTerminalABI,
    address:
      jbethPaymentTerminalAddress[
        chainId as keyof typeof jbethPaymentTerminalAddress
      ],
    functionName: 'heldFeesOf',
    ...config,
  } as UseContractReadConfig<
    typeof jbethPaymentTerminalABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbethPaymentTerminalABI}__ and `functionName` set to `"isFeelessAddress"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x594Cb208b5BB48db1bcbC9354d1694998864ec63)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x55d4dfb578daA4d60380995ffF7a706471d7c719)
 */
export function useJbethPaymentTerminalIsFeelessAddress<
  TFunctionName extends 'isFeelessAddress',
  TSelectData = ReadContractResult<
    typeof jbethPaymentTerminalABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbethPaymentTerminalABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminalAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbethPaymentTerminalABI,
    address:
      jbethPaymentTerminalAddress[
        chainId as keyof typeof jbethPaymentTerminalAddress
      ],
    functionName: 'isFeelessAddress',
    ...config,
  } as UseContractReadConfig<
    typeof jbethPaymentTerminalABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbethPaymentTerminalABI}__ and `functionName` set to `"operatorStore"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x594Cb208b5BB48db1bcbC9354d1694998864ec63)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x55d4dfb578daA4d60380995ffF7a706471d7c719)
 */
export function useJbethPaymentTerminalOperatorStore<
  TFunctionName extends 'operatorStore',
  TSelectData = ReadContractResult<
    typeof jbethPaymentTerminalABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbethPaymentTerminalABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminalAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbethPaymentTerminalABI,
    address:
      jbethPaymentTerminalAddress[
        chainId as keyof typeof jbethPaymentTerminalAddress
      ],
    functionName: 'operatorStore',
    ...config,
  } as UseContractReadConfig<
    typeof jbethPaymentTerminalABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbethPaymentTerminalABI}__ and `functionName` set to `"owner"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x594Cb208b5BB48db1bcbC9354d1694998864ec63)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x55d4dfb578daA4d60380995ffF7a706471d7c719)
 */
export function useJbethPaymentTerminalOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<
    typeof jbethPaymentTerminalABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbethPaymentTerminalABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminalAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbethPaymentTerminalABI,
    address:
      jbethPaymentTerminalAddress[
        chainId as keyof typeof jbethPaymentTerminalAddress
      ],
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<
    typeof jbethPaymentTerminalABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbethPaymentTerminalABI}__ and `functionName` set to `"payoutSplitsGroup"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x594Cb208b5BB48db1bcbC9354d1694998864ec63)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x55d4dfb578daA4d60380995ffF7a706471d7c719)
 */
export function useJbethPaymentTerminalPayoutSplitsGroup<
  TFunctionName extends 'payoutSplitsGroup',
  TSelectData = ReadContractResult<
    typeof jbethPaymentTerminalABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbethPaymentTerminalABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminalAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbethPaymentTerminalABI,
    address:
      jbethPaymentTerminalAddress[
        chainId as keyof typeof jbethPaymentTerminalAddress
      ],
    functionName: 'payoutSplitsGroup',
    ...config,
  } as UseContractReadConfig<
    typeof jbethPaymentTerminalABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbethPaymentTerminalABI}__ and `functionName` set to `"prices"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x594Cb208b5BB48db1bcbC9354d1694998864ec63)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x55d4dfb578daA4d60380995ffF7a706471d7c719)
 */
export function useJbethPaymentTerminalPrices<
  TFunctionName extends 'prices',
  TSelectData = ReadContractResult<
    typeof jbethPaymentTerminalABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbethPaymentTerminalABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminalAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbethPaymentTerminalABI,
    address:
      jbethPaymentTerminalAddress[
        chainId as keyof typeof jbethPaymentTerminalAddress
      ],
    functionName: 'prices',
    ...config,
  } as UseContractReadConfig<
    typeof jbethPaymentTerminalABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbethPaymentTerminalABI}__ and `functionName` set to `"projects"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x594Cb208b5BB48db1bcbC9354d1694998864ec63)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x55d4dfb578daA4d60380995ffF7a706471d7c719)
 */
export function useJbethPaymentTerminalProjects<
  TFunctionName extends 'projects',
  TSelectData = ReadContractResult<
    typeof jbethPaymentTerminalABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbethPaymentTerminalABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminalAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbethPaymentTerminalABI,
    address:
      jbethPaymentTerminalAddress[
        chainId as keyof typeof jbethPaymentTerminalAddress
      ],
    functionName: 'projects',
    ...config,
  } as UseContractReadConfig<
    typeof jbethPaymentTerminalABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbethPaymentTerminalABI}__ and `functionName` set to `"splitsStore"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x594Cb208b5BB48db1bcbC9354d1694998864ec63)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x55d4dfb578daA4d60380995ffF7a706471d7c719)
 */
export function useJbethPaymentTerminalSplitsStore<
  TFunctionName extends 'splitsStore',
  TSelectData = ReadContractResult<
    typeof jbethPaymentTerminalABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbethPaymentTerminalABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminalAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbethPaymentTerminalABI,
    address:
      jbethPaymentTerminalAddress[
        chainId as keyof typeof jbethPaymentTerminalAddress
      ],
    functionName: 'splitsStore',
    ...config,
  } as UseContractReadConfig<
    typeof jbethPaymentTerminalABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbethPaymentTerminalABI}__ and `functionName` set to `"store"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x594Cb208b5BB48db1bcbC9354d1694998864ec63)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x55d4dfb578daA4d60380995ffF7a706471d7c719)
 */
export function useJbethPaymentTerminalStore<
  TFunctionName extends 'store',
  TSelectData = ReadContractResult<
    typeof jbethPaymentTerminalABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbethPaymentTerminalABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminalAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbethPaymentTerminalABI,
    address:
      jbethPaymentTerminalAddress[
        chainId as keyof typeof jbethPaymentTerminalAddress
      ],
    functionName: 'store',
    ...config,
  } as UseContractReadConfig<
    typeof jbethPaymentTerminalABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbethPaymentTerminalABI}__ and `functionName` set to `"supportsInterface"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x594Cb208b5BB48db1bcbC9354d1694998864ec63)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x55d4dfb578daA4d60380995ffF7a706471d7c719)
 */
export function useJbethPaymentTerminalSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<
    typeof jbethPaymentTerminalABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbethPaymentTerminalABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminalAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbethPaymentTerminalABI,
    address:
      jbethPaymentTerminalAddress[
        chainId as keyof typeof jbethPaymentTerminalAddress
      ],
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof jbethPaymentTerminalABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbethPaymentTerminalABI}__ and `functionName` set to `"token"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x594Cb208b5BB48db1bcbC9354d1694998864ec63)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x55d4dfb578daA4d60380995ffF7a706471d7c719)
 */
export function useJbethPaymentTerminalToken<
  TFunctionName extends 'token',
  TSelectData = ReadContractResult<
    typeof jbethPaymentTerminalABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbethPaymentTerminalABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminalAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbethPaymentTerminalABI,
    address:
      jbethPaymentTerminalAddress[
        chainId as keyof typeof jbethPaymentTerminalAddress
      ],
    functionName: 'token',
    ...config,
  } as UseContractReadConfig<
    typeof jbethPaymentTerminalABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbethPaymentTerminalABI}__.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x594Cb208b5BB48db1bcbC9354d1694998864ec63)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x55d4dfb578daA4d60380995ffF7a706471d7c719)
 */
export function useJbethPaymentTerminalWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbethPaymentTerminalAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbethPaymentTerminalABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      > & { address?: Address; chainId?: TChainId }
    : UseContractWriteConfig<
        typeof jbethPaymentTerminalABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof jbethPaymentTerminalABI, TFunctionName, TMode>(
    {
      abi: jbethPaymentTerminalABI,
      address:
        jbethPaymentTerminalAddress[
          chainId as keyof typeof jbethPaymentTerminalAddress
        ],
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbethPaymentTerminalABI}__ and `functionName` set to `"addToBalanceOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x594Cb208b5BB48db1bcbC9354d1694998864ec63)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x55d4dfb578daA4d60380995ffF7a706471d7c719)
 */
export function useJbethPaymentTerminalAddToBalanceOf<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbethPaymentTerminalAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbethPaymentTerminalABI,
          'addToBalanceOf'
        >['request']['abi'],
        'addToBalanceOf',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'addToBalanceOf'
      }
    : UseContractWriteConfig<
        typeof jbethPaymentTerminalABI,
        'addToBalanceOf',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'addToBalanceOf'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof jbethPaymentTerminalABI,
    'addToBalanceOf',
    TMode
  >({
    abi: jbethPaymentTerminalABI,
    address:
      jbethPaymentTerminalAddress[
        chainId as keyof typeof jbethPaymentTerminalAddress
      ],
    functionName: 'addToBalanceOf',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbethPaymentTerminalABI}__ and `functionName` set to `"distributePayoutsOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x594Cb208b5BB48db1bcbC9354d1694998864ec63)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x55d4dfb578daA4d60380995ffF7a706471d7c719)
 */
export function useJbethPaymentTerminalDistributePayoutsOf<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbethPaymentTerminalAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbethPaymentTerminalABI,
          'distributePayoutsOf'
        >['request']['abi'],
        'distributePayoutsOf',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'distributePayoutsOf'
      }
    : UseContractWriteConfig<
        typeof jbethPaymentTerminalABI,
        'distributePayoutsOf',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'distributePayoutsOf'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof jbethPaymentTerminalABI,
    'distributePayoutsOf',
    TMode
  >({
    abi: jbethPaymentTerminalABI,
    address:
      jbethPaymentTerminalAddress[
        chainId as keyof typeof jbethPaymentTerminalAddress
      ],
    functionName: 'distributePayoutsOf',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbethPaymentTerminalABI}__ and `functionName` set to `"migrate"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x594Cb208b5BB48db1bcbC9354d1694998864ec63)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x55d4dfb578daA4d60380995ffF7a706471d7c719)
 */
export function useJbethPaymentTerminalMigrate<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbethPaymentTerminalAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbethPaymentTerminalABI,
          'migrate'
        >['request']['abi'],
        'migrate',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'migrate' }
    : UseContractWriteConfig<
        typeof jbethPaymentTerminalABI,
        'migrate',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'migrate'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof jbethPaymentTerminalABI, 'migrate', TMode>({
    abi: jbethPaymentTerminalABI,
    address:
      jbethPaymentTerminalAddress[
        chainId as keyof typeof jbethPaymentTerminalAddress
      ],
    functionName: 'migrate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbethPaymentTerminalABI}__ and `functionName` set to `"pay"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x594Cb208b5BB48db1bcbC9354d1694998864ec63)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x55d4dfb578daA4d60380995ffF7a706471d7c719)
 */
export function useJbethPaymentTerminalPay<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbethPaymentTerminalAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbethPaymentTerminalABI,
          'pay'
        >['request']['abi'],
        'pay',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'pay' }
    : UseContractWriteConfig<typeof jbethPaymentTerminalABI, 'pay', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'pay'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof jbethPaymentTerminalABI, 'pay', TMode>({
    abi: jbethPaymentTerminalABI,
    address:
      jbethPaymentTerminalAddress[
        chainId as keyof typeof jbethPaymentTerminalAddress
      ],
    functionName: 'pay',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbethPaymentTerminalABI}__ and `functionName` set to `"processFees"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x594Cb208b5BB48db1bcbC9354d1694998864ec63)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x55d4dfb578daA4d60380995ffF7a706471d7c719)
 */
export function useJbethPaymentTerminalProcessFees<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbethPaymentTerminalAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbethPaymentTerminalABI,
          'processFees'
        >['request']['abi'],
        'processFees',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'processFees'
      }
    : UseContractWriteConfig<
        typeof jbethPaymentTerminalABI,
        'processFees',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'processFees'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof jbethPaymentTerminalABI, 'processFees', TMode>(
    {
      abi: jbethPaymentTerminalABI,
      address:
        jbethPaymentTerminalAddress[
          chainId as keyof typeof jbethPaymentTerminalAddress
        ],
      functionName: 'processFees',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbethPaymentTerminalABI}__ and `functionName` set to `"redeemTokensOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x594Cb208b5BB48db1bcbC9354d1694998864ec63)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x55d4dfb578daA4d60380995ffF7a706471d7c719)
 */
export function useJbethPaymentTerminalRedeemTokensOf<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbethPaymentTerminalAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbethPaymentTerminalABI,
          'redeemTokensOf'
        >['request']['abi'],
        'redeemTokensOf',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'redeemTokensOf'
      }
    : UseContractWriteConfig<
        typeof jbethPaymentTerminalABI,
        'redeemTokensOf',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'redeemTokensOf'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof jbethPaymentTerminalABI,
    'redeemTokensOf',
    TMode
  >({
    abi: jbethPaymentTerminalABI,
    address:
      jbethPaymentTerminalAddress[
        chainId as keyof typeof jbethPaymentTerminalAddress
      ],
    functionName: 'redeemTokensOf',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbethPaymentTerminalABI}__ and `functionName` set to `"renounceOwnership"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x594Cb208b5BB48db1bcbC9354d1694998864ec63)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x55d4dfb578daA4d60380995ffF7a706471d7c719)
 */
export function useJbethPaymentTerminalRenounceOwnership<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbethPaymentTerminalAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbethPaymentTerminalABI,
          'renounceOwnership'
        >['request']['abi'],
        'renounceOwnership',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'renounceOwnership'
      }
    : UseContractWriteConfig<
        typeof jbethPaymentTerminalABI,
        'renounceOwnership',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof jbethPaymentTerminalABI,
    'renounceOwnership',
    TMode
  >({
    abi: jbethPaymentTerminalABI,
    address:
      jbethPaymentTerminalAddress[
        chainId as keyof typeof jbethPaymentTerminalAddress
      ],
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbethPaymentTerminalABI}__ and `functionName` set to `"setFee"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x594Cb208b5BB48db1bcbC9354d1694998864ec63)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x55d4dfb578daA4d60380995ffF7a706471d7c719)
 */
export function useJbethPaymentTerminalSetFee<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbethPaymentTerminalAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbethPaymentTerminalABI,
          'setFee'
        >['request']['abi'],
        'setFee',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'setFee' }
    : UseContractWriteConfig<
        typeof jbethPaymentTerminalABI,
        'setFee',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setFee'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof jbethPaymentTerminalABI, 'setFee', TMode>({
    abi: jbethPaymentTerminalABI,
    address:
      jbethPaymentTerminalAddress[
        chainId as keyof typeof jbethPaymentTerminalAddress
      ],
    functionName: 'setFee',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbethPaymentTerminalABI}__ and `functionName` set to `"setFeeGauge"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x594Cb208b5BB48db1bcbC9354d1694998864ec63)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x55d4dfb578daA4d60380995ffF7a706471d7c719)
 */
export function useJbethPaymentTerminalSetFeeGauge<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbethPaymentTerminalAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbethPaymentTerminalABI,
          'setFeeGauge'
        >['request']['abi'],
        'setFeeGauge',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'setFeeGauge'
      }
    : UseContractWriteConfig<
        typeof jbethPaymentTerminalABI,
        'setFeeGauge',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setFeeGauge'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof jbethPaymentTerminalABI, 'setFeeGauge', TMode>(
    {
      abi: jbethPaymentTerminalABI,
      address:
        jbethPaymentTerminalAddress[
          chainId as keyof typeof jbethPaymentTerminalAddress
        ],
      functionName: 'setFeeGauge',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbethPaymentTerminalABI}__ and `functionName` set to `"setFeelessAddress"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x594Cb208b5BB48db1bcbC9354d1694998864ec63)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x55d4dfb578daA4d60380995ffF7a706471d7c719)
 */
export function useJbethPaymentTerminalSetFeelessAddress<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbethPaymentTerminalAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbethPaymentTerminalABI,
          'setFeelessAddress'
        >['request']['abi'],
        'setFeelessAddress',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'setFeelessAddress'
      }
    : UseContractWriteConfig<
        typeof jbethPaymentTerminalABI,
        'setFeelessAddress',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setFeelessAddress'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof jbethPaymentTerminalABI,
    'setFeelessAddress',
    TMode
  >({
    abi: jbethPaymentTerminalABI,
    address:
      jbethPaymentTerminalAddress[
        chainId as keyof typeof jbethPaymentTerminalAddress
      ],
    functionName: 'setFeelessAddress',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbethPaymentTerminalABI}__ and `functionName` set to `"transferOwnership"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x594Cb208b5BB48db1bcbC9354d1694998864ec63)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x55d4dfb578daA4d60380995ffF7a706471d7c719)
 */
export function useJbethPaymentTerminalTransferOwnership<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbethPaymentTerminalAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbethPaymentTerminalABI,
          'transferOwnership'
        >['request']['abi'],
        'transferOwnership',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'transferOwnership'
      }
    : UseContractWriteConfig<
        typeof jbethPaymentTerminalABI,
        'transferOwnership',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof jbethPaymentTerminalABI,
    'transferOwnership',
    TMode
  >({
    abi: jbethPaymentTerminalABI,
    address:
      jbethPaymentTerminalAddress[
        chainId as keyof typeof jbethPaymentTerminalAddress
      ],
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbethPaymentTerminalABI}__ and `functionName` set to `"useAllowanceOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x594Cb208b5BB48db1bcbC9354d1694998864ec63)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x55d4dfb578daA4d60380995ffF7a706471d7c719)
 */
export function useJbethPaymentTerminalUseAllowanceOf<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbethPaymentTerminalAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbethPaymentTerminalABI,
          'useAllowanceOf'
        >['request']['abi'],
        'useAllowanceOf',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'useAllowanceOf'
      }
    : UseContractWriteConfig<
        typeof jbethPaymentTerminalABI,
        'useAllowanceOf',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'useAllowanceOf'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof jbethPaymentTerminalABI,
    'useAllowanceOf',
    TMode
  >({
    abi: jbethPaymentTerminalABI,
    address:
      jbethPaymentTerminalAddress[
        chainId as keyof typeof jbethPaymentTerminalAddress
      ],
    functionName: 'useAllowanceOf',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbethPaymentTerminalABI}__.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x594Cb208b5BB48db1bcbC9354d1694998864ec63)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x55d4dfb578daA4d60380995ffF7a706471d7c719)
 */
export function usePrepareJbethPaymentTerminalWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof jbethPaymentTerminalABI,
      TFunctionName
    >,
    'abi'
  > & { chainId?: keyof typeof jbethPaymentTerminalAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbethPaymentTerminalABI,
    address:
      jbethPaymentTerminalAddress[
        chainId as keyof typeof jbethPaymentTerminalAddress
      ],
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof jbethPaymentTerminalABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbethPaymentTerminalABI}__ and `functionName` set to `"addToBalanceOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x594Cb208b5BB48db1bcbC9354d1694998864ec63)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x55d4dfb578daA4d60380995ffF7a706471d7c719)
 */
export function usePrepareJbethPaymentTerminalAddToBalanceOf(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof jbethPaymentTerminalABI,
      'addToBalanceOf'
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminalAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbethPaymentTerminalABI,
    address:
      jbethPaymentTerminalAddress[
        chainId as keyof typeof jbethPaymentTerminalAddress
      ],
    functionName: 'addToBalanceOf',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof jbethPaymentTerminalABI,
    'addToBalanceOf'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbethPaymentTerminalABI}__ and `functionName` set to `"distributePayoutsOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x594Cb208b5BB48db1bcbC9354d1694998864ec63)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x55d4dfb578daA4d60380995ffF7a706471d7c719)
 */
export function usePrepareJbethPaymentTerminalDistributePayoutsOf(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof jbethPaymentTerminalABI,
      'distributePayoutsOf'
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminalAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbethPaymentTerminalABI,
    address:
      jbethPaymentTerminalAddress[
        chainId as keyof typeof jbethPaymentTerminalAddress
      ],
    functionName: 'distributePayoutsOf',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof jbethPaymentTerminalABI,
    'distributePayoutsOf'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbethPaymentTerminalABI}__ and `functionName` set to `"migrate"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x594Cb208b5BB48db1bcbC9354d1694998864ec63)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x55d4dfb578daA4d60380995ffF7a706471d7c719)
 */
export function usePrepareJbethPaymentTerminalMigrate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof jbethPaymentTerminalABI, 'migrate'>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminalAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbethPaymentTerminalABI,
    address:
      jbethPaymentTerminalAddress[
        chainId as keyof typeof jbethPaymentTerminalAddress
      ],
    functionName: 'migrate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof jbethPaymentTerminalABI, 'migrate'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbethPaymentTerminalABI}__ and `functionName` set to `"pay"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x594Cb208b5BB48db1bcbC9354d1694998864ec63)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x55d4dfb578daA4d60380995ffF7a706471d7c719)
 */
export function usePrepareJbethPaymentTerminalPay(
  config: Omit<
    UsePrepareContractWriteConfig<typeof jbethPaymentTerminalABI, 'pay'>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminalAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbethPaymentTerminalABI,
    address:
      jbethPaymentTerminalAddress[
        chainId as keyof typeof jbethPaymentTerminalAddress
      ],
    functionName: 'pay',
    ...config,
  } as UsePrepareContractWriteConfig<typeof jbethPaymentTerminalABI, 'pay'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbethPaymentTerminalABI}__ and `functionName` set to `"processFees"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x594Cb208b5BB48db1bcbC9354d1694998864ec63)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x55d4dfb578daA4d60380995ffF7a706471d7c719)
 */
export function usePrepareJbethPaymentTerminalProcessFees(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof jbethPaymentTerminalABI,
      'processFees'
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminalAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbethPaymentTerminalABI,
    address:
      jbethPaymentTerminalAddress[
        chainId as keyof typeof jbethPaymentTerminalAddress
      ],
    functionName: 'processFees',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof jbethPaymentTerminalABI,
    'processFees'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbethPaymentTerminalABI}__ and `functionName` set to `"redeemTokensOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x594Cb208b5BB48db1bcbC9354d1694998864ec63)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x55d4dfb578daA4d60380995ffF7a706471d7c719)
 */
export function usePrepareJbethPaymentTerminalRedeemTokensOf(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof jbethPaymentTerminalABI,
      'redeemTokensOf'
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminalAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbethPaymentTerminalABI,
    address:
      jbethPaymentTerminalAddress[
        chainId as keyof typeof jbethPaymentTerminalAddress
      ],
    functionName: 'redeemTokensOf',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof jbethPaymentTerminalABI,
    'redeemTokensOf'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbethPaymentTerminalABI}__ and `functionName` set to `"renounceOwnership"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x594Cb208b5BB48db1bcbC9354d1694998864ec63)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x55d4dfb578daA4d60380995ffF7a706471d7c719)
 */
export function usePrepareJbethPaymentTerminalRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof jbethPaymentTerminalABI,
      'renounceOwnership'
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminalAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbethPaymentTerminalABI,
    address:
      jbethPaymentTerminalAddress[
        chainId as keyof typeof jbethPaymentTerminalAddress
      ],
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof jbethPaymentTerminalABI,
    'renounceOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbethPaymentTerminalABI}__ and `functionName` set to `"setFee"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x594Cb208b5BB48db1bcbC9354d1694998864ec63)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x55d4dfb578daA4d60380995ffF7a706471d7c719)
 */
export function usePrepareJbethPaymentTerminalSetFee(
  config: Omit<
    UsePrepareContractWriteConfig<typeof jbethPaymentTerminalABI, 'setFee'>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminalAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbethPaymentTerminalABI,
    address:
      jbethPaymentTerminalAddress[
        chainId as keyof typeof jbethPaymentTerminalAddress
      ],
    functionName: 'setFee',
    ...config,
  } as UsePrepareContractWriteConfig<typeof jbethPaymentTerminalABI, 'setFee'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbethPaymentTerminalABI}__ and `functionName` set to `"setFeeGauge"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x594Cb208b5BB48db1bcbC9354d1694998864ec63)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x55d4dfb578daA4d60380995ffF7a706471d7c719)
 */
export function usePrepareJbethPaymentTerminalSetFeeGauge(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof jbethPaymentTerminalABI,
      'setFeeGauge'
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminalAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbethPaymentTerminalABI,
    address:
      jbethPaymentTerminalAddress[
        chainId as keyof typeof jbethPaymentTerminalAddress
      ],
    functionName: 'setFeeGauge',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof jbethPaymentTerminalABI,
    'setFeeGauge'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbethPaymentTerminalABI}__ and `functionName` set to `"setFeelessAddress"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x594Cb208b5BB48db1bcbC9354d1694998864ec63)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x55d4dfb578daA4d60380995ffF7a706471d7c719)
 */
export function usePrepareJbethPaymentTerminalSetFeelessAddress(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof jbethPaymentTerminalABI,
      'setFeelessAddress'
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminalAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbethPaymentTerminalABI,
    address:
      jbethPaymentTerminalAddress[
        chainId as keyof typeof jbethPaymentTerminalAddress
      ],
    functionName: 'setFeelessAddress',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof jbethPaymentTerminalABI,
    'setFeelessAddress'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbethPaymentTerminalABI}__ and `functionName` set to `"transferOwnership"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x594Cb208b5BB48db1bcbC9354d1694998864ec63)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x55d4dfb578daA4d60380995ffF7a706471d7c719)
 */
export function usePrepareJbethPaymentTerminalTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof jbethPaymentTerminalABI,
      'transferOwnership'
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminalAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbethPaymentTerminalABI,
    address:
      jbethPaymentTerminalAddress[
        chainId as keyof typeof jbethPaymentTerminalAddress
      ],
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof jbethPaymentTerminalABI,
    'transferOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbethPaymentTerminalABI}__ and `functionName` set to `"useAllowanceOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x594Cb208b5BB48db1bcbC9354d1694998864ec63)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x55d4dfb578daA4d60380995ffF7a706471d7c719)
 */
export function usePrepareJbethPaymentTerminalUseAllowanceOf(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof jbethPaymentTerminalABI,
      'useAllowanceOf'
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminalAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbethPaymentTerminalABI,
    address:
      jbethPaymentTerminalAddress[
        chainId as keyof typeof jbethPaymentTerminalAddress
      ],
    functionName: 'useAllowanceOf',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof jbethPaymentTerminalABI,
    'useAllowanceOf'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbethPaymentTerminalABI}__.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x594Cb208b5BB48db1bcbC9354d1694998864ec63)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x55d4dfb578daA4d60380995ffF7a706471d7c719)
 */
export function useJbethPaymentTerminalEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof jbethPaymentTerminalABI, TEventName>,
    'abi'
  > & { chainId?: keyof typeof jbethPaymentTerminalAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbethPaymentTerminalABI,
    address:
      jbethPaymentTerminalAddress[
        chainId as keyof typeof jbethPaymentTerminalAddress
      ],
    ...config,
  } as UseContractEventConfig<typeof jbethPaymentTerminalABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbethPaymentTerminalABI}__ and `eventName` set to `"AddToBalance"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x594Cb208b5BB48db1bcbC9354d1694998864ec63)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x55d4dfb578daA4d60380995ffF7a706471d7c719)
 */
export function useJbethPaymentTerminalAddToBalanceEvent(
  config: Omit<
    UseContractEventConfig<typeof jbethPaymentTerminalABI, 'AddToBalance'>,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbethPaymentTerminalAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbethPaymentTerminalABI,
    address:
      jbethPaymentTerminalAddress[
        chainId as keyof typeof jbethPaymentTerminalAddress
      ],
    eventName: 'AddToBalance',
    ...config,
  } as UseContractEventConfig<typeof jbethPaymentTerminalABI, 'AddToBalance'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbethPaymentTerminalABI}__ and `eventName` set to `"DelegateDidPay"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x594Cb208b5BB48db1bcbC9354d1694998864ec63)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x55d4dfb578daA4d60380995ffF7a706471d7c719)
 */
export function useJbethPaymentTerminalDelegateDidPayEvent(
  config: Omit<
    UseContractEventConfig<typeof jbethPaymentTerminalABI, 'DelegateDidPay'>,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbethPaymentTerminalAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbethPaymentTerminalABI,
    address:
      jbethPaymentTerminalAddress[
        chainId as keyof typeof jbethPaymentTerminalAddress
      ],
    eventName: 'DelegateDidPay',
    ...config,
  } as UseContractEventConfig<typeof jbethPaymentTerminalABI, 'DelegateDidPay'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbethPaymentTerminalABI}__ and `eventName` set to `"DelegateDidRedeem"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x594Cb208b5BB48db1bcbC9354d1694998864ec63)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x55d4dfb578daA4d60380995ffF7a706471d7c719)
 */
export function useJbethPaymentTerminalDelegateDidRedeemEvent(
  config: Omit<
    UseContractEventConfig<typeof jbethPaymentTerminalABI, 'DelegateDidRedeem'>,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbethPaymentTerminalAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbethPaymentTerminalABI,
    address:
      jbethPaymentTerminalAddress[
        chainId as keyof typeof jbethPaymentTerminalAddress
      ],
    eventName: 'DelegateDidRedeem',
    ...config,
  } as UseContractEventConfig<
    typeof jbethPaymentTerminalABI,
    'DelegateDidRedeem'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbethPaymentTerminalABI}__ and `eventName` set to `"DistributePayouts"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x594Cb208b5BB48db1bcbC9354d1694998864ec63)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x55d4dfb578daA4d60380995ffF7a706471d7c719)
 */
export function useJbethPaymentTerminalDistributePayoutsEvent(
  config: Omit<
    UseContractEventConfig<typeof jbethPaymentTerminalABI, 'DistributePayouts'>,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbethPaymentTerminalAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbethPaymentTerminalABI,
    address:
      jbethPaymentTerminalAddress[
        chainId as keyof typeof jbethPaymentTerminalAddress
      ],
    eventName: 'DistributePayouts',
    ...config,
  } as UseContractEventConfig<
    typeof jbethPaymentTerminalABI,
    'DistributePayouts'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbethPaymentTerminalABI}__ and `eventName` set to `"DistributeToPayoutSplit"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x594Cb208b5BB48db1bcbC9354d1694998864ec63)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x55d4dfb578daA4d60380995ffF7a706471d7c719)
 */
export function useJbethPaymentTerminalDistributeToPayoutSplitEvent(
  config: Omit<
    UseContractEventConfig<
      typeof jbethPaymentTerminalABI,
      'DistributeToPayoutSplit'
    >,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbethPaymentTerminalAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbethPaymentTerminalABI,
    address:
      jbethPaymentTerminalAddress[
        chainId as keyof typeof jbethPaymentTerminalAddress
      ],
    eventName: 'DistributeToPayoutSplit',
    ...config,
  } as UseContractEventConfig<
    typeof jbethPaymentTerminalABI,
    'DistributeToPayoutSplit'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbethPaymentTerminalABI}__ and `eventName` set to `"HoldFee"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x594Cb208b5BB48db1bcbC9354d1694998864ec63)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x55d4dfb578daA4d60380995ffF7a706471d7c719)
 */
export function useJbethPaymentTerminalHoldFeeEvent(
  config: Omit<
    UseContractEventConfig<typeof jbethPaymentTerminalABI, 'HoldFee'>,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbethPaymentTerminalAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbethPaymentTerminalABI,
    address:
      jbethPaymentTerminalAddress[
        chainId as keyof typeof jbethPaymentTerminalAddress
      ],
    eventName: 'HoldFee',
    ...config,
  } as UseContractEventConfig<typeof jbethPaymentTerminalABI, 'HoldFee'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbethPaymentTerminalABI}__ and `eventName` set to `"Migrate"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x594Cb208b5BB48db1bcbC9354d1694998864ec63)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x55d4dfb578daA4d60380995ffF7a706471d7c719)
 */
export function useJbethPaymentTerminalMigrateEvent(
  config: Omit<
    UseContractEventConfig<typeof jbethPaymentTerminalABI, 'Migrate'>,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbethPaymentTerminalAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbethPaymentTerminalABI,
    address:
      jbethPaymentTerminalAddress[
        chainId as keyof typeof jbethPaymentTerminalAddress
      ],
    eventName: 'Migrate',
    ...config,
  } as UseContractEventConfig<typeof jbethPaymentTerminalABI, 'Migrate'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbethPaymentTerminalABI}__ and `eventName` set to `"OwnershipTransferred"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x594Cb208b5BB48db1bcbC9354d1694998864ec63)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x55d4dfb578daA4d60380995ffF7a706471d7c719)
 */
export function useJbethPaymentTerminalOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<
      typeof jbethPaymentTerminalABI,
      'OwnershipTransferred'
    >,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbethPaymentTerminalAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbethPaymentTerminalABI,
    address:
      jbethPaymentTerminalAddress[
        chainId as keyof typeof jbethPaymentTerminalAddress
      ],
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<
    typeof jbethPaymentTerminalABI,
    'OwnershipTransferred'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbethPaymentTerminalABI}__ and `eventName` set to `"Pay"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x594Cb208b5BB48db1bcbC9354d1694998864ec63)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x55d4dfb578daA4d60380995ffF7a706471d7c719)
 */
export function useJbethPaymentTerminalPayEvent(
  config: Omit<
    UseContractEventConfig<typeof jbethPaymentTerminalABI, 'Pay'>,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbethPaymentTerminalAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbethPaymentTerminalABI,
    address:
      jbethPaymentTerminalAddress[
        chainId as keyof typeof jbethPaymentTerminalAddress
      ],
    eventName: 'Pay',
    ...config,
  } as UseContractEventConfig<typeof jbethPaymentTerminalABI, 'Pay'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbethPaymentTerminalABI}__ and `eventName` set to `"ProcessFee"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x594Cb208b5BB48db1bcbC9354d1694998864ec63)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x55d4dfb578daA4d60380995ffF7a706471d7c719)
 */
export function useJbethPaymentTerminalProcessFeeEvent(
  config: Omit<
    UseContractEventConfig<typeof jbethPaymentTerminalABI, 'ProcessFee'>,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbethPaymentTerminalAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbethPaymentTerminalABI,
    address:
      jbethPaymentTerminalAddress[
        chainId as keyof typeof jbethPaymentTerminalAddress
      ],
    eventName: 'ProcessFee',
    ...config,
  } as UseContractEventConfig<typeof jbethPaymentTerminalABI, 'ProcessFee'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbethPaymentTerminalABI}__ and `eventName` set to `"RedeemTokens"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x594Cb208b5BB48db1bcbC9354d1694998864ec63)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x55d4dfb578daA4d60380995ffF7a706471d7c719)
 */
export function useJbethPaymentTerminalRedeemTokensEvent(
  config: Omit<
    UseContractEventConfig<typeof jbethPaymentTerminalABI, 'RedeemTokens'>,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbethPaymentTerminalAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbethPaymentTerminalABI,
    address:
      jbethPaymentTerminalAddress[
        chainId as keyof typeof jbethPaymentTerminalAddress
      ],
    eventName: 'RedeemTokens',
    ...config,
  } as UseContractEventConfig<typeof jbethPaymentTerminalABI, 'RedeemTokens'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbethPaymentTerminalABI}__ and `eventName` set to `"RefundHeldFees"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x594Cb208b5BB48db1bcbC9354d1694998864ec63)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x55d4dfb578daA4d60380995ffF7a706471d7c719)
 */
export function useJbethPaymentTerminalRefundHeldFeesEvent(
  config: Omit<
    UseContractEventConfig<typeof jbethPaymentTerminalABI, 'RefundHeldFees'>,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbethPaymentTerminalAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbethPaymentTerminalABI,
    address:
      jbethPaymentTerminalAddress[
        chainId as keyof typeof jbethPaymentTerminalAddress
      ],
    eventName: 'RefundHeldFees',
    ...config,
  } as UseContractEventConfig<typeof jbethPaymentTerminalABI, 'RefundHeldFees'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbethPaymentTerminalABI}__ and `eventName` set to `"SetFee"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x594Cb208b5BB48db1bcbC9354d1694998864ec63)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x55d4dfb578daA4d60380995ffF7a706471d7c719)
 */
export function useJbethPaymentTerminalSetFeeEvent(
  config: Omit<
    UseContractEventConfig<typeof jbethPaymentTerminalABI, 'SetFee'>,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbethPaymentTerminalAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbethPaymentTerminalABI,
    address:
      jbethPaymentTerminalAddress[
        chainId as keyof typeof jbethPaymentTerminalAddress
      ],
    eventName: 'SetFee',
    ...config,
  } as UseContractEventConfig<typeof jbethPaymentTerminalABI, 'SetFee'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbethPaymentTerminalABI}__ and `eventName` set to `"SetFeeGauge"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x594Cb208b5BB48db1bcbC9354d1694998864ec63)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x55d4dfb578daA4d60380995ffF7a706471d7c719)
 */
export function useJbethPaymentTerminalSetFeeGaugeEvent(
  config: Omit<
    UseContractEventConfig<typeof jbethPaymentTerminalABI, 'SetFeeGauge'>,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbethPaymentTerminalAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbethPaymentTerminalABI,
    address:
      jbethPaymentTerminalAddress[
        chainId as keyof typeof jbethPaymentTerminalAddress
      ],
    eventName: 'SetFeeGauge',
    ...config,
  } as UseContractEventConfig<typeof jbethPaymentTerminalABI, 'SetFeeGauge'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbethPaymentTerminalABI}__ and `eventName` set to `"SetFeelessAddress"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x594Cb208b5BB48db1bcbC9354d1694998864ec63)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x55d4dfb578daA4d60380995ffF7a706471d7c719)
 */
export function useJbethPaymentTerminalSetFeelessAddressEvent(
  config: Omit<
    UseContractEventConfig<typeof jbethPaymentTerminalABI, 'SetFeelessAddress'>,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbethPaymentTerminalAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbethPaymentTerminalABI,
    address:
      jbethPaymentTerminalAddress[
        chainId as keyof typeof jbethPaymentTerminalAddress
      ],
    eventName: 'SetFeelessAddress',
    ...config,
  } as UseContractEventConfig<
    typeof jbethPaymentTerminalABI,
    'SetFeelessAddress'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbethPaymentTerminalABI}__ and `eventName` set to `"UseAllowance"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x594Cb208b5BB48db1bcbC9354d1694998864ec63)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x55d4dfb578daA4d60380995ffF7a706471d7c719)
 */
export function useJbethPaymentTerminalUseAllowanceEvent(
  config: Omit<
    UseContractEventConfig<typeof jbethPaymentTerminalABI, 'UseAllowance'>,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbethPaymentTerminalAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbethPaymentTerminalABI,
    address:
      jbethPaymentTerminalAddress[
        chainId as keyof typeof jbethPaymentTerminalAddress
      ],
    eventName: 'UseAllowance',
    ...config,
  } as UseContractEventConfig<typeof jbethPaymentTerminalABI, 'UseAllowance'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbethPaymentTerminal3_1ABI}__.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFA391De95Fcbcd3157268B91d8c7af083E607A5C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0baCb87Cf7DbDdde2299D92673A938E067a9eb29)
 */
export function useJbethPaymentTerminal3_1Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof jbethPaymentTerminal3_1ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbethPaymentTerminal3_1ABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbethPaymentTerminal3_1ABI,
    address:
      jbethPaymentTerminal3_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1Address
      ],
    ...config,
  } as UseContractReadConfig<
    typeof jbethPaymentTerminal3_1ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbethPaymentTerminal3_1ABI}__ and `functionName` set to `"acceptsToken"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFA391De95Fcbcd3157268B91d8c7af083E607A5C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0baCb87Cf7DbDdde2299D92673A938E067a9eb29)
 */
export function useJbethPaymentTerminal3_1AcceptsToken<
  TFunctionName extends 'acceptsToken',
  TSelectData = ReadContractResult<
    typeof jbethPaymentTerminal3_1ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbethPaymentTerminal3_1ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbethPaymentTerminal3_1ABI,
    address:
      jbethPaymentTerminal3_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1Address
      ],
    functionName: 'acceptsToken',
    ...config,
  } as UseContractReadConfig<
    typeof jbethPaymentTerminal3_1ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbethPaymentTerminal3_1ABI}__ and `functionName` set to `"baseWeightCurrency"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFA391De95Fcbcd3157268B91d8c7af083E607A5C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0baCb87Cf7DbDdde2299D92673A938E067a9eb29)
 */
export function useJbethPaymentTerminal3_1BaseWeightCurrency<
  TFunctionName extends 'baseWeightCurrency',
  TSelectData = ReadContractResult<
    typeof jbethPaymentTerminal3_1ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbethPaymentTerminal3_1ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbethPaymentTerminal3_1ABI,
    address:
      jbethPaymentTerminal3_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1Address
      ],
    functionName: 'baseWeightCurrency',
    ...config,
  } as UseContractReadConfig<
    typeof jbethPaymentTerminal3_1ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbethPaymentTerminal3_1ABI}__ and `functionName` set to `"currency"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFA391De95Fcbcd3157268B91d8c7af083E607A5C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0baCb87Cf7DbDdde2299D92673A938E067a9eb29)
 */
export function useJbethPaymentTerminal3_1Currency<
  TFunctionName extends 'currency',
  TSelectData = ReadContractResult<
    typeof jbethPaymentTerminal3_1ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbethPaymentTerminal3_1ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbethPaymentTerminal3_1ABI,
    address:
      jbethPaymentTerminal3_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1Address
      ],
    functionName: 'currency',
    ...config,
  } as UseContractReadConfig<
    typeof jbethPaymentTerminal3_1ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbethPaymentTerminal3_1ABI}__ and `functionName` set to `"currencyForToken"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFA391De95Fcbcd3157268B91d8c7af083E607A5C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0baCb87Cf7DbDdde2299D92673A938E067a9eb29)
 */
export function useJbethPaymentTerminal3_1CurrencyForToken<
  TFunctionName extends 'currencyForToken',
  TSelectData = ReadContractResult<
    typeof jbethPaymentTerminal3_1ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbethPaymentTerminal3_1ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbethPaymentTerminal3_1ABI,
    address:
      jbethPaymentTerminal3_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1Address
      ],
    functionName: 'currencyForToken',
    ...config,
  } as UseContractReadConfig<
    typeof jbethPaymentTerminal3_1ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbethPaymentTerminal3_1ABI}__ and `functionName` set to `"currentEthOverflowOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFA391De95Fcbcd3157268B91d8c7af083E607A5C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0baCb87Cf7DbDdde2299D92673A938E067a9eb29)
 */
export function useJbethPaymentTerminal3_1CurrentEthOverflowOf<
  TFunctionName extends 'currentEthOverflowOf',
  TSelectData = ReadContractResult<
    typeof jbethPaymentTerminal3_1ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbethPaymentTerminal3_1ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbethPaymentTerminal3_1ABI,
    address:
      jbethPaymentTerminal3_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1Address
      ],
    functionName: 'currentEthOverflowOf',
    ...config,
  } as UseContractReadConfig<
    typeof jbethPaymentTerminal3_1ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbethPaymentTerminal3_1ABI}__ and `functionName` set to `"decimals"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFA391De95Fcbcd3157268B91d8c7af083E607A5C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0baCb87Cf7DbDdde2299D92673A938E067a9eb29)
 */
export function useJbethPaymentTerminal3_1Decimals<
  TFunctionName extends 'decimals',
  TSelectData = ReadContractResult<
    typeof jbethPaymentTerminal3_1ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbethPaymentTerminal3_1ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbethPaymentTerminal3_1ABI,
    address:
      jbethPaymentTerminal3_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1Address
      ],
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<
    typeof jbethPaymentTerminal3_1ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbethPaymentTerminal3_1ABI}__ and `functionName` set to `"decimalsForToken"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFA391De95Fcbcd3157268B91d8c7af083E607A5C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0baCb87Cf7DbDdde2299D92673A938E067a9eb29)
 */
export function useJbethPaymentTerminal3_1DecimalsForToken<
  TFunctionName extends 'decimalsForToken',
  TSelectData = ReadContractResult<
    typeof jbethPaymentTerminal3_1ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbethPaymentTerminal3_1ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbethPaymentTerminal3_1ABI,
    address:
      jbethPaymentTerminal3_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1Address
      ],
    functionName: 'decimalsForToken',
    ...config,
  } as UseContractReadConfig<
    typeof jbethPaymentTerminal3_1ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbethPaymentTerminal3_1ABI}__ and `functionName` set to `"directory"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFA391De95Fcbcd3157268B91d8c7af083E607A5C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0baCb87Cf7DbDdde2299D92673A938E067a9eb29)
 */
export function useJbethPaymentTerminal3_1Directory<
  TFunctionName extends 'directory',
  TSelectData = ReadContractResult<
    typeof jbethPaymentTerminal3_1ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbethPaymentTerminal3_1ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbethPaymentTerminal3_1ABI,
    address:
      jbethPaymentTerminal3_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1Address
      ],
    functionName: 'directory',
    ...config,
  } as UseContractReadConfig<
    typeof jbethPaymentTerminal3_1ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbethPaymentTerminal3_1ABI}__ and `functionName` set to `"fee"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFA391De95Fcbcd3157268B91d8c7af083E607A5C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0baCb87Cf7DbDdde2299D92673A938E067a9eb29)
 */
export function useJbethPaymentTerminal3_1Fee<
  TFunctionName extends 'fee',
  TSelectData = ReadContractResult<
    typeof jbethPaymentTerminal3_1ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbethPaymentTerminal3_1ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbethPaymentTerminal3_1ABI,
    address:
      jbethPaymentTerminal3_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1Address
      ],
    functionName: 'fee',
    ...config,
  } as UseContractReadConfig<
    typeof jbethPaymentTerminal3_1ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbethPaymentTerminal3_1ABI}__ and `functionName` set to `"feeGauge"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFA391De95Fcbcd3157268B91d8c7af083E607A5C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0baCb87Cf7DbDdde2299D92673A938E067a9eb29)
 */
export function useJbethPaymentTerminal3_1FeeGauge<
  TFunctionName extends 'feeGauge',
  TSelectData = ReadContractResult<
    typeof jbethPaymentTerminal3_1ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbethPaymentTerminal3_1ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbethPaymentTerminal3_1ABI,
    address:
      jbethPaymentTerminal3_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1Address
      ],
    functionName: 'feeGauge',
    ...config,
  } as UseContractReadConfig<
    typeof jbethPaymentTerminal3_1ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbethPaymentTerminal3_1ABI}__ and `functionName` set to `"heldFeesOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFA391De95Fcbcd3157268B91d8c7af083E607A5C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0baCb87Cf7DbDdde2299D92673A938E067a9eb29)
 */
export function useJbethPaymentTerminal3_1HeldFeesOf<
  TFunctionName extends 'heldFeesOf',
  TSelectData = ReadContractResult<
    typeof jbethPaymentTerminal3_1ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbethPaymentTerminal3_1ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbethPaymentTerminal3_1ABI,
    address:
      jbethPaymentTerminal3_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1Address
      ],
    functionName: 'heldFeesOf',
    ...config,
  } as UseContractReadConfig<
    typeof jbethPaymentTerminal3_1ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbethPaymentTerminal3_1ABI}__ and `functionName` set to `"isFeelessAddress"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFA391De95Fcbcd3157268B91d8c7af083E607A5C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0baCb87Cf7DbDdde2299D92673A938E067a9eb29)
 */
export function useJbethPaymentTerminal3_1IsFeelessAddress<
  TFunctionName extends 'isFeelessAddress',
  TSelectData = ReadContractResult<
    typeof jbethPaymentTerminal3_1ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbethPaymentTerminal3_1ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbethPaymentTerminal3_1ABI,
    address:
      jbethPaymentTerminal3_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1Address
      ],
    functionName: 'isFeelessAddress',
    ...config,
  } as UseContractReadConfig<
    typeof jbethPaymentTerminal3_1ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbethPaymentTerminal3_1ABI}__ and `functionName` set to `"operatorStore"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFA391De95Fcbcd3157268B91d8c7af083E607A5C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0baCb87Cf7DbDdde2299D92673A938E067a9eb29)
 */
export function useJbethPaymentTerminal3_1OperatorStore<
  TFunctionName extends 'operatorStore',
  TSelectData = ReadContractResult<
    typeof jbethPaymentTerminal3_1ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbethPaymentTerminal3_1ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbethPaymentTerminal3_1ABI,
    address:
      jbethPaymentTerminal3_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1Address
      ],
    functionName: 'operatorStore',
    ...config,
  } as UseContractReadConfig<
    typeof jbethPaymentTerminal3_1ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbethPaymentTerminal3_1ABI}__ and `functionName` set to `"owner"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFA391De95Fcbcd3157268B91d8c7af083E607A5C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0baCb87Cf7DbDdde2299D92673A938E067a9eb29)
 */
export function useJbethPaymentTerminal3_1Owner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<
    typeof jbethPaymentTerminal3_1ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbethPaymentTerminal3_1ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbethPaymentTerminal3_1ABI,
    address:
      jbethPaymentTerminal3_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1Address
      ],
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<
    typeof jbethPaymentTerminal3_1ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbethPaymentTerminal3_1ABI}__ and `functionName` set to `"payoutSplitsGroup"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFA391De95Fcbcd3157268B91d8c7af083E607A5C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0baCb87Cf7DbDdde2299D92673A938E067a9eb29)
 */
export function useJbethPaymentTerminal3_1PayoutSplitsGroup<
  TFunctionName extends 'payoutSplitsGroup',
  TSelectData = ReadContractResult<
    typeof jbethPaymentTerminal3_1ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbethPaymentTerminal3_1ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbethPaymentTerminal3_1ABI,
    address:
      jbethPaymentTerminal3_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1Address
      ],
    functionName: 'payoutSplitsGroup',
    ...config,
  } as UseContractReadConfig<
    typeof jbethPaymentTerminal3_1ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbethPaymentTerminal3_1ABI}__ and `functionName` set to `"prices"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFA391De95Fcbcd3157268B91d8c7af083E607A5C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0baCb87Cf7DbDdde2299D92673A938E067a9eb29)
 */
export function useJbethPaymentTerminal3_1Prices<
  TFunctionName extends 'prices',
  TSelectData = ReadContractResult<
    typeof jbethPaymentTerminal3_1ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbethPaymentTerminal3_1ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbethPaymentTerminal3_1ABI,
    address:
      jbethPaymentTerminal3_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1Address
      ],
    functionName: 'prices',
    ...config,
  } as UseContractReadConfig<
    typeof jbethPaymentTerminal3_1ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbethPaymentTerminal3_1ABI}__ and `functionName` set to `"projects"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFA391De95Fcbcd3157268B91d8c7af083E607A5C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0baCb87Cf7DbDdde2299D92673A938E067a9eb29)
 */
export function useJbethPaymentTerminal3_1Projects<
  TFunctionName extends 'projects',
  TSelectData = ReadContractResult<
    typeof jbethPaymentTerminal3_1ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbethPaymentTerminal3_1ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbethPaymentTerminal3_1ABI,
    address:
      jbethPaymentTerminal3_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1Address
      ],
    functionName: 'projects',
    ...config,
  } as UseContractReadConfig<
    typeof jbethPaymentTerminal3_1ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbethPaymentTerminal3_1ABI}__ and `functionName` set to `"splitsStore"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFA391De95Fcbcd3157268B91d8c7af083E607A5C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0baCb87Cf7DbDdde2299D92673A938E067a9eb29)
 */
export function useJbethPaymentTerminal3_1SplitsStore<
  TFunctionName extends 'splitsStore',
  TSelectData = ReadContractResult<
    typeof jbethPaymentTerminal3_1ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbethPaymentTerminal3_1ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbethPaymentTerminal3_1ABI,
    address:
      jbethPaymentTerminal3_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1Address
      ],
    functionName: 'splitsStore',
    ...config,
  } as UseContractReadConfig<
    typeof jbethPaymentTerminal3_1ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbethPaymentTerminal3_1ABI}__ and `functionName` set to `"store"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFA391De95Fcbcd3157268B91d8c7af083E607A5C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0baCb87Cf7DbDdde2299D92673A938E067a9eb29)
 */
export function useJbethPaymentTerminal3_1Store<
  TFunctionName extends 'store',
  TSelectData = ReadContractResult<
    typeof jbethPaymentTerminal3_1ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbethPaymentTerminal3_1ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbethPaymentTerminal3_1ABI,
    address:
      jbethPaymentTerminal3_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1Address
      ],
    functionName: 'store',
    ...config,
  } as UseContractReadConfig<
    typeof jbethPaymentTerminal3_1ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbethPaymentTerminal3_1ABI}__ and `functionName` set to `"supportsInterface"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFA391De95Fcbcd3157268B91d8c7af083E607A5C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0baCb87Cf7DbDdde2299D92673A938E067a9eb29)
 */
export function useJbethPaymentTerminal3_1SupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<
    typeof jbethPaymentTerminal3_1ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbethPaymentTerminal3_1ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbethPaymentTerminal3_1ABI,
    address:
      jbethPaymentTerminal3_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1Address
      ],
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof jbethPaymentTerminal3_1ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbethPaymentTerminal3_1ABI}__ and `functionName` set to `"token"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFA391De95Fcbcd3157268B91d8c7af083E607A5C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0baCb87Cf7DbDdde2299D92673A938E067a9eb29)
 */
export function useJbethPaymentTerminal3_1Token<
  TFunctionName extends 'token',
  TSelectData = ReadContractResult<
    typeof jbethPaymentTerminal3_1ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbethPaymentTerminal3_1ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbethPaymentTerminal3_1ABI,
    address:
      jbethPaymentTerminal3_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1Address
      ],
    functionName: 'token',
    ...config,
  } as UseContractReadConfig<
    typeof jbethPaymentTerminal3_1ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbethPaymentTerminal3_1ABI}__.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFA391De95Fcbcd3157268B91d8c7af083E607A5C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0baCb87Cf7DbDdde2299D92673A938E067a9eb29)
 */
export function useJbethPaymentTerminal3_1Write<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbethPaymentTerminal3_1Address,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbethPaymentTerminal3_1ABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      > & { address?: Address; chainId?: TChainId }
    : UseContractWriteConfig<
        typeof jbethPaymentTerminal3_1ABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof jbethPaymentTerminal3_1ABI,
    TFunctionName,
    TMode
  >({
    abi: jbethPaymentTerminal3_1ABI,
    address:
      jbethPaymentTerminal3_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1Address
      ],
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbethPaymentTerminal3_1ABI}__ and `functionName` set to `"addToBalanceOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFA391De95Fcbcd3157268B91d8c7af083E607A5C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0baCb87Cf7DbDdde2299D92673A938E067a9eb29)
 */
export function useJbethPaymentTerminal3_1AddToBalanceOf<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbethPaymentTerminal3_1Address,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbethPaymentTerminal3_1ABI,
          'addToBalanceOf'
        >['request']['abi'],
        'addToBalanceOf',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'addToBalanceOf'
      }
    : UseContractWriteConfig<
        typeof jbethPaymentTerminal3_1ABI,
        'addToBalanceOf',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'addToBalanceOf'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof jbethPaymentTerminal3_1ABI,
    'addToBalanceOf',
    TMode
  >({
    abi: jbethPaymentTerminal3_1ABI,
    address:
      jbethPaymentTerminal3_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1Address
      ],
    functionName: 'addToBalanceOf',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbethPaymentTerminal3_1ABI}__ and `functionName` set to `"distributePayoutsOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFA391De95Fcbcd3157268B91d8c7af083E607A5C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0baCb87Cf7DbDdde2299D92673A938E067a9eb29)
 */
export function useJbethPaymentTerminal3_1DistributePayoutsOf<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbethPaymentTerminal3_1Address,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbethPaymentTerminal3_1ABI,
          'distributePayoutsOf'
        >['request']['abi'],
        'distributePayoutsOf',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'distributePayoutsOf'
      }
    : UseContractWriteConfig<
        typeof jbethPaymentTerminal3_1ABI,
        'distributePayoutsOf',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'distributePayoutsOf'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof jbethPaymentTerminal3_1ABI,
    'distributePayoutsOf',
    TMode
  >({
    abi: jbethPaymentTerminal3_1ABI,
    address:
      jbethPaymentTerminal3_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1Address
      ],
    functionName: 'distributePayoutsOf',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbethPaymentTerminal3_1ABI}__ and `functionName` set to `"migrate"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFA391De95Fcbcd3157268B91d8c7af083E607A5C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0baCb87Cf7DbDdde2299D92673A938E067a9eb29)
 */
export function useJbethPaymentTerminal3_1Migrate<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbethPaymentTerminal3_1Address,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbethPaymentTerminal3_1ABI,
          'migrate'
        >['request']['abi'],
        'migrate',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'migrate' }
    : UseContractWriteConfig<
        typeof jbethPaymentTerminal3_1ABI,
        'migrate',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'migrate'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof jbethPaymentTerminal3_1ABI, 'migrate', TMode>({
    abi: jbethPaymentTerminal3_1ABI,
    address:
      jbethPaymentTerminal3_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1Address
      ],
    functionName: 'migrate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbethPaymentTerminal3_1ABI}__ and `functionName` set to `"pay"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFA391De95Fcbcd3157268B91d8c7af083E607A5C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0baCb87Cf7DbDdde2299D92673A938E067a9eb29)
 */
export function useJbethPaymentTerminal3_1Pay<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbethPaymentTerminal3_1Address,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbethPaymentTerminal3_1ABI,
          'pay'
        >['request']['abi'],
        'pay',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'pay' }
    : UseContractWriteConfig<
        typeof jbethPaymentTerminal3_1ABI,
        'pay',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'pay'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof jbethPaymentTerminal3_1ABI, 'pay', TMode>({
    abi: jbethPaymentTerminal3_1ABI,
    address:
      jbethPaymentTerminal3_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1Address
      ],
    functionName: 'pay',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbethPaymentTerminal3_1ABI}__ and `functionName` set to `"processFees"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFA391De95Fcbcd3157268B91d8c7af083E607A5C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0baCb87Cf7DbDdde2299D92673A938E067a9eb29)
 */
export function useJbethPaymentTerminal3_1ProcessFees<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbethPaymentTerminal3_1Address,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbethPaymentTerminal3_1ABI,
          'processFees'
        >['request']['abi'],
        'processFees',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'processFees'
      }
    : UseContractWriteConfig<
        typeof jbethPaymentTerminal3_1ABI,
        'processFees',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'processFees'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof jbethPaymentTerminal3_1ABI,
    'processFees',
    TMode
  >({
    abi: jbethPaymentTerminal3_1ABI,
    address:
      jbethPaymentTerminal3_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1Address
      ],
    functionName: 'processFees',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbethPaymentTerminal3_1ABI}__ and `functionName` set to `"redeemTokensOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFA391De95Fcbcd3157268B91d8c7af083E607A5C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0baCb87Cf7DbDdde2299D92673A938E067a9eb29)
 */
export function useJbethPaymentTerminal3_1RedeemTokensOf<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbethPaymentTerminal3_1Address,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbethPaymentTerminal3_1ABI,
          'redeemTokensOf'
        >['request']['abi'],
        'redeemTokensOf',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'redeemTokensOf'
      }
    : UseContractWriteConfig<
        typeof jbethPaymentTerminal3_1ABI,
        'redeemTokensOf',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'redeemTokensOf'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof jbethPaymentTerminal3_1ABI,
    'redeemTokensOf',
    TMode
  >({
    abi: jbethPaymentTerminal3_1ABI,
    address:
      jbethPaymentTerminal3_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1Address
      ],
    functionName: 'redeemTokensOf',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbethPaymentTerminal3_1ABI}__ and `functionName` set to `"renounceOwnership"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFA391De95Fcbcd3157268B91d8c7af083E607A5C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0baCb87Cf7DbDdde2299D92673A938E067a9eb29)
 */
export function useJbethPaymentTerminal3_1RenounceOwnership<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbethPaymentTerminal3_1Address,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbethPaymentTerminal3_1ABI,
          'renounceOwnership'
        >['request']['abi'],
        'renounceOwnership',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'renounceOwnership'
      }
    : UseContractWriteConfig<
        typeof jbethPaymentTerminal3_1ABI,
        'renounceOwnership',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof jbethPaymentTerminal3_1ABI,
    'renounceOwnership',
    TMode
  >({
    abi: jbethPaymentTerminal3_1ABI,
    address:
      jbethPaymentTerminal3_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1Address
      ],
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbethPaymentTerminal3_1ABI}__ and `functionName` set to `"setFee"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFA391De95Fcbcd3157268B91d8c7af083E607A5C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0baCb87Cf7DbDdde2299D92673A938E067a9eb29)
 */
export function useJbethPaymentTerminal3_1SetFee<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbethPaymentTerminal3_1Address,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbethPaymentTerminal3_1ABI,
          'setFee'
        >['request']['abi'],
        'setFee',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'setFee' }
    : UseContractWriteConfig<
        typeof jbethPaymentTerminal3_1ABI,
        'setFee',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setFee'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof jbethPaymentTerminal3_1ABI, 'setFee', TMode>({
    abi: jbethPaymentTerminal3_1ABI,
    address:
      jbethPaymentTerminal3_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1Address
      ],
    functionName: 'setFee',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbethPaymentTerminal3_1ABI}__ and `functionName` set to `"setFeeGauge"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFA391De95Fcbcd3157268B91d8c7af083E607A5C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0baCb87Cf7DbDdde2299D92673A938E067a9eb29)
 */
export function useJbethPaymentTerminal3_1SetFeeGauge<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbethPaymentTerminal3_1Address,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbethPaymentTerminal3_1ABI,
          'setFeeGauge'
        >['request']['abi'],
        'setFeeGauge',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'setFeeGauge'
      }
    : UseContractWriteConfig<
        typeof jbethPaymentTerminal3_1ABI,
        'setFeeGauge',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setFeeGauge'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof jbethPaymentTerminal3_1ABI,
    'setFeeGauge',
    TMode
  >({
    abi: jbethPaymentTerminal3_1ABI,
    address:
      jbethPaymentTerminal3_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1Address
      ],
    functionName: 'setFeeGauge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbethPaymentTerminal3_1ABI}__ and `functionName` set to `"setFeelessAddress"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFA391De95Fcbcd3157268B91d8c7af083E607A5C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0baCb87Cf7DbDdde2299D92673A938E067a9eb29)
 */
export function useJbethPaymentTerminal3_1SetFeelessAddress<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbethPaymentTerminal3_1Address,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbethPaymentTerminal3_1ABI,
          'setFeelessAddress'
        >['request']['abi'],
        'setFeelessAddress',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'setFeelessAddress'
      }
    : UseContractWriteConfig<
        typeof jbethPaymentTerminal3_1ABI,
        'setFeelessAddress',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setFeelessAddress'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof jbethPaymentTerminal3_1ABI,
    'setFeelessAddress',
    TMode
  >({
    abi: jbethPaymentTerminal3_1ABI,
    address:
      jbethPaymentTerminal3_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1Address
      ],
    functionName: 'setFeelessAddress',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbethPaymentTerminal3_1ABI}__ and `functionName` set to `"transferOwnership"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFA391De95Fcbcd3157268B91d8c7af083E607A5C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0baCb87Cf7DbDdde2299D92673A938E067a9eb29)
 */
export function useJbethPaymentTerminal3_1TransferOwnership<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbethPaymentTerminal3_1Address,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbethPaymentTerminal3_1ABI,
          'transferOwnership'
        >['request']['abi'],
        'transferOwnership',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'transferOwnership'
      }
    : UseContractWriteConfig<
        typeof jbethPaymentTerminal3_1ABI,
        'transferOwnership',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof jbethPaymentTerminal3_1ABI,
    'transferOwnership',
    TMode
  >({
    abi: jbethPaymentTerminal3_1ABI,
    address:
      jbethPaymentTerminal3_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1Address
      ],
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbethPaymentTerminal3_1ABI}__ and `functionName` set to `"useAllowanceOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFA391De95Fcbcd3157268B91d8c7af083E607A5C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0baCb87Cf7DbDdde2299D92673A938E067a9eb29)
 */
export function useJbethPaymentTerminal3_1UseAllowanceOf<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbethPaymentTerminal3_1Address,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbethPaymentTerminal3_1ABI,
          'useAllowanceOf'
        >['request']['abi'],
        'useAllowanceOf',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'useAllowanceOf'
      }
    : UseContractWriteConfig<
        typeof jbethPaymentTerminal3_1ABI,
        'useAllowanceOf',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'useAllowanceOf'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof jbethPaymentTerminal3_1ABI,
    'useAllowanceOf',
    TMode
  >({
    abi: jbethPaymentTerminal3_1ABI,
    address:
      jbethPaymentTerminal3_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1Address
      ],
    functionName: 'useAllowanceOf',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbethPaymentTerminal3_1ABI}__.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFA391De95Fcbcd3157268B91d8c7af083E607A5C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0baCb87Cf7DbDdde2299D92673A938E067a9eb29)
 */
export function usePrepareJbethPaymentTerminal3_1Write<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof jbethPaymentTerminal3_1ABI,
      TFunctionName
    >,
    'abi'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbethPaymentTerminal3_1ABI,
    address:
      jbethPaymentTerminal3_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1Address
      ],
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof jbethPaymentTerminal3_1ABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbethPaymentTerminal3_1ABI}__ and `functionName` set to `"addToBalanceOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFA391De95Fcbcd3157268B91d8c7af083E607A5C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0baCb87Cf7DbDdde2299D92673A938E067a9eb29)
 */
export function usePrepareJbethPaymentTerminal3_1AddToBalanceOf(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof jbethPaymentTerminal3_1ABI,
      'addToBalanceOf'
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbethPaymentTerminal3_1ABI,
    address:
      jbethPaymentTerminal3_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1Address
      ],
    functionName: 'addToBalanceOf',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof jbethPaymentTerminal3_1ABI,
    'addToBalanceOf'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbethPaymentTerminal3_1ABI}__ and `functionName` set to `"distributePayoutsOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFA391De95Fcbcd3157268B91d8c7af083E607A5C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0baCb87Cf7DbDdde2299D92673A938E067a9eb29)
 */
export function usePrepareJbethPaymentTerminal3_1DistributePayoutsOf(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof jbethPaymentTerminal3_1ABI,
      'distributePayoutsOf'
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbethPaymentTerminal3_1ABI,
    address:
      jbethPaymentTerminal3_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1Address
      ],
    functionName: 'distributePayoutsOf',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof jbethPaymentTerminal3_1ABI,
    'distributePayoutsOf'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbethPaymentTerminal3_1ABI}__ and `functionName` set to `"migrate"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFA391De95Fcbcd3157268B91d8c7af083E607A5C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0baCb87Cf7DbDdde2299D92673A938E067a9eb29)
 */
export function usePrepareJbethPaymentTerminal3_1Migrate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof jbethPaymentTerminal3_1ABI, 'migrate'>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbethPaymentTerminal3_1ABI,
    address:
      jbethPaymentTerminal3_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1Address
      ],
    functionName: 'migrate',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof jbethPaymentTerminal3_1ABI,
    'migrate'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbethPaymentTerminal3_1ABI}__ and `functionName` set to `"pay"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFA391De95Fcbcd3157268B91d8c7af083E607A5C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0baCb87Cf7DbDdde2299D92673A938E067a9eb29)
 */
export function usePrepareJbethPaymentTerminal3_1Pay(
  config: Omit<
    UsePrepareContractWriteConfig<typeof jbethPaymentTerminal3_1ABI, 'pay'>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbethPaymentTerminal3_1ABI,
    address:
      jbethPaymentTerminal3_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1Address
      ],
    functionName: 'pay',
    ...config,
  } as UsePrepareContractWriteConfig<typeof jbethPaymentTerminal3_1ABI, 'pay'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbethPaymentTerminal3_1ABI}__ and `functionName` set to `"processFees"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFA391De95Fcbcd3157268B91d8c7af083E607A5C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0baCb87Cf7DbDdde2299D92673A938E067a9eb29)
 */
export function usePrepareJbethPaymentTerminal3_1ProcessFees(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof jbethPaymentTerminal3_1ABI,
      'processFees'
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbethPaymentTerminal3_1ABI,
    address:
      jbethPaymentTerminal3_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1Address
      ],
    functionName: 'processFees',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof jbethPaymentTerminal3_1ABI,
    'processFees'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbethPaymentTerminal3_1ABI}__ and `functionName` set to `"redeemTokensOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFA391De95Fcbcd3157268B91d8c7af083E607A5C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0baCb87Cf7DbDdde2299D92673A938E067a9eb29)
 */
export function usePrepareJbethPaymentTerminal3_1RedeemTokensOf(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof jbethPaymentTerminal3_1ABI,
      'redeemTokensOf'
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbethPaymentTerminal3_1ABI,
    address:
      jbethPaymentTerminal3_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1Address
      ],
    functionName: 'redeemTokensOf',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof jbethPaymentTerminal3_1ABI,
    'redeemTokensOf'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbethPaymentTerminal3_1ABI}__ and `functionName` set to `"renounceOwnership"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFA391De95Fcbcd3157268B91d8c7af083E607A5C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0baCb87Cf7DbDdde2299D92673A938E067a9eb29)
 */
export function usePrepareJbethPaymentTerminal3_1RenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof jbethPaymentTerminal3_1ABI,
      'renounceOwnership'
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbethPaymentTerminal3_1ABI,
    address:
      jbethPaymentTerminal3_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1Address
      ],
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof jbethPaymentTerminal3_1ABI,
    'renounceOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbethPaymentTerminal3_1ABI}__ and `functionName` set to `"setFee"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFA391De95Fcbcd3157268B91d8c7af083E607A5C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0baCb87Cf7DbDdde2299D92673A938E067a9eb29)
 */
export function usePrepareJbethPaymentTerminal3_1SetFee(
  config: Omit<
    UsePrepareContractWriteConfig<typeof jbethPaymentTerminal3_1ABI, 'setFee'>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbethPaymentTerminal3_1ABI,
    address:
      jbethPaymentTerminal3_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1Address
      ],
    functionName: 'setFee',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof jbethPaymentTerminal3_1ABI,
    'setFee'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbethPaymentTerminal3_1ABI}__ and `functionName` set to `"setFeeGauge"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFA391De95Fcbcd3157268B91d8c7af083E607A5C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0baCb87Cf7DbDdde2299D92673A938E067a9eb29)
 */
export function usePrepareJbethPaymentTerminal3_1SetFeeGauge(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof jbethPaymentTerminal3_1ABI,
      'setFeeGauge'
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbethPaymentTerminal3_1ABI,
    address:
      jbethPaymentTerminal3_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1Address
      ],
    functionName: 'setFeeGauge',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof jbethPaymentTerminal3_1ABI,
    'setFeeGauge'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbethPaymentTerminal3_1ABI}__ and `functionName` set to `"setFeelessAddress"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFA391De95Fcbcd3157268B91d8c7af083E607A5C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0baCb87Cf7DbDdde2299D92673A938E067a9eb29)
 */
export function usePrepareJbethPaymentTerminal3_1SetFeelessAddress(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof jbethPaymentTerminal3_1ABI,
      'setFeelessAddress'
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbethPaymentTerminal3_1ABI,
    address:
      jbethPaymentTerminal3_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1Address
      ],
    functionName: 'setFeelessAddress',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof jbethPaymentTerminal3_1ABI,
    'setFeelessAddress'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbethPaymentTerminal3_1ABI}__ and `functionName` set to `"transferOwnership"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFA391De95Fcbcd3157268B91d8c7af083E607A5C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0baCb87Cf7DbDdde2299D92673A938E067a9eb29)
 */
export function usePrepareJbethPaymentTerminal3_1TransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof jbethPaymentTerminal3_1ABI,
      'transferOwnership'
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbethPaymentTerminal3_1ABI,
    address:
      jbethPaymentTerminal3_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1Address
      ],
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof jbethPaymentTerminal3_1ABI,
    'transferOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbethPaymentTerminal3_1ABI}__ and `functionName` set to `"useAllowanceOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFA391De95Fcbcd3157268B91d8c7af083E607A5C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0baCb87Cf7DbDdde2299D92673A938E067a9eb29)
 */
export function usePrepareJbethPaymentTerminal3_1UseAllowanceOf(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof jbethPaymentTerminal3_1ABI,
      'useAllowanceOf'
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbethPaymentTerminal3_1ABI,
    address:
      jbethPaymentTerminal3_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1Address
      ],
    functionName: 'useAllowanceOf',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof jbethPaymentTerminal3_1ABI,
    'useAllowanceOf'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbethPaymentTerminal3_1ABI}__.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFA391De95Fcbcd3157268B91d8c7af083E607A5C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0baCb87Cf7DbDdde2299D92673A938E067a9eb29)
 */
export function useJbethPaymentTerminal3_1Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof jbethPaymentTerminal3_1ABI, TEventName>,
    'abi'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbethPaymentTerminal3_1ABI,
    address:
      jbethPaymentTerminal3_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1Address
      ],
    ...config,
  } as UseContractEventConfig<typeof jbethPaymentTerminal3_1ABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbethPaymentTerminal3_1ABI}__ and `eventName` set to `"AddToBalance"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFA391De95Fcbcd3157268B91d8c7af083E607A5C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0baCb87Cf7DbDdde2299D92673A938E067a9eb29)
 */
export function useJbethPaymentTerminal3_1AddToBalanceEvent(
  config: Omit<
    UseContractEventConfig<typeof jbethPaymentTerminal3_1ABI, 'AddToBalance'>,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbethPaymentTerminal3_1ABI,
    address:
      jbethPaymentTerminal3_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1Address
      ],
    eventName: 'AddToBalance',
    ...config,
  } as UseContractEventConfig<
    typeof jbethPaymentTerminal3_1ABI,
    'AddToBalance'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbethPaymentTerminal3_1ABI}__ and `eventName` set to `"DelegateDidPay"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFA391De95Fcbcd3157268B91d8c7af083E607A5C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0baCb87Cf7DbDdde2299D92673A938E067a9eb29)
 */
export function useJbethPaymentTerminal3_1DelegateDidPayEvent(
  config: Omit<
    UseContractEventConfig<typeof jbethPaymentTerminal3_1ABI, 'DelegateDidPay'>,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbethPaymentTerminal3_1ABI,
    address:
      jbethPaymentTerminal3_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1Address
      ],
    eventName: 'DelegateDidPay',
    ...config,
  } as UseContractEventConfig<
    typeof jbethPaymentTerminal3_1ABI,
    'DelegateDidPay'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbethPaymentTerminal3_1ABI}__ and `eventName` set to `"DelegateDidRedeem"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFA391De95Fcbcd3157268B91d8c7af083E607A5C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0baCb87Cf7DbDdde2299D92673A938E067a9eb29)
 */
export function useJbethPaymentTerminal3_1DelegateDidRedeemEvent(
  config: Omit<
    UseContractEventConfig<
      typeof jbethPaymentTerminal3_1ABI,
      'DelegateDidRedeem'
    >,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbethPaymentTerminal3_1ABI,
    address:
      jbethPaymentTerminal3_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1Address
      ],
    eventName: 'DelegateDidRedeem',
    ...config,
  } as UseContractEventConfig<
    typeof jbethPaymentTerminal3_1ABI,
    'DelegateDidRedeem'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbethPaymentTerminal3_1ABI}__ and `eventName` set to `"DistributePayouts"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFA391De95Fcbcd3157268B91d8c7af083E607A5C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0baCb87Cf7DbDdde2299D92673A938E067a9eb29)
 */
export function useJbethPaymentTerminal3_1DistributePayoutsEvent(
  config: Omit<
    UseContractEventConfig<
      typeof jbethPaymentTerminal3_1ABI,
      'DistributePayouts'
    >,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbethPaymentTerminal3_1ABI,
    address:
      jbethPaymentTerminal3_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1Address
      ],
    eventName: 'DistributePayouts',
    ...config,
  } as UseContractEventConfig<
    typeof jbethPaymentTerminal3_1ABI,
    'DistributePayouts'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbethPaymentTerminal3_1ABI}__ and `eventName` set to `"DistributeToPayoutSplit"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFA391De95Fcbcd3157268B91d8c7af083E607A5C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0baCb87Cf7DbDdde2299D92673A938E067a9eb29)
 */
export function useJbethPaymentTerminal3_1DistributeToPayoutSplitEvent(
  config: Omit<
    UseContractEventConfig<
      typeof jbethPaymentTerminal3_1ABI,
      'DistributeToPayoutSplit'
    >,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbethPaymentTerminal3_1ABI,
    address:
      jbethPaymentTerminal3_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1Address
      ],
    eventName: 'DistributeToPayoutSplit',
    ...config,
  } as UseContractEventConfig<
    typeof jbethPaymentTerminal3_1ABI,
    'DistributeToPayoutSplit'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbethPaymentTerminal3_1ABI}__ and `eventName` set to `"FeeReverted"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFA391De95Fcbcd3157268B91d8c7af083E607A5C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0baCb87Cf7DbDdde2299D92673A938E067a9eb29)
 */
export function useJbethPaymentTerminal3_1FeeRevertedEvent(
  config: Omit<
    UseContractEventConfig<typeof jbethPaymentTerminal3_1ABI, 'FeeReverted'>,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbethPaymentTerminal3_1ABI,
    address:
      jbethPaymentTerminal3_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1Address
      ],
    eventName: 'FeeReverted',
    ...config,
  } as UseContractEventConfig<typeof jbethPaymentTerminal3_1ABI, 'FeeReverted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbethPaymentTerminal3_1ABI}__ and `eventName` set to `"HoldFee"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFA391De95Fcbcd3157268B91d8c7af083E607A5C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0baCb87Cf7DbDdde2299D92673A938E067a9eb29)
 */
export function useJbethPaymentTerminal3_1HoldFeeEvent(
  config: Omit<
    UseContractEventConfig<typeof jbethPaymentTerminal3_1ABI, 'HoldFee'>,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbethPaymentTerminal3_1ABI,
    address:
      jbethPaymentTerminal3_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1Address
      ],
    eventName: 'HoldFee',
    ...config,
  } as UseContractEventConfig<typeof jbethPaymentTerminal3_1ABI, 'HoldFee'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbethPaymentTerminal3_1ABI}__ and `eventName` set to `"Migrate"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFA391De95Fcbcd3157268B91d8c7af083E607A5C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0baCb87Cf7DbDdde2299D92673A938E067a9eb29)
 */
export function useJbethPaymentTerminal3_1MigrateEvent(
  config: Omit<
    UseContractEventConfig<typeof jbethPaymentTerminal3_1ABI, 'Migrate'>,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbethPaymentTerminal3_1ABI,
    address:
      jbethPaymentTerminal3_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1Address
      ],
    eventName: 'Migrate',
    ...config,
  } as UseContractEventConfig<typeof jbethPaymentTerminal3_1ABI, 'Migrate'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbethPaymentTerminal3_1ABI}__ and `eventName` set to `"OwnershipTransferred"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFA391De95Fcbcd3157268B91d8c7af083E607A5C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0baCb87Cf7DbDdde2299D92673A938E067a9eb29)
 */
export function useJbethPaymentTerminal3_1OwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<
      typeof jbethPaymentTerminal3_1ABI,
      'OwnershipTransferred'
    >,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbethPaymentTerminal3_1ABI,
    address:
      jbethPaymentTerminal3_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1Address
      ],
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<
    typeof jbethPaymentTerminal3_1ABI,
    'OwnershipTransferred'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbethPaymentTerminal3_1ABI}__ and `eventName` set to `"Pay"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFA391De95Fcbcd3157268B91d8c7af083E607A5C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0baCb87Cf7DbDdde2299D92673A938E067a9eb29)
 */
export function useJbethPaymentTerminal3_1PayEvent(
  config: Omit<
    UseContractEventConfig<typeof jbethPaymentTerminal3_1ABI, 'Pay'>,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbethPaymentTerminal3_1ABI,
    address:
      jbethPaymentTerminal3_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1Address
      ],
    eventName: 'Pay',
    ...config,
  } as UseContractEventConfig<typeof jbethPaymentTerminal3_1ABI, 'Pay'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbethPaymentTerminal3_1ABI}__ and `eventName` set to `"PayoutReverted"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFA391De95Fcbcd3157268B91d8c7af083E607A5C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0baCb87Cf7DbDdde2299D92673A938E067a9eb29)
 */
export function useJbethPaymentTerminal3_1PayoutRevertedEvent(
  config: Omit<
    UseContractEventConfig<typeof jbethPaymentTerminal3_1ABI, 'PayoutReverted'>,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbethPaymentTerminal3_1ABI,
    address:
      jbethPaymentTerminal3_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1Address
      ],
    eventName: 'PayoutReverted',
    ...config,
  } as UseContractEventConfig<
    typeof jbethPaymentTerminal3_1ABI,
    'PayoutReverted'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbethPaymentTerminal3_1ABI}__ and `eventName` set to `"ProcessFee"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFA391De95Fcbcd3157268B91d8c7af083E607A5C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0baCb87Cf7DbDdde2299D92673A938E067a9eb29)
 */
export function useJbethPaymentTerminal3_1ProcessFeeEvent(
  config: Omit<
    UseContractEventConfig<typeof jbethPaymentTerminal3_1ABI, 'ProcessFee'>,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbethPaymentTerminal3_1ABI,
    address:
      jbethPaymentTerminal3_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1Address
      ],
    eventName: 'ProcessFee',
    ...config,
  } as UseContractEventConfig<typeof jbethPaymentTerminal3_1ABI, 'ProcessFee'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbethPaymentTerminal3_1ABI}__ and `eventName` set to `"RedeemTokens"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFA391De95Fcbcd3157268B91d8c7af083E607A5C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0baCb87Cf7DbDdde2299D92673A938E067a9eb29)
 */
export function useJbethPaymentTerminal3_1RedeemTokensEvent(
  config: Omit<
    UseContractEventConfig<typeof jbethPaymentTerminal3_1ABI, 'RedeemTokens'>,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbethPaymentTerminal3_1ABI,
    address:
      jbethPaymentTerminal3_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1Address
      ],
    eventName: 'RedeemTokens',
    ...config,
  } as UseContractEventConfig<
    typeof jbethPaymentTerminal3_1ABI,
    'RedeemTokens'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbethPaymentTerminal3_1ABI}__ and `eventName` set to `"RefundHeldFees"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFA391De95Fcbcd3157268B91d8c7af083E607A5C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0baCb87Cf7DbDdde2299D92673A938E067a9eb29)
 */
export function useJbethPaymentTerminal3_1RefundHeldFeesEvent(
  config: Omit<
    UseContractEventConfig<typeof jbethPaymentTerminal3_1ABI, 'RefundHeldFees'>,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbethPaymentTerminal3_1ABI,
    address:
      jbethPaymentTerminal3_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1Address
      ],
    eventName: 'RefundHeldFees',
    ...config,
  } as UseContractEventConfig<
    typeof jbethPaymentTerminal3_1ABI,
    'RefundHeldFees'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbethPaymentTerminal3_1ABI}__ and `eventName` set to `"SetFee"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFA391De95Fcbcd3157268B91d8c7af083E607A5C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0baCb87Cf7DbDdde2299D92673A938E067a9eb29)
 */
export function useJbethPaymentTerminal3_1SetFeeEvent(
  config: Omit<
    UseContractEventConfig<typeof jbethPaymentTerminal3_1ABI, 'SetFee'>,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbethPaymentTerminal3_1ABI,
    address:
      jbethPaymentTerminal3_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1Address
      ],
    eventName: 'SetFee',
    ...config,
  } as UseContractEventConfig<typeof jbethPaymentTerminal3_1ABI, 'SetFee'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbethPaymentTerminal3_1ABI}__ and `eventName` set to `"SetFeeGauge"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFA391De95Fcbcd3157268B91d8c7af083E607A5C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0baCb87Cf7DbDdde2299D92673A938E067a9eb29)
 */
export function useJbethPaymentTerminal3_1SetFeeGaugeEvent(
  config: Omit<
    UseContractEventConfig<typeof jbethPaymentTerminal3_1ABI, 'SetFeeGauge'>,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbethPaymentTerminal3_1ABI,
    address:
      jbethPaymentTerminal3_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1Address
      ],
    eventName: 'SetFeeGauge',
    ...config,
  } as UseContractEventConfig<typeof jbethPaymentTerminal3_1ABI, 'SetFeeGauge'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbethPaymentTerminal3_1ABI}__ and `eventName` set to `"SetFeelessAddress"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFA391De95Fcbcd3157268B91d8c7af083E607A5C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0baCb87Cf7DbDdde2299D92673A938E067a9eb29)
 */
export function useJbethPaymentTerminal3_1SetFeelessAddressEvent(
  config: Omit<
    UseContractEventConfig<
      typeof jbethPaymentTerminal3_1ABI,
      'SetFeelessAddress'
    >,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbethPaymentTerminal3_1ABI,
    address:
      jbethPaymentTerminal3_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1Address
      ],
    eventName: 'SetFeelessAddress',
    ...config,
  } as UseContractEventConfig<
    typeof jbethPaymentTerminal3_1ABI,
    'SetFeelessAddress'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbethPaymentTerminal3_1ABI}__ and `eventName` set to `"UseAllowance"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xFA391De95Fcbcd3157268B91d8c7af083E607A5C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x0baCb87Cf7DbDdde2299D92673A938E067a9eb29)
 */
export function useJbethPaymentTerminal3_1UseAllowanceEvent(
  config: Omit<
    UseContractEventConfig<typeof jbethPaymentTerminal3_1ABI, 'UseAllowance'>,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbethPaymentTerminal3_1ABI,
    address:
      jbethPaymentTerminal3_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1Address
      ],
    eventName: 'UseAllowance',
    ...config,
  } as UseContractEventConfig<
    typeof jbethPaymentTerminal3_1ABI,
    'UseAllowance'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbethPaymentTerminal3_1_1ABI}__.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x457cD63bee88ac01f3cD4a67D5DCc921D8C0D573)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x82129d4109625F94582bDdF6101a8Cd1a27919f5)
 */
export function useJbethPaymentTerminal3_1_1Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof jbethPaymentTerminal3_1_1ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbethPaymentTerminal3_1_1ABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbethPaymentTerminal3_1_1ABI,
    address:
      jbethPaymentTerminal3_1_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_1Address
      ],
    ...config,
  } as UseContractReadConfig<
    typeof jbethPaymentTerminal3_1_1ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbethPaymentTerminal3_1_1ABI}__ and `functionName` set to `"acceptsToken"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x457cD63bee88ac01f3cD4a67D5DCc921D8C0D573)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x82129d4109625F94582bDdF6101a8Cd1a27919f5)
 */
export function useJbethPaymentTerminal3_1_1AcceptsToken<
  TFunctionName extends 'acceptsToken',
  TSelectData = ReadContractResult<
    typeof jbethPaymentTerminal3_1_1ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbethPaymentTerminal3_1_1ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbethPaymentTerminal3_1_1ABI,
    address:
      jbethPaymentTerminal3_1_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_1Address
      ],
    functionName: 'acceptsToken',
    ...config,
  } as UseContractReadConfig<
    typeof jbethPaymentTerminal3_1_1ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbethPaymentTerminal3_1_1ABI}__ and `functionName` set to `"baseWeightCurrency"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x457cD63bee88ac01f3cD4a67D5DCc921D8C0D573)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x82129d4109625F94582bDdF6101a8Cd1a27919f5)
 */
export function useJbethPaymentTerminal3_1_1BaseWeightCurrency<
  TFunctionName extends 'baseWeightCurrency',
  TSelectData = ReadContractResult<
    typeof jbethPaymentTerminal3_1_1ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbethPaymentTerminal3_1_1ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbethPaymentTerminal3_1_1ABI,
    address:
      jbethPaymentTerminal3_1_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_1Address
      ],
    functionName: 'baseWeightCurrency',
    ...config,
  } as UseContractReadConfig<
    typeof jbethPaymentTerminal3_1_1ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbethPaymentTerminal3_1_1ABI}__ and `functionName` set to `"currency"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x457cD63bee88ac01f3cD4a67D5DCc921D8C0D573)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x82129d4109625F94582bDdF6101a8Cd1a27919f5)
 */
export function useJbethPaymentTerminal3_1_1Currency<
  TFunctionName extends 'currency',
  TSelectData = ReadContractResult<
    typeof jbethPaymentTerminal3_1_1ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbethPaymentTerminal3_1_1ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbethPaymentTerminal3_1_1ABI,
    address:
      jbethPaymentTerminal3_1_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_1Address
      ],
    functionName: 'currency',
    ...config,
  } as UseContractReadConfig<
    typeof jbethPaymentTerminal3_1_1ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbethPaymentTerminal3_1_1ABI}__ and `functionName` set to `"currencyForToken"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x457cD63bee88ac01f3cD4a67D5DCc921D8C0D573)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x82129d4109625F94582bDdF6101a8Cd1a27919f5)
 */
export function useJbethPaymentTerminal3_1_1CurrencyForToken<
  TFunctionName extends 'currencyForToken',
  TSelectData = ReadContractResult<
    typeof jbethPaymentTerminal3_1_1ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbethPaymentTerminal3_1_1ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbethPaymentTerminal3_1_1ABI,
    address:
      jbethPaymentTerminal3_1_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_1Address
      ],
    functionName: 'currencyForToken',
    ...config,
  } as UseContractReadConfig<
    typeof jbethPaymentTerminal3_1_1ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbethPaymentTerminal3_1_1ABI}__ and `functionName` set to `"currentEthOverflowOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x457cD63bee88ac01f3cD4a67D5DCc921D8C0D573)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x82129d4109625F94582bDdF6101a8Cd1a27919f5)
 */
export function useJbethPaymentTerminal3_1_1CurrentEthOverflowOf<
  TFunctionName extends 'currentEthOverflowOf',
  TSelectData = ReadContractResult<
    typeof jbethPaymentTerminal3_1_1ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbethPaymentTerminal3_1_1ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbethPaymentTerminal3_1_1ABI,
    address:
      jbethPaymentTerminal3_1_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_1Address
      ],
    functionName: 'currentEthOverflowOf',
    ...config,
  } as UseContractReadConfig<
    typeof jbethPaymentTerminal3_1_1ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbethPaymentTerminal3_1_1ABI}__ and `functionName` set to `"decimals"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x457cD63bee88ac01f3cD4a67D5DCc921D8C0D573)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x82129d4109625F94582bDdF6101a8Cd1a27919f5)
 */
export function useJbethPaymentTerminal3_1_1Decimals<
  TFunctionName extends 'decimals',
  TSelectData = ReadContractResult<
    typeof jbethPaymentTerminal3_1_1ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbethPaymentTerminal3_1_1ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbethPaymentTerminal3_1_1ABI,
    address:
      jbethPaymentTerminal3_1_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_1Address
      ],
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<
    typeof jbethPaymentTerminal3_1_1ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbethPaymentTerminal3_1_1ABI}__ and `functionName` set to `"decimalsForToken"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x457cD63bee88ac01f3cD4a67D5DCc921D8C0D573)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x82129d4109625F94582bDdF6101a8Cd1a27919f5)
 */
export function useJbethPaymentTerminal3_1_1DecimalsForToken<
  TFunctionName extends 'decimalsForToken',
  TSelectData = ReadContractResult<
    typeof jbethPaymentTerminal3_1_1ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbethPaymentTerminal3_1_1ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbethPaymentTerminal3_1_1ABI,
    address:
      jbethPaymentTerminal3_1_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_1Address
      ],
    functionName: 'decimalsForToken',
    ...config,
  } as UseContractReadConfig<
    typeof jbethPaymentTerminal3_1_1ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbethPaymentTerminal3_1_1ABI}__ and `functionName` set to `"directory"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x457cD63bee88ac01f3cD4a67D5DCc921D8C0D573)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x82129d4109625F94582bDdF6101a8Cd1a27919f5)
 */
export function useJbethPaymentTerminal3_1_1Directory<
  TFunctionName extends 'directory',
  TSelectData = ReadContractResult<
    typeof jbethPaymentTerminal3_1_1ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbethPaymentTerminal3_1_1ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbethPaymentTerminal3_1_1ABI,
    address:
      jbethPaymentTerminal3_1_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_1Address
      ],
    functionName: 'directory',
    ...config,
  } as UseContractReadConfig<
    typeof jbethPaymentTerminal3_1_1ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbethPaymentTerminal3_1_1ABI}__ and `functionName` set to `"fee"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x457cD63bee88ac01f3cD4a67D5DCc921D8C0D573)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x82129d4109625F94582bDdF6101a8Cd1a27919f5)
 */
export function useJbethPaymentTerminal3_1_1Fee<
  TFunctionName extends 'fee',
  TSelectData = ReadContractResult<
    typeof jbethPaymentTerminal3_1_1ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbethPaymentTerminal3_1_1ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbethPaymentTerminal3_1_1ABI,
    address:
      jbethPaymentTerminal3_1_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_1Address
      ],
    functionName: 'fee',
    ...config,
  } as UseContractReadConfig<
    typeof jbethPaymentTerminal3_1_1ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbethPaymentTerminal3_1_1ABI}__ and `functionName` set to `"feeGauge"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x457cD63bee88ac01f3cD4a67D5DCc921D8C0D573)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x82129d4109625F94582bDdF6101a8Cd1a27919f5)
 */
export function useJbethPaymentTerminal3_1_1FeeGauge<
  TFunctionName extends 'feeGauge',
  TSelectData = ReadContractResult<
    typeof jbethPaymentTerminal3_1_1ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbethPaymentTerminal3_1_1ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbethPaymentTerminal3_1_1ABI,
    address:
      jbethPaymentTerminal3_1_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_1Address
      ],
    functionName: 'feeGauge',
    ...config,
  } as UseContractReadConfig<
    typeof jbethPaymentTerminal3_1_1ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbethPaymentTerminal3_1_1ABI}__ and `functionName` set to `"heldFeesOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x457cD63bee88ac01f3cD4a67D5DCc921D8C0D573)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x82129d4109625F94582bDdF6101a8Cd1a27919f5)
 */
export function useJbethPaymentTerminal3_1_1HeldFeesOf<
  TFunctionName extends 'heldFeesOf',
  TSelectData = ReadContractResult<
    typeof jbethPaymentTerminal3_1_1ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbethPaymentTerminal3_1_1ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbethPaymentTerminal3_1_1ABI,
    address:
      jbethPaymentTerminal3_1_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_1Address
      ],
    functionName: 'heldFeesOf',
    ...config,
  } as UseContractReadConfig<
    typeof jbethPaymentTerminal3_1_1ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbethPaymentTerminal3_1_1ABI}__ and `functionName` set to `"isFeelessAddress"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x457cD63bee88ac01f3cD4a67D5DCc921D8C0D573)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x82129d4109625F94582bDdF6101a8Cd1a27919f5)
 */
export function useJbethPaymentTerminal3_1_1IsFeelessAddress<
  TFunctionName extends 'isFeelessAddress',
  TSelectData = ReadContractResult<
    typeof jbethPaymentTerminal3_1_1ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbethPaymentTerminal3_1_1ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbethPaymentTerminal3_1_1ABI,
    address:
      jbethPaymentTerminal3_1_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_1Address
      ],
    functionName: 'isFeelessAddress',
    ...config,
  } as UseContractReadConfig<
    typeof jbethPaymentTerminal3_1_1ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbethPaymentTerminal3_1_1ABI}__ and `functionName` set to `"operatorStore"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x457cD63bee88ac01f3cD4a67D5DCc921D8C0D573)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x82129d4109625F94582bDdF6101a8Cd1a27919f5)
 */
export function useJbethPaymentTerminal3_1_1OperatorStore<
  TFunctionName extends 'operatorStore',
  TSelectData = ReadContractResult<
    typeof jbethPaymentTerminal3_1_1ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbethPaymentTerminal3_1_1ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbethPaymentTerminal3_1_1ABI,
    address:
      jbethPaymentTerminal3_1_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_1Address
      ],
    functionName: 'operatorStore',
    ...config,
  } as UseContractReadConfig<
    typeof jbethPaymentTerminal3_1_1ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbethPaymentTerminal3_1_1ABI}__ and `functionName` set to `"owner"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x457cD63bee88ac01f3cD4a67D5DCc921D8C0D573)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x82129d4109625F94582bDdF6101a8Cd1a27919f5)
 */
export function useJbethPaymentTerminal3_1_1Owner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<
    typeof jbethPaymentTerminal3_1_1ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbethPaymentTerminal3_1_1ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbethPaymentTerminal3_1_1ABI,
    address:
      jbethPaymentTerminal3_1_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_1Address
      ],
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<
    typeof jbethPaymentTerminal3_1_1ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbethPaymentTerminal3_1_1ABI}__ and `functionName` set to `"payoutSplitsGroup"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x457cD63bee88ac01f3cD4a67D5DCc921D8C0D573)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x82129d4109625F94582bDdF6101a8Cd1a27919f5)
 */
export function useJbethPaymentTerminal3_1_1PayoutSplitsGroup<
  TFunctionName extends 'payoutSplitsGroup',
  TSelectData = ReadContractResult<
    typeof jbethPaymentTerminal3_1_1ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbethPaymentTerminal3_1_1ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbethPaymentTerminal3_1_1ABI,
    address:
      jbethPaymentTerminal3_1_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_1Address
      ],
    functionName: 'payoutSplitsGroup',
    ...config,
  } as UseContractReadConfig<
    typeof jbethPaymentTerminal3_1_1ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbethPaymentTerminal3_1_1ABI}__ and `functionName` set to `"prices"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x457cD63bee88ac01f3cD4a67D5DCc921D8C0D573)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x82129d4109625F94582bDdF6101a8Cd1a27919f5)
 */
export function useJbethPaymentTerminal3_1_1Prices<
  TFunctionName extends 'prices',
  TSelectData = ReadContractResult<
    typeof jbethPaymentTerminal3_1_1ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbethPaymentTerminal3_1_1ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbethPaymentTerminal3_1_1ABI,
    address:
      jbethPaymentTerminal3_1_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_1Address
      ],
    functionName: 'prices',
    ...config,
  } as UseContractReadConfig<
    typeof jbethPaymentTerminal3_1_1ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbethPaymentTerminal3_1_1ABI}__ and `functionName` set to `"projects"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x457cD63bee88ac01f3cD4a67D5DCc921D8C0D573)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x82129d4109625F94582bDdF6101a8Cd1a27919f5)
 */
export function useJbethPaymentTerminal3_1_1Projects<
  TFunctionName extends 'projects',
  TSelectData = ReadContractResult<
    typeof jbethPaymentTerminal3_1_1ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbethPaymentTerminal3_1_1ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbethPaymentTerminal3_1_1ABI,
    address:
      jbethPaymentTerminal3_1_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_1Address
      ],
    functionName: 'projects',
    ...config,
  } as UseContractReadConfig<
    typeof jbethPaymentTerminal3_1_1ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbethPaymentTerminal3_1_1ABI}__ and `functionName` set to `"splitsStore"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x457cD63bee88ac01f3cD4a67D5DCc921D8C0D573)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x82129d4109625F94582bDdF6101a8Cd1a27919f5)
 */
export function useJbethPaymentTerminal3_1_1SplitsStore<
  TFunctionName extends 'splitsStore',
  TSelectData = ReadContractResult<
    typeof jbethPaymentTerminal3_1_1ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbethPaymentTerminal3_1_1ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbethPaymentTerminal3_1_1ABI,
    address:
      jbethPaymentTerminal3_1_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_1Address
      ],
    functionName: 'splitsStore',
    ...config,
  } as UseContractReadConfig<
    typeof jbethPaymentTerminal3_1_1ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbethPaymentTerminal3_1_1ABI}__ and `functionName` set to `"store"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x457cD63bee88ac01f3cD4a67D5DCc921D8C0D573)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x82129d4109625F94582bDdF6101a8Cd1a27919f5)
 */
export function useJbethPaymentTerminal3_1_1Store<
  TFunctionName extends 'store',
  TSelectData = ReadContractResult<
    typeof jbethPaymentTerminal3_1_1ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbethPaymentTerminal3_1_1ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbethPaymentTerminal3_1_1ABI,
    address:
      jbethPaymentTerminal3_1_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_1Address
      ],
    functionName: 'store',
    ...config,
  } as UseContractReadConfig<
    typeof jbethPaymentTerminal3_1_1ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbethPaymentTerminal3_1_1ABI}__ and `functionName` set to `"supportsInterface"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x457cD63bee88ac01f3cD4a67D5DCc921D8C0D573)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x82129d4109625F94582bDdF6101a8Cd1a27919f5)
 */
export function useJbethPaymentTerminal3_1_1SupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<
    typeof jbethPaymentTerminal3_1_1ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbethPaymentTerminal3_1_1ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbethPaymentTerminal3_1_1ABI,
    address:
      jbethPaymentTerminal3_1_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_1Address
      ],
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof jbethPaymentTerminal3_1_1ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbethPaymentTerminal3_1_1ABI}__ and `functionName` set to `"token"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x457cD63bee88ac01f3cD4a67D5DCc921D8C0D573)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x82129d4109625F94582bDdF6101a8Cd1a27919f5)
 */
export function useJbethPaymentTerminal3_1_1Token<
  TFunctionName extends 'token',
  TSelectData = ReadContractResult<
    typeof jbethPaymentTerminal3_1_1ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbethPaymentTerminal3_1_1ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbethPaymentTerminal3_1_1ABI,
    address:
      jbethPaymentTerminal3_1_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_1Address
      ],
    functionName: 'token',
    ...config,
  } as UseContractReadConfig<
    typeof jbethPaymentTerminal3_1_1ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbethPaymentTerminal3_1_1ABI}__.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x457cD63bee88ac01f3cD4a67D5DCc921D8C0D573)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x82129d4109625F94582bDdF6101a8Cd1a27919f5)
 */
export function useJbethPaymentTerminal3_1_1Write<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbethPaymentTerminal3_1_1Address,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbethPaymentTerminal3_1_1ABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      > & { address?: Address; chainId?: TChainId }
    : UseContractWriteConfig<
        typeof jbethPaymentTerminal3_1_1ABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof jbethPaymentTerminal3_1_1ABI,
    TFunctionName,
    TMode
  >({
    abi: jbethPaymentTerminal3_1_1ABI,
    address:
      jbethPaymentTerminal3_1_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_1Address
      ],
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbethPaymentTerminal3_1_1ABI}__ and `functionName` set to `"addToBalanceOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x457cD63bee88ac01f3cD4a67D5DCc921D8C0D573)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x82129d4109625F94582bDdF6101a8Cd1a27919f5)
 */
export function useJbethPaymentTerminal3_1_1AddToBalanceOf<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbethPaymentTerminal3_1_1Address,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbethPaymentTerminal3_1_1ABI,
          'addToBalanceOf'
        >['request']['abi'],
        'addToBalanceOf',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'addToBalanceOf'
      }
    : UseContractWriteConfig<
        typeof jbethPaymentTerminal3_1_1ABI,
        'addToBalanceOf',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'addToBalanceOf'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof jbethPaymentTerminal3_1_1ABI,
    'addToBalanceOf',
    TMode
  >({
    abi: jbethPaymentTerminal3_1_1ABI,
    address:
      jbethPaymentTerminal3_1_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_1Address
      ],
    functionName: 'addToBalanceOf',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbethPaymentTerminal3_1_1ABI}__ and `functionName` set to `"distributePayoutsOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x457cD63bee88ac01f3cD4a67D5DCc921D8C0D573)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x82129d4109625F94582bDdF6101a8Cd1a27919f5)
 */
export function useJbethPaymentTerminal3_1_1DistributePayoutsOf<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbethPaymentTerminal3_1_1Address,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbethPaymentTerminal3_1_1ABI,
          'distributePayoutsOf'
        >['request']['abi'],
        'distributePayoutsOf',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'distributePayoutsOf'
      }
    : UseContractWriteConfig<
        typeof jbethPaymentTerminal3_1_1ABI,
        'distributePayoutsOf',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'distributePayoutsOf'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof jbethPaymentTerminal3_1_1ABI,
    'distributePayoutsOf',
    TMode
  >({
    abi: jbethPaymentTerminal3_1_1ABI,
    address:
      jbethPaymentTerminal3_1_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_1Address
      ],
    functionName: 'distributePayoutsOf',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbethPaymentTerminal3_1_1ABI}__ and `functionName` set to `"migrate"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x457cD63bee88ac01f3cD4a67D5DCc921D8C0D573)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x82129d4109625F94582bDdF6101a8Cd1a27919f5)
 */
export function useJbethPaymentTerminal3_1_1Migrate<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbethPaymentTerminal3_1_1Address,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbethPaymentTerminal3_1_1ABI,
          'migrate'
        >['request']['abi'],
        'migrate',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'migrate' }
    : UseContractWriteConfig<
        typeof jbethPaymentTerminal3_1_1ABI,
        'migrate',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'migrate'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof jbethPaymentTerminal3_1_1ABI,
    'migrate',
    TMode
  >({
    abi: jbethPaymentTerminal3_1_1ABI,
    address:
      jbethPaymentTerminal3_1_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_1Address
      ],
    functionName: 'migrate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbethPaymentTerminal3_1_1ABI}__ and `functionName` set to `"pay"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x457cD63bee88ac01f3cD4a67D5DCc921D8C0D573)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x82129d4109625F94582bDdF6101a8Cd1a27919f5)
 */
export function useJbethPaymentTerminal3_1_1Pay<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbethPaymentTerminal3_1_1Address,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbethPaymentTerminal3_1_1ABI,
          'pay'
        >['request']['abi'],
        'pay',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'pay' }
    : UseContractWriteConfig<
        typeof jbethPaymentTerminal3_1_1ABI,
        'pay',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'pay'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof jbethPaymentTerminal3_1_1ABI, 'pay', TMode>({
    abi: jbethPaymentTerminal3_1_1ABI,
    address:
      jbethPaymentTerminal3_1_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_1Address
      ],
    functionName: 'pay',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbethPaymentTerminal3_1_1ABI}__ and `functionName` set to `"processFees"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x457cD63bee88ac01f3cD4a67D5DCc921D8C0D573)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x82129d4109625F94582bDdF6101a8Cd1a27919f5)
 */
export function useJbethPaymentTerminal3_1_1ProcessFees<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbethPaymentTerminal3_1_1Address,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbethPaymentTerminal3_1_1ABI,
          'processFees'
        >['request']['abi'],
        'processFees',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'processFees'
      }
    : UseContractWriteConfig<
        typeof jbethPaymentTerminal3_1_1ABI,
        'processFees',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'processFees'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof jbethPaymentTerminal3_1_1ABI,
    'processFees',
    TMode
  >({
    abi: jbethPaymentTerminal3_1_1ABI,
    address:
      jbethPaymentTerminal3_1_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_1Address
      ],
    functionName: 'processFees',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbethPaymentTerminal3_1_1ABI}__ and `functionName` set to `"redeemTokensOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x457cD63bee88ac01f3cD4a67D5DCc921D8C0D573)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x82129d4109625F94582bDdF6101a8Cd1a27919f5)
 */
export function useJbethPaymentTerminal3_1_1RedeemTokensOf<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbethPaymentTerminal3_1_1Address,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbethPaymentTerminal3_1_1ABI,
          'redeemTokensOf'
        >['request']['abi'],
        'redeemTokensOf',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'redeemTokensOf'
      }
    : UseContractWriteConfig<
        typeof jbethPaymentTerminal3_1_1ABI,
        'redeemTokensOf',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'redeemTokensOf'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof jbethPaymentTerminal3_1_1ABI,
    'redeemTokensOf',
    TMode
  >({
    abi: jbethPaymentTerminal3_1_1ABI,
    address:
      jbethPaymentTerminal3_1_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_1Address
      ],
    functionName: 'redeemTokensOf',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbethPaymentTerminal3_1_1ABI}__ and `functionName` set to `"renounceOwnership"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x457cD63bee88ac01f3cD4a67D5DCc921D8C0D573)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x82129d4109625F94582bDdF6101a8Cd1a27919f5)
 */
export function useJbethPaymentTerminal3_1_1RenounceOwnership<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbethPaymentTerminal3_1_1Address,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbethPaymentTerminal3_1_1ABI,
          'renounceOwnership'
        >['request']['abi'],
        'renounceOwnership',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'renounceOwnership'
      }
    : UseContractWriteConfig<
        typeof jbethPaymentTerminal3_1_1ABI,
        'renounceOwnership',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof jbethPaymentTerminal3_1_1ABI,
    'renounceOwnership',
    TMode
  >({
    abi: jbethPaymentTerminal3_1_1ABI,
    address:
      jbethPaymentTerminal3_1_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_1Address
      ],
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbethPaymentTerminal3_1_1ABI}__ and `functionName` set to `"setFee"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x457cD63bee88ac01f3cD4a67D5DCc921D8C0D573)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x82129d4109625F94582bDdF6101a8Cd1a27919f5)
 */
export function useJbethPaymentTerminal3_1_1SetFee<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbethPaymentTerminal3_1_1Address,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbethPaymentTerminal3_1_1ABI,
          'setFee'
        >['request']['abi'],
        'setFee',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'setFee' }
    : UseContractWriteConfig<
        typeof jbethPaymentTerminal3_1_1ABI,
        'setFee',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setFee'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof jbethPaymentTerminal3_1_1ABI, 'setFee', TMode>(
    {
      abi: jbethPaymentTerminal3_1_1ABI,
      address:
        jbethPaymentTerminal3_1_1Address[
          chainId as keyof typeof jbethPaymentTerminal3_1_1Address
        ],
      functionName: 'setFee',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbethPaymentTerminal3_1_1ABI}__ and `functionName` set to `"setFeeGauge"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x457cD63bee88ac01f3cD4a67D5DCc921D8C0D573)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x82129d4109625F94582bDdF6101a8Cd1a27919f5)
 */
export function useJbethPaymentTerminal3_1_1SetFeeGauge<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbethPaymentTerminal3_1_1Address,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbethPaymentTerminal3_1_1ABI,
          'setFeeGauge'
        >['request']['abi'],
        'setFeeGauge',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'setFeeGauge'
      }
    : UseContractWriteConfig<
        typeof jbethPaymentTerminal3_1_1ABI,
        'setFeeGauge',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setFeeGauge'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof jbethPaymentTerminal3_1_1ABI,
    'setFeeGauge',
    TMode
  >({
    abi: jbethPaymentTerminal3_1_1ABI,
    address:
      jbethPaymentTerminal3_1_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_1Address
      ],
    functionName: 'setFeeGauge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbethPaymentTerminal3_1_1ABI}__ and `functionName` set to `"setFeelessAddress"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x457cD63bee88ac01f3cD4a67D5DCc921D8C0D573)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x82129d4109625F94582bDdF6101a8Cd1a27919f5)
 */
export function useJbethPaymentTerminal3_1_1SetFeelessAddress<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbethPaymentTerminal3_1_1Address,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbethPaymentTerminal3_1_1ABI,
          'setFeelessAddress'
        >['request']['abi'],
        'setFeelessAddress',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'setFeelessAddress'
      }
    : UseContractWriteConfig<
        typeof jbethPaymentTerminal3_1_1ABI,
        'setFeelessAddress',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setFeelessAddress'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof jbethPaymentTerminal3_1_1ABI,
    'setFeelessAddress',
    TMode
  >({
    abi: jbethPaymentTerminal3_1_1ABI,
    address:
      jbethPaymentTerminal3_1_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_1Address
      ],
    functionName: 'setFeelessAddress',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbethPaymentTerminal3_1_1ABI}__ and `functionName` set to `"transferOwnership"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x457cD63bee88ac01f3cD4a67D5DCc921D8C0D573)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x82129d4109625F94582bDdF6101a8Cd1a27919f5)
 */
export function useJbethPaymentTerminal3_1_1TransferOwnership<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbethPaymentTerminal3_1_1Address,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbethPaymentTerminal3_1_1ABI,
          'transferOwnership'
        >['request']['abi'],
        'transferOwnership',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'transferOwnership'
      }
    : UseContractWriteConfig<
        typeof jbethPaymentTerminal3_1_1ABI,
        'transferOwnership',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof jbethPaymentTerminal3_1_1ABI,
    'transferOwnership',
    TMode
  >({
    abi: jbethPaymentTerminal3_1_1ABI,
    address:
      jbethPaymentTerminal3_1_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_1Address
      ],
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbethPaymentTerminal3_1_1ABI}__ and `functionName` set to `"useAllowanceOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x457cD63bee88ac01f3cD4a67D5DCc921D8C0D573)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x82129d4109625F94582bDdF6101a8Cd1a27919f5)
 */
export function useJbethPaymentTerminal3_1_1UseAllowanceOf<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbethPaymentTerminal3_1_1Address,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbethPaymentTerminal3_1_1ABI,
          'useAllowanceOf'
        >['request']['abi'],
        'useAllowanceOf',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'useAllowanceOf'
      }
    : UseContractWriteConfig<
        typeof jbethPaymentTerminal3_1_1ABI,
        'useAllowanceOf',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'useAllowanceOf'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof jbethPaymentTerminal3_1_1ABI,
    'useAllowanceOf',
    TMode
  >({
    abi: jbethPaymentTerminal3_1_1ABI,
    address:
      jbethPaymentTerminal3_1_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_1Address
      ],
    functionName: 'useAllowanceOf',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbethPaymentTerminal3_1_1ABI}__.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x457cD63bee88ac01f3cD4a67D5DCc921D8C0D573)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x82129d4109625F94582bDdF6101a8Cd1a27919f5)
 */
export function usePrepareJbethPaymentTerminal3_1_1Write<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof jbethPaymentTerminal3_1_1ABI,
      TFunctionName
    >,
    'abi'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbethPaymentTerminal3_1_1ABI,
    address:
      jbethPaymentTerminal3_1_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_1Address
      ],
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof jbethPaymentTerminal3_1_1ABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbethPaymentTerminal3_1_1ABI}__ and `functionName` set to `"addToBalanceOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x457cD63bee88ac01f3cD4a67D5DCc921D8C0D573)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x82129d4109625F94582bDdF6101a8Cd1a27919f5)
 */
export function usePrepareJbethPaymentTerminal3_1_1AddToBalanceOf(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof jbethPaymentTerminal3_1_1ABI,
      'addToBalanceOf'
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbethPaymentTerminal3_1_1ABI,
    address:
      jbethPaymentTerminal3_1_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_1Address
      ],
    functionName: 'addToBalanceOf',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof jbethPaymentTerminal3_1_1ABI,
    'addToBalanceOf'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbethPaymentTerminal3_1_1ABI}__ and `functionName` set to `"distributePayoutsOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x457cD63bee88ac01f3cD4a67D5DCc921D8C0D573)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x82129d4109625F94582bDdF6101a8Cd1a27919f5)
 */
export function usePrepareJbethPaymentTerminal3_1_1DistributePayoutsOf(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof jbethPaymentTerminal3_1_1ABI,
      'distributePayoutsOf'
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbethPaymentTerminal3_1_1ABI,
    address:
      jbethPaymentTerminal3_1_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_1Address
      ],
    functionName: 'distributePayoutsOf',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof jbethPaymentTerminal3_1_1ABI,
    'distributePayoutsOf'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbethPaymentTerminal3_1_1ABI}__ and `functionName` set to `"migrate"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x457cD63bee88ac01f3cD4a67D5DCc921D8C0D573)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x82129d4109625F94582bDdF6101a8Cd1a27919f5)
 */
export function usePrepareJbethPaymentTerminal3_1_1Migrate(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof jbethPaymentTerminal3_1_1ABI,
      'migrate'
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbethPaymentTerminal3_1_1ABI,
    address:
      jbethPaymentTerminal3_1_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_1Address
      ],
    functionName: 'migrate',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof jbethPaymentTerminal3_1_1ABI,
    'migrate'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbethPaymentTerminal3_1_1ABI}__ and `functionName` set to `"pay"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x457cD63bee88ac01f3cD4a67D5DCc921D8C0D573)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x82129d4109625F94582bDdF6101a8Cd1a27919f5)
 */
export function usePrepareJbethPaymentTerminal3_1_1Pay(
  config: Omit<
    UsePrepareContractWriteConfig<typeof jbethPaymentTerminal3_1_1ABI, 'pay'>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbethPaymentTerminal3_1_1ABI,
    address:
      jbethPaymentTerminal3_1_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_1Address
      ],
    functionName: 'pay',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof jbethPaymentTerminal3_1_1ABI,
    'pay'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbethPaymentTerminal3_1_1ABI}__ and `functionName` set to `"processFees"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x457cD63bee88ac01f3cD4a67D5DCc921D8C0D573)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x82129d4109625F94582bDdF6101a8Cd1a27919f5)
 */
export function usePrepareJbethPaymentTerminal3_1_1ProcessFees(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof jbethPaymentTerminal3_1_1ABI,
      'processFees'
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbethPaymentTerminal3_1_1ABI,
    address:
      jbethPaymentTerminal3_1_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_1Address
      ],
    functionName: 'processFees',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof jbethPaymentTerminal3_1_1ABI,
    'processFees'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbethPaymentTerminal3_1_1ABI}__ and `functionName` set to `"redeemTokensOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x457cD63bee88ac01f3cD4a67D5DCc921D8C0D573)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x82129d4109625F94582bDdF6101a8Cd1a27919f5)
 */
export function usePrepareJbethPaymentTerminal3_1_1RedeemTokensOf(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof jbethPaymentTerminal3_1_1ABI,
      'redeemTokensOf'
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbethPaymentTerminal3_1_1ABI,
    address:
      jbethPaymentTerminal3_1_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_1Address
      ],
    functionName: 'redeemTokensOf',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof jbethPaymentTerminal3_1_1ABI,
    'redeemTokensOf'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbethPaymentTerminal3_1_1ABI}__ and `functionName` set to `"renounceOwnership"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x457cD63bee88ac01f3cD4a67D5DCc921D8C0D573)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x82129d4109625F94582bDdF6101a8Cd1a27919f5)
 */
export function usePrepareJbethPaymentTerminal3_1_1RenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof jbethPaymentTerminal3_1_1ABI,
      'renounceOwnership'
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbethPaymentTerminal3_1_1ABI,
    address:
      jbethPaymentTerminal3_1_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_1Address
      ],
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof jbethPaymentTerminal3_1_1ABI,
    'renounceOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbethPaymentTerminal3_1_1ABI}__ and `functionName` set to `"setFee"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x457cD63bee88ac01f3cD4a67D5DCc921D8C0D573)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x82129d4109625F94582bDdF6101a8Cd1a27919f5)
 */
export function usePrepareJbethPaymentTerminal3_1_1SetFee(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof jbethPaymentTerminal3_1_1ABI,
      'setFee'
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbethPaymentTerminal3_1_1ABI,
    address:
      jbethPaymentTerminal3_1_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_1Address
      ],
    functionName: 'setFee',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof jbethPaymentTerminal3_1_1ABI,
    'setFee'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbethPaymentTerminal3_1_1ABI}__ and `functionName` set to `"setFeeGauge"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x457cD63bee88ac01f3cD4a67D5DCc921D8C0D573)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x82129d4109625F94582bDdF6101a8Cd1a27919f5)
 */
export function usePrepareJbethPaymentTerminal3_1_1SetFeeGauge(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof jbethPaymentTerminal3_1_1ABI,
      'setFeeGauge'
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbethPaymentTerminal3_1_1ABI,
    address:
      jbethPaymentTerminal3_1_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_1Address
      ],
    functionName: 'setFeeGauge',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof jbethPaymentTerminal3_1_1ABI,
    'setFeeGauge'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbethPaymentTerminal3_1_1ABI}__ and `functionName` set to `"setFeelessAddress"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x457cD63bee88ac01f3cD4a67D5DCc921D8C0D573)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x82129d4109625F94582bDdF6101a8Cd1a27919f5)
 */
export function usePrepareJbethPaymentTerminal3_1_1SetFeelessAddress(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof jbethPaymentTerminal3_1_1ABI,
      'setFeelessAddress'
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbethPaymentTerminal3_1_1ABI,
    address:
      jbethPaymentTerminal3_1_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_1Address
      ],
    functionName: 'setFeelessAddress',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof jbethPaymentTerminal3_1_1ABI,
    'setFeelessAddress'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbethPaymentTerminal3_1_1ABI}__ and `functionName` set to `"transferOwnership"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x457cD63bee88ac01f3cD4a67D5DCc921D8C0D573)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x82129d4109625F94582bDdF6101a8Cd1a27919f5)
 */
export function usePrepareJbethPaymentTerminal3_1_1TransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof jbethPaymentTerminal3_1_1ABI,
      'transferOwnership'
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbethPaymentTerminal3_1_1ABI,
    address:
      jbethPaymentTerminal3_1_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_1Address
      ],
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof jbethPaymentTerminal3_1_1ABI,
    'transferOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbethPaymentTerminal3_1_1ABI}__ and `functionName` set to `"useAllowanceOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x457cD63bee88ac01f3cD4a67D5DCc921D8C0D573)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x82129d4109625F94582bDdF6101a8Cd1a27919f5)
 */
export function usePrepareJbethPaymentTerminal3_1_1UseAllowanceOf(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof jbethPaymentTerminal3_1_1ABI,
      'useAllowanceOf'
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbethPaymentTerminal3_1_1ABI,
    address:
      jbethPaymentTerminal3_1_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_1Address
      ],
    functionName: 'useAllowanceOf',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof jbethPaymentTerminal3_1_1ABI,
    'useAllowanceOf'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbethPaymentTerminal3_1_1ABI}__.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x457cD63bee88ac01f3cD4a67D5DCc921D8C0D573)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x82129d4109625F94582bDdF6101a8Cd1a27919f5)
 */
export function useJbethPaymentTerminal3_1_1Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof jbethPaymentTerminal3_1_1ABI, TEventName>,
    'abi'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbethPaymentTerminal3_1_1ABI,
    address:
      jbethPaymentTerminal3_1_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_1Address
      ],
    ...config,
  } as UseContractEventConfig<typeof jbethPaymentTerminal3_1_1ABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbethPaymentTerminal3_1_1ABI}__ and `eventName` set to `"AddToBalance"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x457cD63bee88ac01f3cD4a67D5DCc921D8C0D573)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x82129d4109625F94582bDdF6101a8Cd1a27919f5)
 */
export function useJbethPaymentTerminal3_1_1AddToBalanceEvent(
  config: Omit<
    UseContractEventConfig<typeof jbethPaymentTerminal3_1_1ABI, 'AddToBalance'>,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbethPaymentTerminal3_1_1ABI,
    address:
      jbethPaymentTerminal3_1_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_1Address
      ],
    eventName: 'AddToBalance',
    ...config,
  } as UseContractEventConfig<
    typeof jbethPaymentTerminal3_1_1ABI,
    'AddToBalance'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbethPaymentTerminal3_1_1ABI}__ and `eventName` set to `"DelegateDidPay"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x457cD63bee88ac01f3cD4a67D5DCc921D8C0D573)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x82129d4109625F94582bDdF6101a8Cd1a27919f5)
 */
export function useJbethPaymentTerminal3_1_1DelegateDidPayEvent(
  config: Omit<
    UseContractEventConfig<
      typeof jbethPaymentTerminal3_1_1ABI,
      'DelegateDidPay'
    >,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbethPaymentTerminal3_1_1ABI,
    address:
      jbethPaymentTerminal3_1_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_1Address
      ],
    eventName: 'DelegateDidPay',
    ...config,
  } as UseContractEventConfig<
    typeof jbethPaymentTerminal3_1_1ABI,
    'DelegateDidPay'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbethPaymentTerminal3_1_1ABI}__ and `eventName` set to `"DelegateDidRedeem"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x457cD63bee88ac01f3cD4a67D5DCc921D8C0D573)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x82129d4109625F94582bDdF6101a8Cd1a27919f5)
 */
export function useJbethPaymentTerminal3_1_1DelegateDidRedeemEvent(
  config: Omit<
    UseContractEventConfig<
      typeof jbethPaymentTerminal3_1_1ABI,
      'DelegateDidRedeem'
    >,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbethPaymentTerminal3_1_1ABI,
    address:
      jbethPaymentTerminal3_1_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_1Address
      ],
    eventName: 'DelegateDidRedeem',
    ...config,
  } as UseContractEventConfig<
    typeof jbethPaymentTerminal3_1_1ABI,
    'DelegateDidRedeem'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbethPaymentTerminal3_1_1ABI}__ and `eventName` set to `"DistributePayouts"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x457cD63bee88ac01f3cD4a67D5DCc921D8C0D573)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x82129d4109625F94582bDdF6101a8Cd1a27919f5)
 */
export function useJbethPaymentTerminal3_1_1DistributePayoutsEvent(
  config: Omit<
    UseContractEventConfig<
      typeof jbethPaymentTerminal3_1_1ABI,
      'DistributePayouts'
    >,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbethPaymentTerminal3_1_1ABI,
    address:
      jbethPaymentTerminal3_1_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_1Address
      ],
    eventName: 'DistributePayouts',
    ...config,
  } as UseContractEventConfig<
    typeof jbethPaymentTerminal3_1_1ABI,
    'DistributePayouts'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbethPaymentTerminal3_1_1ABI}__ and `eventName` set to `"DistributeToPayoutSplit"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x457cD63bee88ac01f3cD4a67D5DCc921D8C0D573)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x82129d4109625F94582bDdF6101a8Cd1a27919f5)
 */
export function useJbethPaymentTerminal3_1_1DistributeToPayoutSplitEvent(
  config: Omit<
    UseContractEventConfig<
      typeof jbethPaymentTerminal3_1_1ABI,
      'DistributeToPayoutSplit'
    >,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbethPaymentTerminal3_1_1ABI,
    address:
      jbethPaymentTerminal3_1_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_1Address
      ],
    eventName: 'DistributeToPayoutSplit',
    ...config,
  } as UseContractEventConfig<
    typeof jbethPaymentTerminal3_1_1ABI,
    'DistributeToPayoutSplit'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbethPaymentTerminal3_1_1ABI}__ and `eventName` set to `"FeeReverted"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x457cD63bee88ac01f3cD4a67D5DCc921D8C0D573)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x82129d4109625F94582bDdF6101a8Cd1a27919f5)
 */
export function useJbethPaymentTerminal3_1_1FeeRevertedEvent(
  config: Omit<
    UseContractEventConfig<typeof jbethPaymentTerminal3_1_1ABI, 'FeeReverted'>,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbethPaymentTerminal3_1_1ABI,
    address:
      jbethPaymentTerminal3_1_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_1Address
      ],
    eventName: 'FeeReverted',
    ...config,
  } as UseContractEventConfig<
    typeof jbethPaymentTerminal3_1_1ABI,
    'FeeReverted'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbethPaymentTerminal3_1_1ABI}__ and `eventName` set to `"HoldFee"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x457cD63bee88ac01f3cD4a67D5DCc921D8C0D573)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x82129d4109625F94582bDdF6101a8Cd1a27919f5)
 */
export function useJbethPaymentTerminal3_1_1HoldFeeEvent(
  config: Omit<
    UseContractEventConfig<typeof jbethPaymentTerminal3_1_1ABI, 'HoldFee'>,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbethPaymentTerminal3_1_1ABI,
    address:
      jbethPaymentTerminal3_1_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_1Address
      ],
    eventName: 'HoldFee',
    ...config,
  } as UseContractEventConfig<typeof jbethPaymentTerminal3_1_1ABI, 'HoldFee'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbethPaymentTerminal3_1_1ABI}__ and `eventName` set to `"Migrate"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x457cD63bee88ac01f3cD4a67D5DCc921D8C0D573)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x82129d4109625F94582bDdF6101a8Cd1a27919f5)
 */
export function useJbethPaymentTerminal3_1_1MigrateEvent(
  config: Omit<
    UseContractEventConfig<typeof jbethPaymentTerminal3_1_1ABI, 'Migrate'>,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbethPaymentTerminal3_1_1ABI,
    address:
      jbethPaymentTerminal3_1_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_1Address
      ],
    eventName: 'Migrate',
    ...config,
  } as UseContractEventConfig<typeof jbethPaymentTerminal3_1_1ABI, 'Migrate'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbethPaymentTerminal3_1_1ABI}__ and `eventName` set to `"OwnershipTransferred"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x457cD63bee88ac01f3cD4a67D5DCc921D8C0D573)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x82129d4109625F94582bDdF6101a8Cd1a27919f5)
 */
export function useJbethPaymentTerminal3_1_1OwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<
      typeof jbethPaymentTerminal3_1_1ABI,
      'OwnershipTransferred'
    >,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbethPaymentTerminal3_1_1ABI,
    address:
      jbethPaymentTerminal3_1_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_1Address
      ],
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<
    typeof jbethPaymentTerminal3_1_1ABI,
    'OwnershipTransferred'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbethPaymentTerminal3_1_1ABI}__ and `eventName` set to `"Pay"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x457cD63bee88ac01f3cD4a67D5DCc921D8C0D573)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x82129d4109625F94582bDdF6101a8Cd1a27919f5)
 */
export function useJbethPaymentTerminal3_1_1PayEvent(
  config: Omit<
    UseContractEventConfig<typeof jbethPaymentTerminal3_1_1ABI, 'Pay'>,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbethPaymentTerminal3_1_1ABI,
    address:
      jbethPaymentTerminal3_1_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_1Address
      ],
    eventName: 'Pay',
    ...config,
  } as UseContractEventConfig<typeof jbethPaymentTerminal3_1_1ABI, 'Pay'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbethPaymentTerminal3_1_1ABI}__ and `eventName` set to `"PayoutReverted"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x457cD63bee88ac01f3cD4a67D5DCc921D8C0D573)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x82129d4109625F94582bDdF6101a8Cd1a27919f5)
 */
export function useJbethPaymentTerminal3_1_1PayoutRevertedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof jbethPaymentTerminal3_1_1ABI,
      'PayoutReverted'
    >,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbethPaymentTerminal3_1_1ABI,
    address:
      jbethPaymentTerminal3_1_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_1Address
      ],
    eventName: 'PayoutReverted',
    ...config,
  } as UseContractEventConfig<
    typeof jbethPaymentTerminal3_1_1ABI,
    'PayoutReverted'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbethPaymentTerminal3_1_1ABI}__ and `eventName` set to `"ProcessFee"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x457cD63bee88ac01f3cD4a67D5DCc921D8C0D573)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x82129d4109625F94582bDdF6101a8Cd1a27919f5)
 */
export function useJbethPaymentTerminal3_1_1ProcessFeeEvent(
  config: Omit<
    UseContractEventConfig<typeof jbethPaymentTerminal3_1_1ABI, 'ProcessFee'>,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbethPaymentTerminal3_1_1ABI,
    address:
      jbethPaymentTerminal3_1_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_1Address
      ],
    eventName: 'ProcessFee',
    ...config,
  } as UseContractEventConfig<
    typeof jbethPaymentTerminal3_1_1ABI,
    'ProcessFee'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbethPaymentTerminal3_1_1ABI}__ and `eventName` set to `"RedeemTokens"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x457cD63bee88ac01f3cD4a67D5DCc921D8C0D573)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x82129d4109625F94582bDdF6101a8Cd1a27919f5)
 */
export function useJbethPaymentTerminal3_1_1RedeemTokensEvent(
  config: Omit<
    UseContractEventConfig<typeof jbethPaymentTerminal3_1_1ABI, 'RedeemTokens'>,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbethPaymentTerminal3_1_1ABI,
    address:
      jbethPaymentTerminal3_1_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_1Address
      ],
    eventName: 'RedeemTokens',
    ...config,
  } as UseContractEventConfig<
    typeof jbethPaymentTerminal3_1_1ABI,
    'RedeemTokens'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbethPaymentTerminal3_1_1ABI}__ and `eventName` set to `"RefundHeldFees"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x457cD63bee88ac01f3cD4a67D5DCc921D8C0D573)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x82129d4109625F94582bDdF6101a8Cd1a27919f5)
 */
export function useJbethPaymentTerminal3_1_1RefundHeldFeesEvent(
  config: Omit<
    UseContractEventConfig<
      typeof jbethPaymentTerminal3_1_1ABI,
      'RefundHeldFees'
    >,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbethPaymentTerminal3_1_1ABI,
    address:
      jbethPaymentTerminal3_1_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_1Address
      ],
    eventName: 'RefundHeldFees',
    ...config,
  } as UseContractEventConfig<
    typeof jbethPaymentTerminal3_1_1ABI,
    'RefundHeldFees'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbethPaymentTerminal3_1_1ABI}__ and `eventName` set to `"SetFee"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x457cD63bee88ac01f3cD4a67D5DCc921D8C0D573)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x82129d4109625F94582bDdF6101a8Cd1a27919f5)
 */
export function useJbethPaymentTerminal3_1_1SetFeeEvent(
  config: Omit<
    UseContractEventConfig<typeof jbethPaymentTerminal3_1_1ABI, 'SetFee'>,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbethPaymentTerminal3_1_1ABI,
    address:
      jbethPaymentTerminal3_1_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_1Address
      ],
    eventName: 'SetFee',
    ...config,
  } as UseContractEventConfig<typeof jbethPaymentTerminal3_1_1ABI, 'SetFee'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbethPaymentTerminal3_1_1ABI}__ and `eventName` set to `"SetFeeGauge"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x457cD63bee88ac01f3cD4a67D5DCc921D8C0D573)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x82129d4109625F94582bDdF6101a8Cd1a27919f5)
 */
export function useJbethPaymentTerminal3_1_1SetFeeGaugeEvent(
  config: Omit<
    UseContractEventConfig<typeof jbethPaymentTerminal3_1_1ABI, 'SetFeeGauge'>,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbethPaymentTerminal3_1_1ABI,
    address:
      jbethPaymentTerminal3_1_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_1Address
      ],
    eventName: 'SetFeeGauge',
    ...config,
  } as UseContractEventConfig<
    typeof jbethPaymentTerminal3_1_1ABI,
    'SetFeeGauge'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbethPaymentTerminal3_1_1ABI}__ and `eventName` set to `"SetFeelessAddress"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x457cD63bee88ac01f3cD4a67D5DCc921D8C0D573)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x82129d4109625F94582bDdF6101a8Cd1a27919f5)
 */
export function useJbethPaymentTerminal3_1_1SetFeelessAddressEvent(
  config: Omit<
    UseContractEventConfig<
      typeof jbethPaymentTerminal3_1_1ABI,
      'SetFeelessAddress'
    >,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbethPaymentTerminal3_1_1ABI,
    address:
      jbethPaymentTerminal3_1_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_1Address
      ],
    eventName: 'SetFeelessAddress',
    ...config,
  } as UseContractEventConfig<
    typeof jbethPaymentTerminal3_1_1ABI,
    'SetFeelessAddress'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbethPaymentTerminal3_1_1ABI}__ and `eventName` set to `"UseAllowance"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x457cD63bee88ac01f3cD4a67D5DCc921D8C0D573)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x82129d4109625F94582bDdF6101a8Cd1a27919f5)
 */
export function useJbethPaymentTerminal3_1_1UseAllowanceEvent(
  config: Omit<
    UseContractEventConfig<typeof jbethPaymentTerminal3_1_1ABI, 'UseAllowance'>,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_1Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbethPaymentTerminal3_1_1ABI,
    address:
      jbethPaymentTerminal3_1_1Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_1Address
      ],
    eventName: 'UseAllowance',
    ...config,
  } as UseContractEventConfig<
    typeof jbethPaymentTerminal3_1_1ABI,
    'UseAllowance'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbethPaymentTerminal3_1_2ABI}__.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1d9619E10086FdC1065B114298384aAe3F680CC0)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xd89Ed8008961F68Aab849f49e122f9a1266240Db)
 */
export function useJbethPaymentTerminal3_1_2Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof jbethPaymentTerminal3_1_2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbethPaymentTerminal3_1_2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_2Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbethPaymentTerminal3_1_2ABI,
    address:
      jbethPaymentTerminal3_1_2Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_2Address
      ],
    ...config,
  } as UseContractReadConfig<
    typeof jbethPaymentTerminal3_1_2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbethPaymentTerminal3_1_2ABI}__ and `functionName` set to `"acceptsToken"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1d9619E10086FdC1065B114298384aAe3F680CC0)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xd89Ed8008961F68Aab849f49e122f9a1266240Db)
 */
export function useJbethPaymentTerminal3_1_2AcceptsToken<
  TFunctionName extends 'acceptsToken',
  TSelectData = ReadContractResult<
    typeof jbethPaymentTerminal3_1_2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbethPaymentTerminal3_1_2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_2Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbethPaymentTerminal3_1_2ABI,
    address:
      jbethPaymentTerminal3_1_2Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_2Address
      ],
    functionName: 'acceptsToken',
    ...config,
  } as UseContractReadConfig<
    typeof jbethPaymentTerminal3_1_2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbethPaymentTerminal3_1_2ABI}__ and `functionName` set to `"baseWeightCurrency"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1d9619E10086FdC1065B114298384aAe3F680CC0)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xd89Ed8008961F68Aab849f49e122f9a1266240Db)
 */
export function useJbethPaymentTerminal3_1_2BaseWeightCurrency<
  TFunctionName extends 'baseWeightCurrency',
  TSelectData = ReadContractResult<
    typeof jbethPaymentTerminal3_1_2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbethPaymentTerminal3_1_2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_2Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbethPaymentTerminal3_1_2ABI,
    address:
      jbethPaymentTerminal3_1_2Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_2Address
      ],
    functionName: 'baseWeightCurrency',
    ...config,
  } as UseContractReadConfig<
    typeof jbethPaymentTerminal3_1_2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbethPaymentTerminal3_1_2ABI}__ and `functionName` set to `"currency"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1d9619E10086FdC1065B114298384aAe3F680CC0)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xd89Ed8008961F68Aab849f49e122f9a1266240Db)
 */
export function useJbethPaymentTerminal3_1_2Currency<
  TFunctionName extends 'currency',
  TSelectData = ReadContractResult<
    typeof jbethPaymentTerminal3_1_2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbethPaymentTerminal3_1_2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_2Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbethPaymentTerminal3_1_2ABI,
    address:
      jbethPaymentTerminal3_1_2Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_2Address
      ],
    functionName: 'currency',
    ...config,
  } as UseContractReadConfig<
    typeof jbethPaymentTerminal3_1_2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbethPaymentTerminal3_1_2ABI}__ and `functionName` set to `"currencyForToken"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1d9619E10086FdC1065B114298384aAe3F680CC0)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xd89Ed8008961F68Aab849f49e122f9a1266240Db)
 */
export function useJbethPaymentTerminal3_1_2CurrencyForToken<
  TFunctionName extends 'currencyForToken',
  TSelectData = ReadContractResult<
    typeof jbethPaymentTerminal3_1_2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbethPaymentTerminal3_1_2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_2Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbethPaymentTerminal3_1_2ABI,
    address:
      jbethPaymentTerminal3_1_2Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_2Address
      ],
    functionName: 'currencyForToken',
    ...config,
  } as UseContractReadConfig<
    typeof jbethPaymentTerminal3_1_2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbethPaymentTerminal3_1_2ABI}__ and `functionName` set to `"currentEthOverflowOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1d9619E10086FdC1065B114298384aAe3F680CC0)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xd89Ed8008961F68Aab849f49e122f9a1266240Db)
 */
export function useJbethPaymentTerminal3_1_2CurrentEthOverflowOf<
  TFunctionName extends 'currentEthOverflowOf',
  TSelectData = ReadContractResult<
    typeof jbethPaymentTerminal3_1_2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbethPaymentTerminal3_1_2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_2Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbethPaymentTerminal3_1_2ABI,
    address:
      jbethPaymentTerminal3_1_2Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_2Address
      ],
    functionName: 'currentEthOverflowOf',
    ...config,
  } as UseContractReadConfig<
    typeof jbethPaymentTerminal3_1_2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbethPaymentTerminal3_1_2ABI}__ and `functionName` set to `"decimals"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1d9619E10086FdC1065B114298384aAe3F680CC0)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xd89Ed8008961F68Aab849f49e122f9a1266240Db)
 */
export function useJbethPaymentTerminal3_1_2Decimals<
  TFunctionName extends 'decimals',
  TSelectData = ReadContractResult<
    typeof jbethPaymentTerminal3_1_2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbethPaymentTerminal3_1_2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_2Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbethPaymentTerminal3_1_2ABI,
    address:
      jbethPaymentTerminal3_1_2Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_2Address
      ],
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<
    typeof jbethPaymentTerminal3_1_2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbethPaymentTerminal3_1_2ABI}__ and `functionName` set to `"decimalsForToken"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1d9619E10086FdC1065B114298384aAe3F680CC0)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xd89Ed8008961F68Aab849f49e122f9a1266240Db)
 */
export function useJbethPaymentTerminal3_1_2DecimalsForToken<
  TFunctionName extends 'decimalsForToken',
  TSelectData = ReadContractResult<
    typeof jbethPaymentTerminal3_1_2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbethPaymentTerminal3_1_2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_2Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbethPaymentTerminal3_1_2ABI,
    address:
      jbethPaymentTerminal3_1_2Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_2Address
      ],
    functionName: 'decimalsForToken',
    ...config,
  } as UseContractReadConfig<
    typeof jbethPaymentTerminal3_1_2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbethPaymentTerminal3_1_2ABI}__ and `functionName` set to `"directory"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1d9619E10086FdC1065B114298384aAe3F680CC0)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xd89Ed8008961F68Aab849f49e122f9a1266240Db)
 */
export function useJbethPaymentTerminal3_1_2Directory<
  TFunctionName extends 'directory',
  TSelectData = ReadContractResult<
    typeof jbethPaymentTerminal3_1_2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbethPaymentTerminal3_1_2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_2Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbethPaymentTerminal3_1_2ABI,
    address:
      jbethPaymentTerminal3_1_2Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_2Address
      ],
    functionName: 'directory',
    ...config,
  } as UseContractReadConfig<
    typeof jbethPaymentTerminal3_1_2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbethPaymentTerminal3_1_2ABI}__ and `functionName` set to `"fee"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1d9619E10086FdC1065B114298384aAe3F680CC0)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xd89Ed8008961F68Aab849f49e122f9a1266240Db)
 */
export function useJbethPaymentTerminal3_1_2Fee<
  TFunctionName extends 'fee',
  TSelectData = ReadContractResult<
    typeof jbethPaymentTerminal3_1_2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbethPaymentTerminal3_1_2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_2Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbethPaymentTerminal3_1_2ABI,
    address:
      jbethPaymentTerminal3_1_2Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_2Address
      ],
    functionName: 'fee',
    ...config,
  } as UseContractReadConfig<
    typeof jbethPaymentTerminal3_1_2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbethPaymentTerminal3_1_2ABI}__ and `functionName` set to `"feeGauge"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1d9619E10086FdC1065B114298384aAe3F680CC0)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xd89Ed8008961F68Aab849f49e122f9a1266240Db)
 */
export function useJbethPaymentTerminal3_1_2FeeGauge<
  TFunctionName extends 'feeGauge',
  TSelectData = ReadContractResult<
    typeof jbethPaymentTerminal3_1_2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbethPaymentTerminal3_1_2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_2Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbethPaymentTerminal3_1_2ABI,
    address:
      jbethPaymentTerminal3_1_2Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_2Address
      ],
    functionName: 'feeGauge',
    ...config,
  } as UseContractReadConfig<
    typeof jbethPaymentTerminal3_1_2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbethPaymentTerminal3_1_2ABI}__ and `functionName` set to `"heldFeesOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1d9619E10086FdC1065B114298384aAe3F680CC0)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xd89Ed8008961F68Aab849f49e122f9a1266240Db)
 */
export function useJbethPaymentTerminal3_1_2HeldFeesOf<
  TFunctionName extends 'heldFeesOf',
  TSelectData = ReadContractResult<
    typeof jbethPaymentTerminal3_1_2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbethPaymentTerminal3_1_2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_2Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbethPaymentTerminal3_1_2ABI,
    address:
      jbethPaymentTerminal3_1_2Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_2Address
      ],
    functionName: 'heldFeesOf',
    ...config,
  } as UseContractReadConfig<
    typeof jbethPaymentTerminal3_1_2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbethPaymentTerminal3_1_2ABI}__ and `functionName` set to `"isFeelessAddress"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1d9619E10086FdC1065B114298384aAe3F680CC0)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xd89Ed8008961F68Aab849f49e122f9a1266240Db)
 */
export function useJbethPaymentTerminal3_1_2IsFeelessAddress<
  TFunctionName extends 'isFeelessAddress',
  TSelectData = ReadContractResult<
    typeof jbethPaymentTerminal3_1_2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbethPaymentTerminal3_1_2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_2Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbethPaymentTerminal3_1_2ABI,
    address:
      jbethPaymentTerminal3_1_2Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_2Address
      ],
    functionName: 'isFeelessAddress',
    ...config,
  } as UseContractReadConfig<
    typeof jbethPaymentTerminal3_1_2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbethPaymentTerminal3_1_2ABI}__ and `functionName` set to `"operatorStore"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1d9619E10086FdC1065B114298384aAe3F680CC0)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xd89Ed8008961F68Aab849f49e122f9a1266240Db)
 */
export function useJbethPaymentTerminal3_1_2OperatorStore<
  TFunctionName extends 'operatorStore',
  TSelectData = ReadContractResult<
    typeof jbethPaymentTerminal3_1_2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbethPaymentTerminal3_1_2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_2Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbethPaymentTerminal3_1_2ABI,
    address:
      jbethPaymentTerminal3_1_2Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_2Address
      ],
    functionName: 'operatorStore',
    ...config,
  } as UseContractReadConfig<
    typeof jbethPaymentTerminal3_1_2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbethPaymentTerminal3_1_2ABI}__ and `functionName` set to `"owner"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1d9619E10086FdC1065B114298384aAe3F680CC0)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xd89Ed8008961F68Aab849f49e122f9a1266240Db)
 */
export function useJbethPaymentTerminal3_1_2Owner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<
    typeof jbethPaymentTerminal3_1_2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbethPaymentTerminal3_1_2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_2Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbethPaymentTerminal3_1_2ABI,
    address:
      jbethPaymentTerminal3_1_2Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_2Address
      ],
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<
    typeof jbethPaymentTerminal3_1_2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbethPaymentTerminal3_1_2ABI}__ and `functionName` set to `"payoutSplitsGroup"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1d9619E10086FdC1065B114298384aAe3F680CC0)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xd89Ed8008961F68Aab849f49e122f9a1266240Db)
 */
export function useJbethPaymentTerminal3_1_2PayoutSplitsGroup<
  TFunctionName extends 'payoutSplitsGroup',
  TSelectData = ReadContractResult<
    typeof jbethPaymentTerminal3_1_2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbethPaymentTerminal3_1_2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_2Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbethPaymentTerminal3_1_2ABI,
    address:
      jbethPaymentTerminal3_1_2Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_2Address
      ],
    functionName: 'payoutSplitsGroup',
    ...config,
  } as UseContractReadConfig<
    typeof jbethPaymentTerminal3_1_2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbethPaymentTerminal3_1_2ABI}__ and `functionName` set to `"prices"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1d9619E10086FdC1065B114298384aAe3F680CC0)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xd89Ed8008961F68Aab849f49e122f9a1266240Db)
 */
export function useJbethPaymentTerminal3_1_2Prices<
  TFunctionName extends 'prices',
  TSelectData = ReadContractResult<
    typeof jbethPaymentTerminal3_1_2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbethPaymentTerminal3_1_2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_2Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbethPaymentTerminal3_1_2ABI,
    address:
      jbethPaymentTerminal3_1_2Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_2Address
      ],
    functionName: 'prices',
    ...config,
  } as UseContractReadConfig<
    typeof jbethPaymentTerminal3_1_2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbethPaymentTerminal3_1_2ABI}__ and `functionName` set to `"projects"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1d9619E10086FdC1065B114298384aAe3F680CC0)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xd89Ed8008961F68Aab849f49e122f9a1266240Db)
 */
export function useJbethPaymentTerminal3_1_2Projects<
  TFunctionName extends 'projects',
  TSelectData = ReadContractResult<
    typeof jbethPaymentTerminal3_1_2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbethPaymentTerminal3_1_2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_2Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbethPaymentTerminal3_1_2ABI,
    address:
      jbethPaymentTerminal3_1_2Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_2Address
      ],
    functionName: 'projects',
    ...config,
  } as UseContractReadConfig<
    typeof jbethPaymentTerminal3_1_2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbethPaymentTerminal3_1_2ABI}__ and `functionName` set to `"splitsStore"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1d9619E10086FdC1065B114298384aAe3F680CC0)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xd89Ed8008961F68Aab849f49e122f9a1266240Db)
 */
export function useJbethPaymentTerminal3_1_2SplitsStore<
  TFunctionName extends 'splitsStore',
  TSelectData = ReadContractResult<
    typeof jbethPaymentTerminal3_1_2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbethPaymentTerminal3_1_2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_2Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbethPaymentTerminal3_1_2ABI,
    address:
      jbethPaymentTerminal3_1_2Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_2Address
      ],
    functionName: 'splitsStore',
    ...config,
  } as UseContractReadConfig<
    typeof jbethPaymentTerminal3_1_2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbethPaymentTerminal3_1_2ABI}__ and `functionName` set to `"store"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1d9619E10086FdC1065B114298384aAe3F680CC0)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xd89Ed8008961F68Aab849f49e122f9a1266240Db)
 */
export function useJbethPaymentTerminal3_1_2Store<
  TFunctionName extends 'store',
  TSelectData = ReadContractResult<
    typeof jbethPaymentTerminal3_1_2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbethPaymentTerminal3_1_2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_2Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbethPaymentTerminal3_1_2ABI,
    address:
      jbethPaymentTerminal3_1_2Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_2Address
      ],
    functionName: 'store',
    ...config,
  } as UseContractReadConfig<
    typeof jbethPaymentTerminal3_1_2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbethPaymentTerminal3_1_2ABI}__ and `functionName` set to `"supportsInterface"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1d9619E10086FdC1065B114298384aAe3F680CC0)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xd89Ed8008961F68Aab849f49e122f9a1266240Db)
 */
export function useJbethPaymentTerminal3_1_2SupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<
    typeof jbethPaymentTerminal3_1_2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbethPaymentTerminal3_1_2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_2Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbethPaymentTerminal3_1_2ABI,
    address:
      jbethPaymentTerminal3_1_2Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_2Address
      ],
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof jbethPaymentTerminal3_1_2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbethPaymentTerminal3_1_2ABI}__ and `functionName` set to `"token"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1d9619E10086FdC1065B114298384aAe3F680CC0)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xd89Ed8008961F68Aab849f49e122f9a1266240Db)
 */
export function useJbethPaymentTerminal3_1_2Token<
  TFunctionName extends 'token',
  TSelectData = ReadContractResult<
    typeof jbethPaymentTerminal3_1_2ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbethPaymentTerminal3_1_2ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_2Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbethPaymentTerminal3_1_2ABI,
    address:
      jbethPaymentTerminal3_1_2Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_2Address
      ],
    functionName: 'token',
    ...config,
  } as UseContractReadConfig<
    typeof jbethPaymentTerminal3_1_2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbethPaymentTerminal3_1_2ABI}__.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1d9619E10086FdC1065B114298384aAe3F680CC0)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xd89Ed8008961F68Aab849f49e122f9a1266240Db)
 */
export function useJbethPaymentTerminal3_1_2Write<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbethPaymentTerminal3_1_2Address,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbethPaymentTerminal3_1_2ABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      > & { address?: Address; chainId?: TChainId }
    : UseContractWriteConfig<
        typeof jbethPaymentTerminal3_1_2ABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof jbethPaymentTerminal3_1_2ABI,
    TFunctionName,
    TMode
  >({
    abi: jbethPaymentTerminal3_1_2ABI,
    address:
      jbethPaymentTerminal3_1_2Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_2Address
      ],
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbethPaymentTerminal3_1_2ABI}__ and `functionName` set to `"addToBalanceOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1d9619E10086FdC1065B114298384aAe3F680CC0)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xd89Ed8008961F68Aab849f49e122f9a1266240Db)
 */
export function useJbethPaymentTerminal3_1_2AddToBalanceOf<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbethPaymentTerminal3_1_2Address,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbethPaymentTerminal3_1_2ABI,
          'addToBalanceOf'
        >['request']['abi'],
        'addToBalanceOf',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'addToBalanceOf'
      }
    : UseContractWriteConfig<
        typeof jbethPaymentTerminal3_1_2ABI,
        'addToBalanceOf',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'addToBalanceOf'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof jbethPaymentTerminal3_1_2ABI,
    'addToBalanceOf',
    TMode
  >({
    abi: jbethPaymentTerminal3_1_2ABI,
    address:
      jbethPaymentTerminal3_1_2Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_2Address
      ],
    functionName: 'addToBalanceOf',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbethPaymentTerminal3_1_2ABI}__ and `functionName` set to `"distributePayoutsOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1d9619E10086FdC1065B114298384aAe3F680CC0)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xd89Ed8008961F68Aab849f49e122f9a1266240Db)
 */
export function useJbethPaymentTerminal3_1_2DistributePayoutsOf<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbethPaymentTerminal3_1_2Address,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbethPaymentTerminal3_1_2ABI,
          'distributePayoutsOf'
        >['request']['abi'],
        'distributePayoutsOf',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'distributePayoutsOf'
      }
    : UseContractWriteConfig<
        typeof jbethPaymentTerminal3_1_2ABI,
        'distributePayoutsOf',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'distributePayoutsOf'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof jbethPaymentTerminal3_1_2ABI,
    'distributePayoutsOf',
    TMode
  >({
    abi: jbethPaymentTerminal3_1_2ABI,
    address:
      jbethPaymentTerminal3_1_2Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_2Address
      ],
    functionName: 'distributePayoutsOf',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbethPaymentTerminal3_1_2ABI}__ and `functionName` set to `"migrate"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1d9619E10086FdC1065B114298384aAe3F680CC0)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xd89Ed8008961F68Aab849f49e122f9a1266240Db)
 */
export function useJbethPaymentTerminal3_1_2Migrate<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbethPaymentTerminal3_1_2Address,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbethPaymentTerminal3_1_2ABI,
          'migrate'
        >['request']['abi'],
        'migrate',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'migrate' }
    : UseContractWriteConfig<
        typeof jbethPaymentTerminal3_1_2ABI,
        'migrate',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'migrate'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof jbethPaymentTerminal3_1_2ABI,
    'migrate',
    TMode
  >({
    abi: jbethPaymentTerminal3_1_2ABI,
    address:
      jbethPaymentTerminal3_1_2Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_2Address
      ],
    functionName: 'migrate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbethPaymentTerminal3_1_2ABI}__ and `functionName` set to `"pay"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1d9619E10086FdC1065B114298384aAe3F680CC0)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xd89Ed8008961F68Aab849f49e122f9a1266240Db)
 */
export function useJbethPaymentTerminal3_1_2Pay<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbethPaymentTerminal3_1_2Address,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbethPaymentTerminal3_1_2ABI,
          'pay'
        >['request']['abi'],
        'pay',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'pay' }
    : UseContractWriteConfig<
        typeof jbethPaymentTerminal3_1_2ABI,
        'pay',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'pay'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof jbethPaymentTerminal3_1_2ABI, 'pay', TMode>({
    abi: jbethPaymentTerminal3_1_2ABI,
    address:
      jbethPaymentTerminal3_1_2Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_2Address
      ],
    functionName: 'pay',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbethPaymentTerminal3_1_2ABI}__ and `functionName` set to `"processFees"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1d9619E10086FdC1065B114298384aAe3F680CC0)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xd89Ed8008961F68Aab849f49e122f9a1266240Db)
 */
export function useJbethPaymentTerminal3_1_2ProcessFees<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbethPaymentTerminal3_1_2Address,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbethPaymentTerminal3_1_2ABI,
          'processFees'
        >['request']['abi'],
        'processFees',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'processFees'
      }
    : UseContractWriteConfig<
        typeof jbethPaymentTerminal3_1_2ABI,
        'processFees',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'processFees'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof jbethPaymentTerminal3_1_2ABI,
    'processFees',
    TMode
  >({
    abi: jbethPaymentTerminal3_1_2ABI,
    address:
      jbethPaymentTerminal3_1_2Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_2Address
      ],
    functionName: 'processFees',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbethPaymentTerminal3_1_2ABI}__ and `functionName` set to `"redeemTokensOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1d9619E10086FdC1065B114298384aAe3F680CC0)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xd89Ed8008961F68Aab849f49e122f9a1266240Db)
 */
export function useJbethPaymentTerminal3_1_2RedeemTokensOf<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbethPaymentTerminal3_1_2Address,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbethPaymentTerminal3_1_2ABI,
          'redeemTokensOf'
        >['request']['abi'],
        'redeemTokensOf',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'redeemTokensOf'
      }
    : UseContractWriteConfig<
        typeof jbethPaymentTerminal3_1_2ABI,
        'redeemTokensOf',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'redeemTokensOf'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof jbethPaymentTerminal3_1_2ABI,
    'redeemTokensOf',
    TMode
  >({
    abi: jbethPaymentTerminal3_1_2ABI,
    address:
      jbethPaymentTerminal3_1_2Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_2Address
      ],
    functionName: 'redeemTokensOf',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbethPaymentTerminal3_1_2ABI}__ and `functionName` set to `"renounceOwnership"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1d9619E10086FdC1065B114298384aAe3F680CC0)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xd89Ed8008961F68Aab849f49e122f9a1266240Db)
 */
export function useJbethPaymentTerminal3_1_2RenounceOwnership<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbethPaymentTerminal3_1_2Address,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbethPaymentTerminal3_1_2ABI,
          'renounceOwnership'
        >['request']['abi'],
        'renounceOwnership',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'renounceOwnership'
      }
    : UseContractWriteConfig<
        typeof jbethPaymentTerminal3_1_2ABI,
        'renounceOwnership',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof jbethPaymentTerminal3_1_2ABI,
    'renounceOwnership',
    TMode
  >({
    abi: jbethPaymentTerminal3_1_2ABI,
    address:
      jbethPaymentTerminal3_1_2Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_2Address
      ],
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbethPaymentTerminal3_1_2ABI}__ and `functionName` set to `"setFee"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1d9619E10086FdC1065B114298384aAe3F680CC0)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xd89Ed8008961F68Aab849f49e122f9a1266240Db)
 */
export function useJbethPaymentTerminal3_1_2SetFee<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbethPaymentTerminal3_1_2Address,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbethPaymentTerminal3_1_2ABI,
          'setFee'
        >['request']['abi'],
        'setFee',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'setFee' }
    : UseContractWriteConfig<
        typeof jbethPaymentTerminal3_1_2ABI,
        'setFee',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setFee'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof jbethPaymentTerminal3_1_2ABI, 'setFee', TMode>(
    {
      abi: jbethPaymentTerminal3_1_2ABI,
      address:
        jbethPaymentTerminal3_1_2Address[
          chainId as keyof typeof jbethPaymentTerminal3_1_2Address
        ],
      functionName: 'setFee',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbethPaymentTerminal3_1_2ABI}__ and `functionName` set to `"setFeeGauge"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1d9619E10086FdC1065B114298384aAe3F680CC0)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xd89Ed8008961F68Aab849f49e122f9a1266240Db)
 */
export function useJbethPaymentTerminal3_1_2SetFeeGauge<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbethPaymentTerminal3_1_2Address,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbethPaymentTerminal3_1_2ABI,
          'setFeeGauge'
        >['request']['abi'],
        'setFeeGauge',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'setFeeGauge'
      }
    : UseContractWriteConfig<
        typeof jbethPaymentTerminal3_1_2ABI,
        'setFeeGauge',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setFeeGauge'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof jbethPaymentTerminal3_1_2ABI,
    'setFeeGauge',
    TMode
  >({
    abi: jbethPaymentTerminal3_1_2ABI,
    address:
      jbethPaymentTerminal3_1_2Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_2Address
      ],
    functionName: 'setFeeGauge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbethPaymentTerminal3_1_2ABI}__ and `functionName` set to `"setFeelessAddress"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1d9619E10086FdC1065B114298384aAe3F680CC0)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xd89Ed8008961F68Aab849f49e122f9a1266240Db)
 */
export function useJbethPaymentTerminal3_1_2SetFeelessAddress<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbethPaymentTerminal3_1_2Address,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbethPaymentTerminal3_1_2ABI,
          'setFeelessAddress'
        >['request']['abi'],
        'setFeelessAddress',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'setFeelessAddress'
      }
    : UseContractWriteConfig<
        typeof jbethPaymentTerminal3_1_2ABI,
        'setFeelessAddress',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setFeelessAddress'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof jbethPaymentTerminal3_1_2ABI,
    'setFeelessAddress',
    TMode
  >({
    abi: jbethPaymentTerminal3_1_2ABI,
    address:
      jbethPaymentTerminal3_1_2Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_2Address
      ],
    functionName: 'setFeelessAddress',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbethPaymentTerminal3_1_2ABI}__ and `functionName` set to `"transferOwnership"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1d9619E10086FdC1065B114298384aAe3F680CC0)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xd89Ed8008961F68Aab849f49e122f9a1266240Db)
 */
export function useJbethPaymentTerminal3_1_2TransferOwnership<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbethPaymentTerminal3_1_2Address,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbethPaymentTerminal3_1_2ABI,
          'transferOwnership'
        >['request']['abi'],
        'transferOwnership',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'transferOwnership'
      }
    : UseContractWriteConfig<
        typeof jbethPaymentTerminal3_1_2ABI,
        'transferOwnership',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof jbethPaymentTerminal3_1_2ABI,
    'transferOwnership',
    TMode
  >({
    abi: jbethPaymentTerminal3_1_2ABI,
    address:
      jbethPaymentTerminal3_1_2Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_2Address
      ],
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbethPaymentTerminal3_1_2ABI}__ and `functionName` set to `"useAllowanceOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1d9619E10086FdC1065B114298384aAe3F680CC0)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xd89Ed8008961F68Aab849f49e122f9a1266240Db)
 */
export function useJbethPaymentTerminal3_1_2UseAllowanceOf<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbethPaymentTerminal3_1_2Address,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbethPaymentTerminal3_1_2ABI,
          'useAllowanceOf'
        >['request']['abi'],
        'useAllowanceOf',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'useAllowanceOf'
      }
    : UseContractWriteConfig<
        typeof jbethPaymentTerminal3_1_2ABI,
        'useAllowanceOf',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'useAllowanceOf'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof jbethPaymentTerminal3_1_2ABI,
    'useAllowanceOf',
    TMode
  >({
    abi: jbethPaymentTerminal3_1_2ABI,
    address:
      jbethPaymentTerminal3_1_2Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_2Address
      ],
    functionName: 'useAllowanceOf',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbethPaymentTerminal3_1_2ABI}__.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1d9619E10086FdC1065B114298384aAe3F680CC0)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xd89Ed8008961F68Aab849f49e122f9a1266240Db)
 */
export function usePrepareJbethPaymentTerminal3_1_2Write<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof jbethPaymentTerminal3_1_2ABI,
      TFunctionName
    >,
    'abi'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_2Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbethPaymentTerminal3_1_2ABI,
    address:
      jbethPaymentTerminal3_1_2Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_2Address
      ],
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof jbethPaymentTerminal3_1_2ABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbethPaymentTerminal3_1_2ABI}__ and `functionName` set to `"addToBalanceOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1d9619E10086FdC1065B114298384aAe3F680CC0)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xd89Ed8008961F68Aab849f49e122f9a1266240Db)
 */
export function usePrepareJbethPaymentTerminal3_1_2AddToBalanceOf(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof jbethPaymentTerminal3_1_2ABI,
      'addToBalanceOf'
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_2Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbethPaymentTerminal3_1_2ABI,
    address:
      jbethPaymentTerminal3_1_2Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_2Address
      ],
    functionName: 'addToBalanceOf',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof jbethPaymentTerminal3_1_2ABI,
    'addToBalanceOf'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbethPaymentTerminal3_1_2ABI}__ and `functionName` set to `"distributePayoutsOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1d9619E10086FdC1065B114298384aAe3F680CC0)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xd89Ed8008961F68Aab849f49e122f9a1266240Db)
 */
export function usePrepareJbethPaymentTerminal3_1_2DistributePayoutsOf(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof jbethPaymentTerminal3_1_2ABI,
      'distributePayoutsOf'
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_2Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbethPaymentTerminal3_1_2ABI,
    address:
      jbethPaymentTerminal3_1_2Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_2Address
      ],
    functionName: 'distributePayoutsOf',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof jbethPaymentTerminal3_1_2ABI,
    'distributePayoutsOf'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbethPaymentTerminal3_1_2ABI}__ and `functionName` set to `"migrate"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1d9619E10086FdC1065B114298384aAe3F680CC0)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xd89Ed8008961F68Aab849f49e122f9a1266240Db)
 */
export function usePrepareJbethPaymentTerminal3_1_2Migrate(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof jbethPaymentTerminal3_1_2ABI,
      'migrate'
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_2Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbethPaymentTerminal3_1_2ABI,
    address:
      jbethPaymentTerminal3_1_2Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_2Address
      ],
    functionName: 'migrate',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof jbethPaymentTerminal3_1_2ABI,
    'migrate'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbethPaymentTerminal3_1_2ABI}__ and `functionName` set to `"pay"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1d9619E10086FdC1065B114298384aAe3F680CC0)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xd89Ed8008961F68Aab849f49e122f9a1266240Db)
 */
export function usePrepareJbethPaymentTerminal3_1_2Pay(
  config: Omit<
    UsePrepareContractWriteConfig<typeof jbethPaymentTerminal3_1_2ABI, 'pay'>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_2Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbethPaymentTerminal3_1_2ABI,
    address:
      jbethPaymentTerminal3_1_2Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_2Address
      ],
    functionName: 'pay',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof jbethPaymentTerminal3_1_2ABI,
    'pay'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbethPaymentTerminal3_1_2ABI}__ and `functionName` set to `"processFees"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1d9619E10086FdC1065B114298384aAe3F680CC0)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xd89Ed8008961F68Aab849f49e122f9a1266240Db)
 */
export function usePrepareJbethPaymentTerminal3_1_2ProcessFees(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof jbethPaymentTerminal3_1_2ABI,
      'processFees'
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_2Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbethPaymentTerminal3_1_2ABI,
    address:
      jbethPaymentTerminal3_1_2Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_2Address
      ],
    functionName: 'processFees',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof jbethPaymentTerminal3_1_2ABI,
    'processFees'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbethPaymentTerminal3_1_2ABI}__ and `functionName` set to `"redeemTokensOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1d9619E10086FdC1065B114298384aAe3F680CC0)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xd89Ed8008961F68Aab849f49e122f9a1266240Db)
 */
export function usePrepareJbethPaymentTerminal3_1_2RedeemTokensOf(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof jbethPaymentTerminal3_1_2ABI,
      'redeemTokensOf'
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_2Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbethPaymentTerminal3_1_2ABI,
    address:
      jbethPaymentTerminal3_1_2Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_2Address
      ],
    functionName: 'redeemTokensOf',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof jbethPaymentTerminal3_1_2ABI,
    'redeemTokensOf'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbethPaymentTerminal3_1_2ABI}__ and `functionName` set to `"renounceOwnership"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1d9619E10086FdC1065B114298384aAe3F680CC0)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xd89Ed8008961F68Aab849f49e122f9a1266240Db)
 */
export function usePrepareJbethPaymentTerminal3_1_2RenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof jbethPaymentTerminal3_1_2ABI,
      'renounceOwnership'
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_2Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbethPaymentTerminal3_1_2ABI,
    address:
      jbethPaymentTerminal3_1_2Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_2Address
      ],
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof jbethPaymentTerminal3_1_2ABI,
    'renounceOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbethPaymentTerminal3_1_2ABI}__ and `functionName` set to `"setFee"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1d9619E10086FdC1065B114298384aAe3F680CC0)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xd89Ed8008961F68Aab849f49e122f9a1266240Db)
 */
export function usePrepareJbethPaymentTerminal3_1_2SetFee(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof jbethPaymentTerminal3_1_2ABI,
      'setFee'
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_2Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbethPaymentTerminal3_1_2ABI,
    address:
      jbethPaymentTerminal3_1_2Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_2Address
      ],
    functionName: 'setFee',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof jbethPaymentTerminal3_1_2ABI,
    'setFee'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbethPaymentTerminal3_1_2ABI}__ and `functionName` set to `"setFeeGauge"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1d9619E10086FdC1065B114298384aAe3F680CC0)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xd89Ed8008961F68Aab849f49e122f9a1266240Db)
 */
export function usePrepareJbethPaymentTerminal3_1_2SetFeeGauge(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof jbethPaymentTerminal3_1_2ABI,
      'setFeeGauge'
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_2Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbethPaymentTerminal3_1_2ABI,
    address:
      jbethPaymentTerminal3_1_2Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_2Address
      ],
    functionName: 'setFeeGauge',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof jbethPaymentTerminal3_1_2ABI,
    'setFeeGauge'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbethPaymentTerminal3_1_2ABI}__ and `functionName` set to `"setFeelessAddress"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1d9619E10086FdC1065B114298384aAe3F680CC0)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xd89Ed8008961F68Aab849f49e122f9a1266240Db)
 */
export function usePrepareJbethPaymentTerminal3_1_2SetFeelessAddress(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof jbethPaymentTerminal3_1_2ABI,
      'setFeelessAddress'
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_2Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbethPaymentTerminal3_1_2ABI,
    address:
      jbethPaymentTerminal3_1_2Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_2Address
      ],
    functionName: 'setFeelessAddress',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof jbethPaymentTerminal3_1_2ABI,
    'setFeelessAddress'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbethPaymentTerminal3_1_2ABI}__ and `functionName` set to `"transferOwnership"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1d9619E10086FdC1065B114298384aAe3F680CC0)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xd89Ed8008961F68Aab849f49e122f9a1266240Db)
 */
export function usePrepareJbethPaymentTerminal3_1_2TransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof jbethPaymentTerminal3_1_2ABI,
      'transferOwnership'
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_2Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbethPaymentTerminal3_1_2ABI,
    address:
      jbethPaymentTerminal3_1_2Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_2Address
      ],
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof jbethPaymentTerminal3_1_2ABI,
    'transferOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbethPaymentTerminal3_1_2ABI}__ and `functionName` set to `"useAllowanceOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1d9619E10086FdC1065B114298384aAe3F680CC0)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xd89Ed8008961F68Aab849f49e122f9a1266240Db)
 */
export function usePrepareJbethPaymentTerminal3_1_2UseAllowanceOf(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof jbethPaymentTerminal3_1_2ABI,
      'useAllowanceOf'
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_2Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbethPaymentTerminal3_1_2ABI,
    address:
      jbethPaymentTerminal3_1_2Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_2Address
      ],
    functionName: 'useAllowanceOf',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof jbethPaymentTerminal3_1_2ABI,
    'useAllowanceOf'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbethPaymentTerminal3_1_2ABI}__.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1d9619E10086FdC1065B114298384aAe3F680CC0)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xd89Ed8008961F68Aab849f49e122f9a1266240Db)
 */
export function useJbethPaymentTerminal3_1_2Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof jbethPaymentTerminal3_1_2ABI, TEventName>,
    'abi'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_2Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbethPaymentTerminal3_1_2ABI,
    address:
      jbethPaymentTerminal3_1_2Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_2Address
      ],
    ...config,
  } as UseContractEventConfig<typeof jbethPaymentTerminal3_1_2ABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbethPaymentTerminal3_1_2ABI}__ and `eventName` set to `"AddToBalance"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1d9619E10086FdC1065B114298384aAe3F680CC0)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xd89Ed8008961F68Aab849f49e122f9a1266240Db)
 */
export function useJbethPaymentTerminal3_1_2AddToBalanceEvent(
  config: Omit<
    UseContractEventConfig<typeof jbethPaymentTerminal3_1_2ABI, 'AddToBalance'>,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_2Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbethPaymentTerminal3_1_2ABI,
    address:
      jbethPaymentTerminal3_1_2Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_2Address
      ],
    eventName: 'AddToBalance',
    ...config,
  } as UseContractEventConfig<
    typeof jbethPaymentTerminal3_1_2ABI,
    'AddToBalance'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbethPaymentTerminal3_1_2ABI}__ and `eventName` set to `"DelegateDidPay"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1d9619E10086FdC1065B114298384aAe3F680CC0)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xd89Ed8008961F68Aab849f49e122f9a1266240Db)
 */
export function useJbethPaymentTerminal3_1_2DelegateDidPayEvent(
  config: Omit<
    UseContractEventConfig<
      typeof jbethPaymentTerminal3_1_2ABI,
      'DelegateDidPay'
    >,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_2Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbethPaymentTerminal3_1_2ABI,
    address:
      jbethPaymentTerminal3_1_2Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_2Address
      ],
    eventName: 'DelegateDidPay',
    ...config,
  } as UseContractEventConfig<
    typeof jbethPaymentTerminal3_1_2ABI,
    'DelegateDidPay'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbethPaymentTerminal3_1_2ABI}__ and `eventName` set to `"DelegateDidRedeem"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1d9619E10086FdC1065B114298384aAe3F680CC0)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xd89Ed8008961F68Aab849f49e122f9a1266240Db)
 */
export function useJbethPaymentTerminal3_1_2DelegateDidRedeemEvent(
  config: Omit<
    UseContractEventConfig<
      typeof jbethPaymentTerminal3_1_2ABI,
      'DelegateDidRedeem'
    >,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_2Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbethPaymentTerminal3_1_2ABI,
    address:
      jbethPaymentTerminal3_1_2Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_2Address
      ],
    eventName: 'DelegateDidRedeem',
    ...config,
  } as UseContractEventConfig<
    typeof jbethPaymentTerminal3_1_2ABI,
    'DelegateDidRedeem'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbethPaymentTerminal3_1_2ABI}__ and `eventName` set to `"DistributePayouts"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1d9619E10086FdC1065B114298384aAe3F680CC0)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xd89Ed8008961F68Aab849f49e122f9a1266240Db)
 */
export function useJbethPaymentTerminal3_1_2DistributePayoutsEvent(
  config: Omit<
    UseContractEventConfig<
      typeof jbethPaymentTerminal3_1_2ABI,
      'DistributePayouts'
    >,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_2Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbethPaymentTerminal3_1_2ABI,
    address:
      jbethPaymentTerminal3_1_2Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_2Address
      ],
    eventName: 'DistributePayouts',
    ...config,
  } as UseContractEventConfig<
    typeof jbethPaymentTerminal3_1_2ABI,
    'DistributePayouts'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbethPaymentTerminal3_1_2ABI}__ and `eventName` set to `"DistributeToPayoutSplit"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1d9619E10086FdC1065B114298384aAe3F680CC0)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xd89Ed8008961F68Aab849f49e122f9a1266240Db)
 */
export function useJbethPaymentTerminal3_1_2DistributeToPayoutSplitEvent(
  config: Omit<
    UseContractEventConfig<
      typeof jbethPaymentTerminal3_1_2ABI,
      'DistributeToPayoutSplit'
    >,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_2Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbethPaymentTerminal3_1_2ABI,
    address:
      jbethPaymentTerminal3_1_2Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_2Address
      ],
    eventName: 'DistributeToPayoutSplit',
    ...config,
  } as UseContractEventConfig<
    typeof jbethPaymentTerminal3_1_2ABI,
    'DistributeToPayoutSplit'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbethPaymentTerminal3_1_2ABI}__ and `eventName` set to `"FeeReverted"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1d9619E10086FdC1065B114298384aAe3F680CC0)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xd89Ed8008961F68Aab849f49e122f9a1266240Db)
 */
export function useJbethPaymentTerminal3_1_2FeeRevertedEvent(
  config: Omit<
    UseContractEventConfig<typeof jbethPaymentTerminal3_1_2ABI, 'FeeReverted'>,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_2Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbethPaymentTerminal3_1_2ABI,
    address:
      jbethPaymentTerminal3_1_2Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_2Address
      ],
    eventName: 'FeeReverted',
    ...config,
  } as UseContractEventConfig<
    typeof jbethPaymentTerminal3_1_2ABI,
    'FeeReverted'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbethPaymentTerminal3_1_2ABI}__ and `eventName` set to `"HoldFee"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1d9619E10086FdC1065B114298384aAe3F680CC0)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xd89Ed8008961F68Aab849f49e122f9a1266240Db)
 */
export function useJbethPaymentTerminal3_1_2HoldFeeEvent(
  config: Omit<
    UseContractEventConfig<typeof jbethPaymentTerminal3_1_2ABI, 'HoldFee'>,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_2Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbethPaymentTerminal3_1_2ABI,
    address:
      jbethPaymentTerminal3_1_2Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_2Address
      ],
    eventName: 'HoldFee',
    ...config,
  } as UseContractEventConfig<typeof jbethPaymentTerminal3_1_2ABI, 'HoldFee'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbethPaymentTerminal3_1_2ABI}__ and `eventName` set to `"Migrate"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1d9619E10086FdC1065B114298384aAe3F680CC0)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xd89Ed8008961F68Aab849f49e122f9a1266240Db)
 */
export function useJbethPaymentTerminal3_1_2MigrateEvent(
  config: Omit<
    UseContractEventConfig<typeof jbethPaymentTerminal3_1_2ABI, 'Migrate'>,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_2Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbethPaymentTerminal3_1_2ABI,
    address:
      jbethPaymentTerminal3_1_2Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_2Address
      ],
    eventName: 'Migrate',
    ...config,
  } as UseContractEventConfig<typeof jbethPaymentTerminal3_1_2ABI, 'Migrate'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbethPaymentTerminal3_1_2ABI}__ and `eventName` set to `"OwnershipTransferred"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1d9619E10086FdC1065B114298384aAe3F680CC0)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xd89Ed8008961F68Aab849f49e122f9a1266240Db)
 */
export function useJbethPaymentTerminal3_1_2OwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<
      typeof jbethPaymentTerminal3_1_2ABI,
      'OwnershipTransferred'
    >,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_2Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbethPaymentTerminal3_1_2ABI,
    address:
      jbethPaymentTerminal3_1_2Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_2Address
      ],
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<
    typeof jbethPaymentTerminal3_1_2ABI,
    'OwnershipTransferred'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbethPaymentTerminal3_1_2ABI}__ and `eventName` set to `"Pay"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1d9619E10086FdC1065B114298384aAe3F680CC0)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xd89Ed8008961F68Aab849f49e122f9a1266240Db)
 */
export function useJbethPaymentTerminal3_1_2PayEvent(
  config: Omit<
    UseContractEventConfig<typeof jbethPaymentTerminal3_1_2ABI, 'Pay'>,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_2Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbethPaymentTerminal3_1_2ABI,
    address:
      jbethPaymentTerminal3_1_2Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_2Address
      ],
    eventName: 'Pay',
    ...config,
  } as UseContractEventConfig<typeof jbethPaymentTerminal3_1_2ABI, 'Pay'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbethPaymentTerminal3_1_2ABI}__ and `eventName` set to `"PayoutReverted"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1d9619E10086FdC1065B114298384aAe3F680CC0)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xd89Ed8008961F68Aab849f49e122f9a1266240Db)
 */
export function useJbethPaymentTerminal3_1_2PayoutRevertedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof jbethPaymentTerminal3_1_2ABI,
      'PayoutReverted'
    >,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_2Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbethPaymentTerminal3_1_2ABI,
    address:
      jbethPaymentTerminal3_1_2Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_2Address
      ],
    eventName: 'PayoutReverted',
    ...config,
  } as UseContractEventConfig<
    typeof jbethPaymentTerminal3_1_2ABI,
    'PayoutReverted'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbethPaymentTerminal3_1_2ABI}__ and `eventName` set to `"ProcessFee"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1d9619E10086FdC1065B114298384aAe3F680CC0)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xd89Ed8008961F68Aab849f49e122f9a1266240Db)
 */
export function useJbethPaymentTerminal3_1_2ProcessFeeEvent(
  config: Omit<
    UseContractEventConfig<typeof jbethPaymentTerminal3_1_2ABI, 'ProcessFee'>,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_2Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbethPaymentTerminal3_1_2ABI,
    address:
      jbethPaymentTerminal3_1_2Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_2Address
      ],
    eventName: 'ProcessFee',
    ...config,
  } as UseContractEventConfig<
    typeof jbethPaymentTerminal3_1_2ABI,
    'ProcessFee'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbethPaymentTerminal3_1_2ABI}__ and `eventName` set to `"RedeemTokens"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1d9619E10086FdC1065B114298384aAe3F680CC0)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xd89Ed8008961F68Aab849f49e122f9a1266240Db)
 */
export function useJbethPaymentTerminal3_1_2RedeemTokensEvent(
  config: Omit<
    UseContractEventConfig<typeof jbethPaymentTerminal3_1_2ABI, 'RedeemTokens'>,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_2Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbethPaymentTerminal3_1_2ABI,
    address:
      jbethPaymentTerminal3_1_2Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_2Address
      ],
    eventName: 'RedeemTokens',
    ...config,
  } as UseContractEventConfig<
    typeof jbethPaymentTerminal3_1_2ABI,
    'RedeemTokens'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbethPaymentTerminal3_1_2ABI}__ and `eventName` set to `"RefundHeldFees"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1d9619E10086FdC1065B114298384aAe3F680CC0)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xd89Ed8008961F68Aab849f49e122f9a1266240Db)
 */
export function useJbethPaymentTerminal3_1_2RefundHeldFeesEvent(
  config: Omit<
    UseContractEventConfig<
      typeof jbethPaymentTerminal3_1_2ABI,
      'RefundHeldFees'
    >,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_2Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbethPaymentTerminal3_1_2ABI,
    address:
      jbethPaymentTerminal3_1_2Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_2Address
      ],
    eventName: 'RefundHeldFees',
    ...config,
  } as UseContractEventConfig<
    typeof jbethPaymentTerminal3_1_2ABI,
    'RefundHeldFees'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbethPaymentTerminal3_1_2ABI}__ and `eventName` set to `"SetFee"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1d9619E10086FdC1065B114298384aAe3F680CC0)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xd89Ed8008961F68Aab849f49e122f9a1266240Db)
 */
export function useJbethPaymentTerminal3_1_2SetFeeEvent(
  config: Omit<
    UseContractEventConfig<typeof jbethPaymentTerminal3_1_2ABI, 'SetFee'>,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_2Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbethPaymentTerminal3_1_2ABI,
    address:
      jbethPaymentTerminal3_1_2Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_2Address
      ],
    eventName: 'SetFee',
    ...config,
  } as UseContractEventConfig<typeof jbethPaymentTerminal3_1_2ABI, 'SetFee'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbethPaymentTerminal3_1_2ABI}__ and `eventName` set to `"SetFeeGauge"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1d9619E10086FdC1065B114298384aAe3F680CC0)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xd89Ed8008961F68Aab849f49e122f9a1266240Db)
 */
export function useJbethPaymentTerminal3_1_2SetFeeGaugeEvent(
  config: Omit<
    UseContractEventConfig<typeof jbethPaymentTerminal3_1_2ABI, 'SetFeeGauge'>,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_2Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbethPaymentTerminal3_1_2ABI,
    address:
      jbethPaymentTerminal3_1_2Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_2Address
      ],
    eventName: 'SetFeeGauge',
    ...config,
  } as UseContractEventConfig<
    typeof jbethPaymentTerminal3_1_2ABI,
    'SetFeeGauge'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbethPaymentTerminal3_1_2ABI}__ and `eventName` set to `"SetFeelessAddress"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1d9619E10086FdC1065B114298384aAe3F680CC0)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xd89Ed8008961F68Aab849f49e122f9a1266240Db)
 */
export function useJbethPaymentTerminal3_1_2SetFeelessAddressEvent(
  config: Omit<
    UseContractEventConfig<
      typeof jbethPaymentTerminal3_1_2ABI,
      'SetFeelessAddress'
    >,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_2Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbethPaymentTerminal3_1_2ABI,
    address:
      jbethPaymentTerminal3_1_2Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_2Address
      ],
    eventName: 'SetFeelessAddress',
    ...config,
  } as UseContractEventConfig<
    typeof jbethPaymentTerminal3_1_2ABI,
    'SetFeelessAddress'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbethPaymentTerminal3_1_2ABI}__ and `eventName` set to `"UseAllowance"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1d9619E10086FdC1065B114298384aAe3F680CC0)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xd89Ed8008961F68Aab849f49e122f9a1266240Db)
 */
export function useJbethPaymentTerminal3_1_2UseAllowanceEvent(
  config: Omit<
    UseContractEventConfig<typeof jbethPaymentTerminal3_1_2ABI, 'UseAllowance'>,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbethPaymentTerminal3_1_2Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbethPaymentTerminal3_1_2ABI,
    address:
      jbethPaymentTerminal3_1_2Address[
        chainId as keyof typeof jbethPaymentTerminal3_1_2Address
      ],
    eventName: 'UseAllowance',
    ...config,
  } as UseContractEventConfig<
    typeof jbethPaymentTerminal3_1_2ABI,
    'UseAllowance'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbFundingCycleStoreABI}__.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x6f18cF9173136c0B5A6eBF45f19D58d3ff2E17e6)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xB9Ee9d8203467f6EC0eAC81163d210bd1a7d3b55)
 */
export function useJbFundingCycleStoreRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof jbFundingCycleStoreABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbFundingCycleStoreABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > & { chainId?: keyof typeof jbFundingCycleStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbFundingCycleStoreABI,
    address:
      jbFundingCycleStoreAddress[
        chainId as keyof typeof jbFundingCycleStoreAddress
      ],
    ...config,
  } as UseContractReadConfig<
    typeof jbFundingCycleStoreABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbFundingCycleStoreABI}__ and `functionName` set to `"currentBallotStateOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x6f18cF9173136c0B5A6eBF45f19D58d3ff2E17e6)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xB9Ee9d8203467f6EC0eAC81163d210bd1a7d3b55)
 */
export function useJbFundingCycleStoreCurrentBallotStateOf<
  TFunctionName extends 'currentBallotStateOf',
  TSelectData = ReadContractResult<
    typeof jbFundingCycleStoreABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbFundingCycleStoreABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbFundingCycleStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbFundingCycleStoreABI,
    address:
      jbFundingCycleStoreAddress[
        chainId as keyof typeof jbFundingCycleStoreAddress
      ],
    functionName: 'currentBallotStateOf',
    ...config,
  } as UseContractReadConfig<
    typeof jbFundingCycleStoreABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbFundingCycleStoreABI}__ and `functionName` set to `"currentOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x6f18cF9173136c0B5A6eBF45f19D58d3ff2E17e6)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xB9Ee9d8203467f6EC0eAC81163d210bd1a7d3b55)
 */
export function useJbFundingCycleStoreCurrentOf<
  TFunctionName extends 'currentOf',
  TSelectData = ReadContractResult<
    typeof jbFundingCycleStoreABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbFundingCycleStoreABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbFundingCycleStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbFundingCycleStoreABI,
    address:
      jbFundingCycleStoreAddress[
        chainId as keyof typeof jbFundingCycleStoreAddress
      ],
    functionName: 'currentOf',
    ...config,
  } as UseContractReadConfig<
    typeof jbFundingCycleStoreABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbFundingCycleStoreABI}__ and `functionName` set to `"directory"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x6f18cF9173136c0B5A6eBF45f19D58d3ff2E17e6)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xB9Ee9d8203467f6EC0eAC81163d210bd1a7d3b55)
 */
export function useJbFundingCycleStoreDirectory<
  TFunctionName extends 'directory',
  TSelectData = ReadContractResult<
    typeof jbFundingCycleStoreABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbFundingCycleStoreABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbFundingCycleStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbFundingCycleStoreABI,
    address:
      jbFundingCycleStoreAddress[
        chainId as keyof typeof jbFundingCycleStoreAddress
      ],
    functionName: 'directory',
    ...config,
  } as UseContractReadConfig<
    typeof jbFundingCycleStoreABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbFundingCycleStoreABI}__ and `functionName` set to `"get"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x6f18cF9173136c0B5A6eBF45f19D58d3ff2E17e6)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xB9Ee9d8203467f6EC0eAC81163d210bd1a7d3b55)
 */
export function useJbFundingCycleStoreGet<
  TFunctionName extends 'get',
  TSelectData = ReadContractResult<
    typeof jbFundingCycleStoreABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbFundingCycleStoreABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbFundingCycleStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbFundingCycleStoreABI,
    address:
      jbFundingCycleStoreAddress[
        chainId as keyof typeof jbFundingCycleStoreAddress
      ],
    functionName: 'get',
    ...config,
  } as UseContractReadConfig<
    typeof jbFundingCycleStoreABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbFundingCycleStoreABI}__ and `functionName` set to `"latestConfigurationOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x6f18cF9173136c0B5A6eBF45f19D58d3ff2E17e6)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xB9Ee9d8203467f6EC0eAC81163d210bd1a7d3b55)
 */
export function useJbFundingCycleStoreLatestConfigurationOf<
  TFunctionName extends 'latestConfigurationOf',
  TSelectData = ReadContractResult<
    typeof jbFundingCycleStoreABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbFundingCycleStoreABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbFundingCycleStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbFundingCycleStoreABI,
    address:
      jbFundingCycleStoreAddress[
        chainId as keyof typeof jbFundingCycleStoreAddress
      ],
    functionName: 'latestConfigurationOf',
    ...config,
  } as UseContractReadConfig<
    typeof jbFundingCycleStoreABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbFundingCycleStoreABI}__ and `functionName` set to `"latestConfiguredOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x6f18cF9173136c0B5A6eBF45f19D58d3ff2E17e6)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xB9Ee9d8203467f6EC0eAC81163d210bd1a7d3b55)
 */
export function useJbFundingCycleStoreLatestConfiguredOf<
  TFunctionName extends 'latestConfiguredOf',
  TSelectData = ReadContractResult<
    typeof jbFundingCycleStoreABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbFundingCycleStoreABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbFundingCycleStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbFundingCycleStoreABI,
    address:
      jbFundingCycleStoreAddress[
        chainId as keyof typeof jbFundingCycleStoreAddress
      ],
    functionName: 'latestConfiguredOf',
    ...config,
  } as UseContractReadConfig<
    typeof jbFundingCycleStoreABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbFundingCycleStoreABI}__ and `functionName` set to `"queuedOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x6f18cF9173136c0B5A6eBF45f19D58d3ff2E17e6)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xB9Ee9d8203467f6EC0eAC81163d210bd1a7d3b55)
 */
export function useJbFundingCycleStoreQueuedOf<
  TFunctionName extends 'queuedOf',
  TSelectData = ReadContractResult<
    typeof jbFundingCycleStoreABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbFundingCycleStoreABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbFundingCycleStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbFundingCycleStoreABI,
    address:
      jbFundingCycleStoreAddress[
        chainId as keyof typeof jbFundingCycleStoreAddress
      ],
    functionName: 'queuedOf',
    ...config,
  } as UseContractReadConfig<
    typeof jbFundingCycleStoreABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbFundingCycleStoreABI}__.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x6f18cF9173136c0B5A6eBF45f19D58d3ff2E17e6)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xB9Ee9d8203467f6EC0eAC81163d210bd1a7d3b55)
 */
export function useJbFundingCycleStoreWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbFundingCycleStoreAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbFundingCycleStoreABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      > & { address?: Address; chainId?: TChainId }
    : UseContractWriteConfig<
        typeof jbFundingCycleStoreABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof jbFundingCycleStoreABI, TFunctionName, TMode>({
    abi: jbFundingCycleStoreABI,
    address:
      jbFundingCycleStoreAddress[
        chainId as keyof typeof jbFundingCycleStoreAddress
      ],
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbFundingCycleStoreABI}__ and `functionName` set to `"configureFor"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x6f18cF9173136c0B5A6eBF45f19D58d3ff2E17e6)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xB9Ee9d8203467f6EC0eAC81163d210bd1a7d3b55)
 */
export function useJbFundingCycleStoreConfigureFor<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbFundingCycleStoreAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbFundingCycleStoreABI,
          'configureFor'
        >['request']['abi'],
        'configureFor',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'configureFor'
      }
    : UseContractWriteConfig<
        typeof jbFundingCycleStoreABI,
        'configureFor',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'configureFor'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof jbFundingCycleStoreABI, 'configureFor', TMode>(
    {
      abi: jbFundingCycleStoreABI,
      address:
        jbFundingCycleStoreAddress[
          chainId as keyof typeof jbFundingCycleStoreAddress
        ],
      functionName: 'configureFor',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbFundingCycleStoreABI}__.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x6f18cF9173136c0B5A6eBF45f19D58d3ff2E17e6)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xB9Ee9d8203467f6EC0eAC81163d210bd1a7d3b55)
 */
export function usePrepareJbFundingCycleStoreWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof jbFundingCycleStoreABI, TFunctionName>,
    'abi'
  > & { chainId?: keyof typeof jbFundingCycleStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbFundingCycleStoreABI,
    address:
      jbFundingCycleStoreAddress[
        chainId as keyof typeof jbFundingCycleStoreAddress
      ],
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof jbFundingCycleStoreABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbFundingCycleStoreABI}__ and `functionName` set to `"configureFor"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x6f18cF9173136c0B5A6eBF45f19D58d3ff2E17e6)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xB9Ee9d8203467f6EC0eAC81163d210bd1a7d3b55)
 */
export function usePrepareJbFundingCycleStoreConfigureFor(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof jbFundingCycleStoreABI,
      'configureFor'
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbFundingCycleStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbFundingCycleStoreABI,
    address:
      jbFundingCycleStoreAddress[
        chainId as keyof typeof jbFundingCycleStoreAddress
      ],
    functionName: 'configureFor',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof jbFundingCycleStoreABI,
    'configureFor'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbFundingCycleStoreABI}__.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x6f18cF9173136c0B5A6eBF45f19D58d3ff2E17e6)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xB9Ee9d8203467f6EC0eAC81163d210bd1a7d3b55)
 */
export function useJbFundingCycleStoreEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof jbFundingCycleStoreABI, TEventName>,
    'abi'
  > & { chainId?: keyof typeof jbFundingCycleStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbFundingCycleStoreABI,
    address:
      jbFundingCycleStoreAddress[
        chainId as keyof typeof jbFundingCycleStoreAddress
      ],
    ...config,
  } as UseContractEventConfig<typeof jbFundingCycleStoreABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbFundingCycleStoreABI}__ and `eventName` set to `"Configure"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x6f18cF9173136c0B5A6eBF45f19D58d3ff2E17e6)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xB9Ee9d8203467f6EC0eAC81163d210bd1a7d3b55)
 */
export function useJbFundingCycleStoreConfigureEvent(
  config: Omit<
    UseContractEventConfig<typeof jbFundingCycleStoreABI, 'Configure'>,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbFundingCycleStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbFundingCycleStoreABI,
    address:
      jbFundingCycleStoreAddress[
        chainId as keyof typeof jbFundingCycleStoreAddress
      ],
    eventName: 'Configure',
    ...config,
  } as UseContractEventConfig<typeof jbFundingCycleStoreABI, 'Configure'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbFundingCycleStoreABI}__ and `eventName` set to `"Init"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x6f18cF9173136c0B5A6eBF45f19D58d3ff2E17e6)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xB9Ee9d8203467f6EC0eAC81163d210bd1a7d3b55)
 */
export function useJbFundingCycleStoreInitEvent(
  config: Omit<
    UseContractEventConfig<typeof jbFundingCycleStoreABI, 'Init'>,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbFundingCycleStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbFundingCycleStoreABI,
    address:
      jbFundingCycleStoreAddress[
        chainId as keyof typeof jbFundingCycleStoreAddress
      ],
    eventName: 'Init',
    ...config,
  } as UseContractEventConfig<typeof jbFundingCycleStoreABI, 'Init'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbFundAccessConstraintsStoreABI}__.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xA4425A1E5b7B28Cb689719B1428e3088C1F89E30)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xbF8b5ea02e50073348767fd9418beDEd30C835D4)
 */
export function useJbFundAccessConstraintsStoreRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof jbFundAccessConstraintsStoreABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbFundAccessConstraintsStoreABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > & {
    chainId?: keyof typeof jbFundAccessConstraintsStoreAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbFundAccessConstraintsStoreABI,
    address:
      jbFundAccessConstraintsStoreAddress[
        chainId as keyof typeof jbFundAccessConstraintsStoreAddress
      ],
    ...config,
  } as UseContractReadConfig<
    typeof jbFundAccessConstraintsStoreABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbFundAccessConstraintsStoreABI}__ and `functionName` set to `"directory"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xA4425A1E5b7B28Cb689719B1428e3088C1F89E30)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xbF8b5ea02e50073348767fd9418beDEd30C835D4)
 */
export function useJbFundAccessConstraintsStoreDirectory<
  TFunctionName extends 'directory',
  TSelectData = ReadContractResult<
    typeof jbFundAccessConstraintsStoreABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbFundAccessConstraintsStoreABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & {
    chainId?: keyof typeof jbFundAccessConstraintsStoreAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbFundAccessConstraintsStoreABI,
    address:
      jbFundAccessConstraintsStoreAddress[
        chainId as keyof typeof jbFundAccessConstraintsStoreAddress
      ],
    functionName: 'directory',
    ...config,
  } as UseContractReadConfig<
    typeof jbFundAccessConstraintsStoreABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbFundAccessConstraintsStoreABI}__ and `functionName` set to `"distributionLimitOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xA4425A1E5b7B28Cb689719B1428e3088C1F89E30)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xbF8b5ea02e50073348767fd9418beDEd30C835D4)
 */
export function useJbFundAccessConstraintsStoreDistributionLimitOf<
  TFunctionName extends 'distributionLimitOf',
  TSelectData = ReadContractResult<
    typeof jbFundAccessConstraintsStoreABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbFundAccessConstraintsStoreABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & {
    chainId?: keyof typeof jbFundAccessConstraintsStoreAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbFundAccessConstraintsStoreABI,
    address:
      jbFundAccessConstraintsStoreAddress[
        chainId as keyof typeof jbFundAccessConstraintsStoreAddress
      ],
    functionName: 'distributionLimitOf',
    ...config,
  } as UseContractReadConfig<
    typeof jbFundAccessConstraintsStoreABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbFundAccessConstraintsStoreABI}__ and `functionName` set to `"overflowAllowanceOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xA4425A1E5b7B28Cb689719B1428e3088C1F89E30)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xbF8b5ea02e50073348767fd9418beDEd30C835D4)
 */
export function useJbFundAccessConstraintsStoreOverflowAllowanceOf<
  TFunctionName extends 'overflowAllowanceOf',
  TSelectData = ReadContractResult<
    typeof jbFundAccessConstraintsStoreABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbFundAccessConstraintsStoreABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & {
    chainId?: keyof typeof jbFundAccessConstraintsStoreAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbFundAccessConstraintsStoreABI,
    address:
      jbFundAccessConstraintsStoreAddress[
        chainId as keyof typeof jbFundAccessConstraintsStoreAddress
      ],
    functionName: 'overflowAllowanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof jbFundAccessConstraintsStoreABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbFundAccessConstraintsStoreABI}__ and `functionName` set to `"supportsInterface"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xA4425A1E5b7B28Cb689719B1428e3088C1F89E30)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xbF8b5ea02e50073348767fd9418beDEd30C835D4)
 */
export function useJbFundAccessConstraintsStoreSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<
    typeof jbFundAccessConstraintsStoreABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbFundAccessConstraintsStoreABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & {
    chainId?: keyof typeof jbFundAccessConstraintsStoreAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbFundAccessConstraintsStoreABI,
    address:
      jbFundAccessConstraintsStoreAddress[
        chainId as keyof typeof jbFundAccessConstraintsStoreAddress
      ],
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof jbFundAccessConstraintsStoreABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbFundAccessConstraintsStoreABI}__.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xA4425A1E5b7B28Cb689719B1428e3088C1F89E30)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xbF8b5ea02e50073348767fd9418beDEd30C835D4)
 */
export function useJbFundAccessConstraintsStoreWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbFundAccessConstraintsStoreAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbFundAccessConstraintsStoreABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      > & { address?: Address; chainId?: TChainId }
    : UseContractWriteConfig<
        typeof jbFundAccessConstraintsStoreABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof jbFundAccessConstraintsStoreABI,
    TFunctionName,
    TMode
  >({
    abi: jbFundAccessConstraintsStoreABI,
    address:
      jbFundAccessConstraintsStoreAddress[
        chainId as keyof typeof jbFundAccessConstraintsStoreAddress
      ],
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbFundAccessConstraintsStoreABI}__ and `functionName` set to `"setFor"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xA4425A1E5b7B28Cb689719B1428e3088C1F89E30)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xbF8b5ea02e50073348767fd9418beDEd30C835D4)
 */
export function useJbFundAccessConstraintsStoreSetFor<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbFundAccessConstraintsStoreAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbFundAccessConstraintsStoreABI,
          'setFor'
        >['request']['abi'],
        'setFor',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'setFor' }
    : UseContractWriteConfig<
        typeof jbFundAccessConstraintsStoreABI,
        'setFor',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setFor'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof jbFundAccessConstraintsStoreABI,
    'setFor',
    TMode
  >({
    abi: jbFundAccessConstraintsStoreABI,
    address:
      jbFundAccessConstraintsStoreAddress[
        chainId as keyof typeof jbFundAccessConstraintsStoreAddress
      ],
    functionName: 'setFor',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbFundAccessConstraintsStoreABI}__.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xA4425A1E5b7B28Cb689719B1428e3088C1F89E30)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xbF8b5ea02e50073348767fd9418beDEd30C835D4)
 */
export function usePrepareJbFundAccessConstraintsStoreWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof jbFundAccessConstraintsStoreABI,
      TFunctionName
    >,
    'abi'
  > & {
    chainId?: keyof typeof jbFundAccessConstraintsStoreAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbFundAccessConstraintsStoreABI,
    address:
      jbFundAccessConstraintsStoreAddress[
        chainId as keyof typeof jbFundAccessConstraintsStoreAddress
      ],
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof jbFundAccessConstraintsStoreABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbFundAccessConstraintsStoreABI}__ and `functionName` set to `"setFor"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xA4425A1E5b7B28Cb689719B1428e3088C1F89E30)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xbF8b5ea02e50073348767fd9418beDEd30C835D4)
 */
export function usePrepareJbFundAccessConstraintsStoreSetFor(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof jbFundAccessConstraintsStoreABI,
      'setFor'
    >,
    'abi' | 'functionName'
  > & {
    chainId?: keyof typeof jbFundAccessConstraintsStoreAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbFundAccessConstraintsStoreABI,
    address:
      jbFundAccessConstraintsStoreAddress[
        chainId as keyof typeof jbFundAccessConstraintsStoreAddress
      ],
    functionName: 'setFor',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof jbFundAccessConstraintsStoreABI,
    'setFor'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbFundAccessConstraintsStoreABI}__.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xA4425A1E5b7B28Cb689719B1428e3088C1F89E30)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xbF8b5ea02e50073348767fd9418beDEd30C835D4)
 */
export function useJbFundAccessConstraintsStoreEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof jbFundAccessConstraintsStoreABI, TEventName>,
    'abi'
  > & {
    chainId?: keyof typeof jbFundAccessConstraintsStoreAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbFundAccessConstraintsStoreABI,
    address:
      jbFundAccessConstraintsStoreAddress[
        chainId as keyof typeof jbFundAccessConstraintsStoreAddress
      ],
    ...config,
  } as UseContractEventConfig<
    typeof jbFundAccessConstraintsStoreABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbFundAccessConstraintsStoreABI}__ and `eventName` set to `"SetFundAccessConstraints"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xA4425A1E5b7B28Cb689719B1428e3088C1F89E30)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xbF8b5ea02e50073348767fd9418beDEd30C835D4)
 */
export function useJbFundAccessConstraintsStoreSetFundAccessConstraintsEvent(
  config: Omit<
    UseContractEventConfig<
      typeof jbFundAccessConstraintsStoreABI,
      'SetFundAccessConstraints'
    >,
    'abi' | 'eventName'
  > & {
    chainId?: keyof typeof jbFundAccessConstraintsStoreAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbFundAccessConstraintsStoreABI,
    address:
      jbFundAccessConstraintsStoreAddress[
        chainId as keyof typeof jbFundAccessConstraintsStoreAddress
      ],
    eventName: 'SetFundAccessConstraints',
    ...config,
  } as UseContractEventConfig<
    typeof jbFundAccessConstraintsStoreABI,
    'SetFundAccessConstraints'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbOperatorStoreABI}__.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x6F3C5afCa0c9eDf3926eF2dDF17c8ae6391afEfb)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x99dB6b517683237dE9C494bbd17861f3608F3585)
 */
export function useJbOperatorStoreRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof jbOperatorStoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbOperatorStoreABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > & { chainId?: keyof typeof jbOperatorStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbOperatorStoreABI,
    address:
      jbOperatorStoreAddress[chainId as keyof typeof jbOperatorStoreAddress],
    ...config,
  } as UseContractReadConfig<
    typeof jbOperatorStoreABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbOperatorStoreABI}__ and `functionName` set to `"hasPermission"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x6F3C5afCa0c9eDf3926eF2dDF17c8ae6391afEfb)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x99dB6b517683237dE9C494bbd17861f3608F3585)
 */
export function useJbOperatorStoreHasPermission<
  TFunctionName extends 'hasPermission',
  TSelectData = ReadContractResult<typeof jbOperatorStoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbOperatorStoreABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbOperatorStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbOperatorStoreABI,
    address:
      jbOperatorStoreAddress[chainId as keyof typeof jbOperatorStoreAddress],
    functionName: 'hasPermission',
    ...config,
  } as UseContractReadConfig<
    typeof jbOperatorStoreABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbOperatorStoreABI}__ and `functionName` set to `"hasPermissions"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x6F3C5afCa0c9eDf3926eF2dDF17c8ae6391afEfb)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x99dB6b517683237dE9C494bbd17861f3608F3585)
 */
export function useJbOperatorStoreHasPermissions<
  TFunctionName extends 'hasPermissions',
  TSelectData = ReadContractResult<typeof jbOperatorStoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbOperatorStoreABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbOperatorStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbOperatorStoreABI,
    address:
      jbOperatorStoreAddress[chainId as keyof typeof jbOperatorStoreAddress],
    functionName: 'hasPermissions',
    ...config,
  } as UseContractReadConfig<
    typeof jbOperatorStoreABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbOperatorStoreABI}__ and `functionName` set to `"permissionsOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x6F3C5afCa0c9eDf3926eF2dDF17c8ae6391afEfb)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x99dB6b517683237dE9C494bbd17861f3608F3585)
 */
export function useJbOperatorStorePermissionsOf<
  TFunctionName extends 'permissionsOf',
  TSelectData = ReadContractResult<typeof jbOperatorStoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbOperatorStoreABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbOperatorStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbOperatorStoreABI,
    address:
      jbOperatorStoreAddress[chainId as keyof typeof jbOperatorStoreAddress],
    functionName: 'permissionsOf',
    ...config,
  } as UseContractReadConfig<
    typeof jbOperatorStoreABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbOperatorStoreABI}__.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x6F3C5afCa0c9eDf3926eF2dDF17c8ae6391afEfb)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x99dB6b517683237dE9C494bbd17861f3608F3585)
 */
export function useJbOperatorStoreWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbOperatorStoreAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbOperatorStoreABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      > & { address?: Address; chainId?: TChainId }
    : UseContractWriteConfig<
        typeof jbOperatorStoreABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof jbOperatorStoreABI, TFunctionName, TMode>({
    abi: jbOperatorStoreABI,
    address:
      jbOperatorStoreAddress[chainId as keyof typeof jbOperatorStoreAddress],
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbOperatorStoreABI}__ and `functionName` set to `"setOperator"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x6F3C5afCa0c9eDf3926eF2dDF17c8ae6391afEfb)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x99dB6b517683237dE9C494bbd17861f3608F3585)
 */
export function useJbOperatorStoreSetOperator<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbOperatorStoreAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbOperatorStoreABI,
          'setOperator'
        >['request']['abi'],
        'setOperator',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'setOperator'
      }
    : UseContractWriteConfig<
        typeof jbOperatorStoreABI,
        'setOperator',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setOperator'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof jbOperatorStoreABI, 'setOperator', TMode>({
    abi: jbOperatorStoreABI,
    address:
      jbOperatorStoreAddress[chainId as keyof typeof jbOperatorStoreAddress],
    functionName: 'setOperator',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbOperatorStoreABI}__ and `functionName` set to `"setOperators"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x6F3C5afCa0c9eDf3926eF2dDF17c8ae6391afEfb)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x99dB6b517683237dE9C494bbd17861f3608F3585)
 */
export function useJbOperatorStoreSetOperators<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbOperatorStoreAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbOperatorStoreABI,
          'setOperators'
        >['request']['abi'],
        'setOperators',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'setOperators'
      }
    : UseContractWriteConfig<
        typeof jbOperatorStoreABI,
        'setOperators',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setOperators'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof jbOperatorStoreABI, 'setOperators', TMode>({
    abi: jbOperatorStoreABI,
    address:
      jbOperatorStoreAddress[chainId as keyof typeof jbOperatorStoreAddress],
    functionName: 'setOperators',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbOperatorStoreABI}__.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x6F3C5afCa0c9eDf3926eF2dDF17c8ae6391afEfb)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x99dB6b517683237dE9C494bbd17861f3608F3585)
 */
export function usePrepareJbOperatorStoreWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof jbOperatorStoreABI, TFunctionName>,
    'abi'
  > & { chainId?: keyof typeof jbOperatorStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbOperatorStoreABI,
    address:
      jbOperatorStoreAddress[chainId as keyof typeof jbOperatorStoreAddress],
    ...config,
  } as UsePrepareContractWriteConfig<typeof jbOperatorStoreABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbOperatorStoreABI}__ and `functionName` set to `"setOperator"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x6F3C5afCa0c9eDf3926eF2dDF17c8ae6391afEfb)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x99dB6b517683237dE9C494bbd17861f3608F3585)
 */
export function usePrepareJbOperatorStoreSetOperator(
  config: Omit<
    UsePrepareContractWriteConfig<typeof jbOperatorStoreABI, 'setOperator'>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbOperatorStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbOperatorStoreABI,
    address:
      jbOperatorStoreAddress[chainId as keyof typeof jbOperatorStoreAddress],
    functionName: 'setOperator',
    ...config,
  } as UsePrepareContractWriteConfig<typeof jbOperatorStoreABI, 'setOperator'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbOperatorStoreABI}__ and `functionName` set to `"setOperators"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x6F3C5afCa0c9eDf3926eF2dDF17c8ae6391afEfb)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x99dB6b517683237dE9C494bbd17861f3608F3585)
 */
export function usePrepareJbOperatorStoreSetOperators(
  config: Omit<
    UsePrepareContractWriteConfig<typeof jbOperatorStoreABI, 'setOperators'>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbOperatorStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbOperatorStoreABI,
    address:
      jbOperatorStoreAddress[chainId as keyof typeof jbOperatorStoreAddress],
    functionName: 'setOperators',
    ...config,
  } as UsePrepareContractWriteConfig<typeof jbOperatorStoreABI, 'setOperators'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbOperatorStoreABI}__.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x6F3C5afCa0c9eDf3926eF2dDF17c8ae6391afEfb)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x99dB6b517683237dE9C494bbd17861f3608F3585)
 */
export function useJbOperatorStoreEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof jbOperatorStoreABI, TEventName>,
    'abi'
  > & { chainId?: keyof typeof jbOperatorStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbOperatorStoreABI,
    address:
      jbOperatorStoreAddress[chainId as keyof typeof jbOperatorStoreAddress],
    ...config,
  } as UseContractEventConfig<typeof jbOperatorStoreABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbOperatorStoreABI}__ and `eventName` set to `"SetOperator"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x6F3C5afCa0c9eDf3926eF2dDF17c8ae6391afEfb)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x99dB6b517683237dE9C494bbd17861f3608F3585)
 */
export function useJbOperatorStoreSetOperatorEvent(
  config: Omit<
    UseContractEventConfig<typeof jbOperatorStoreABI, 'SetOperator'>,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbOperatorStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbOperatorStoreABI,
    address:
      jbOperatorStoreAddress[chainId as keyof typeof jbOperatorStoreAddress],
    eventName: 'SetOperator',
    ...config,
  } as UseContractEventConfig<typeof jbOperatorStoreABI, 'SetOperator'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbProjectsABI}__.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xD8B4359143eda5B2d763E127Ed27c77addBc47d3)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x21263a042aFE4bAE34F08Bb318056C181bD96D3b)
 */
export function useJbProjectsRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof jbProjectsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof jbProjectsABI, TFunctionName, TSelectData>,
    'abi'
  > & { chainId?: keyof typeof jbProjectsAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbProjectsABI,
    address: jbProjectsAddress[chainId as keyof typeof jbProjectsAddress],
    ...config,
  } as UseContractReadConfig<typeof jbProjectsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbProjectsABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xD8B4359143eda5B2d763E127Ed27c77addBc47d3)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x21263a042aFE4bAE34F08Bb318056C181bD96D3b)
 */
export function useJbProjectsDomainSeparator<
  TFunctionName extends 'DOMAIN_SEPARATOR',
  TSelectData = ReadContractResult<typeof jbProjectsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof jbProjectsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbProjectsAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbProjectsABI,
    address: jbProjectsAddress[chainId as keyof typeof jbProjectsAddress],
    functionName: 'DOMAIN_SEPARATOR',
    ...config,
  } as UseContractReadConfig<typeof jbProjectsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbProjectsABI}__ and `functionName` set to `"balanceOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xD8B4359143eda5B2d763E127Ed27c77addBc47d3)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x21263a042aFE4bAE34F08Bb318056C181bD96D3b)
 */
export function useJbProjectsBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof jbProjectsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof jbProjectsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbProjectsAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbProjectsABI,
    address: jbProjectsAddress[chainId as keyof typeof jbProjectsAddress],
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof jbProjectsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbProjectsABI}__ and `functionName` set to `"count"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xD8B4359143eda5B2d763E127Ed27c77addBc47d3)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x21263a042aFE4bAE34F08Bb318056C181bD96D3b)
 */
export function useJbProjectsCount<
  TFunctionName extends 'count',
  TSelectData = ReadContractResult<typeof jbProjectsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof jbProjectsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbProjectsAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbProjectsABI,
    address: jbProjectsAddress[chainId as keyof typeof jbProjectsAddress],
    functionName: 'count',
    ...config,
  } as UseContractReadConfig<typeof jbProjectsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbProjectsABI}__ and `functionName` set to `"delegates"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xD8B4359143eda5B2d763E127Ed27c77addBc47d3)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x21263a042aFE4bAE34F08Bb318056C181bD96D3b)
 */
export function useJbProjectsDelegates<
  TFunctionName extends 'delegates',
  TSelectData = ReadContractResult<typeof jbProjectsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof jbProjectsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbProjectsAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbProjectsABI,
    address: jbProjectsAddress[chainId as keyof typeof jbProjectsAddress],
    functionName: 'delegates',
    ...config,
  } as UseContractReadConfig<typeof jbProjectsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbProjectsABI}__ and `functionName` set to `"getApproved"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xD8B4359143eda5B2d763E127Ed27c77addBc47d3)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x21263a042aFE4bAE34F08Bb318056C181bD96D3b)
 */
export function useJbProjectsGetApproved<
  TFunctionName extends 'getApproved',
  TSelectData = ReadContractResult<typeof jbProjectsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof jbProjectsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbProjectsAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbProjectsABI,
    address: jbProjectsAddress[chainId as keyof typeof jbProjectsAddress],
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<typeof jbProjectsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbProjectsABI}__ and `functionName` set to `"getPastTotalSupply"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xD8B4359143eda5B2d763E127Ed27c77addBc47d3)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x21263a042aFE4bAE34F08Bb318056C181bD96D3b)
 */
export function useJbProjectsGetPastTotalSupply<
  TFunctionName extends 'getPastTotalSupply',
  TSelectData = ReadContractResult<typeof jbProjectsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof jbProjectsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbProjectsAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbProjectsABI,
    address: jbProjectsAddress[chainId as keyof typeof jbProjectsAddress],
    functionName: 'getPastTotalSupply',
    ...config,
  } as UseContractReadConfig<typeof jbProjectsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbProjectsABI}__ and `functionName` set to `"getPastVotes"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xD8B4359143eda5B2d763E127Ed27c77addBc47d3)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x21263a042aFE4bAE34F08Bb318056C181bD96D3b)
 */
export function useJbProjectsGetPastVotes<
  TFunctionName extends 'getPastVotes',
  TSelectData = ReadContractResult<typeof jbProjectsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof jbProjectsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbProjectsAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbProjectsABI,
    address: jbProjectsAddress[chainId as keyof typeof jbProjectsAddress],
    functionName: 'getPastVotes',
    ...config,
  } as UseContractReadConfig<typeof jbProjectsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbProjectsABI}__ and `functionName` set to `"getVotes"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xD8B4359143eda5B2d763E127Ed27c77addBc47d3)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x21263a042aFE4bAE34F08Bb318056C181bD96D3b)
 */
export function useJbProjectsGetVotes<
  TFunctionName extends 'getVotes',
  TSelectData = ReadContractResult<typeof jbProjectsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof jbProjectsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbProjectsAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbProjectsABI,
    address: jbProjectsAddress[chainId as keyof typeof jbProjectsAddress],
    functionName: 'getVotes',
    ...config,
  } as UseContractReadConfig<typeof jbProjectsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbProjectsABI}__ and `functionName` set to `"isApprovedForAll"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xD8B4359143eda5B2d763E127Ed27c77addBc47d3)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x21263a042aFE4bAE34F08Bb318056C181bD96D3b)
 */
export function useJbProjectsIsApprovedForAll<
  TFunctionName extends 'isApprovedForAll',
  TSelectData = ReadContractResult<typeof jbProjectsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof jbProjectsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbProjectsAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbProjectsABI,
    address: jbProjectsAddress[chainId as keyof typeof jbProjectsAddress],
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<typeof jbProjectsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbProjectsABI}__ and `functionName` set to `"metadataContentOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xD8B4359143eda5B2d763E127Ed27c77addBc47d3)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x21263a042aFE4bAE34F08Bb318056C181bD96D3b)
 */
export function useJbProjectsMetadataContentOf<
  TFunctionName extends 'metadataContentOf',
  TSelectData = ReadContractResult<typeof jbProjectsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof jbProjectsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbProjectsAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbProjectsABI,
    address: jbProjectsAddress[chainId as keyof typeof jbProjectsAddress],
    functionName: 'metadataContentOf',
    ...config,
  } as UseContractReadConfig<typeof jbProjectsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbProjectsABI}__ and `functionName` set to `"name"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xD8B4359143eda5B2d763E127Ed27c77addBc47d3)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x21263a042aFE4bAE34F08Bb318056C181bD96D3b)
 */
export function useJbProjectsName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof jbProjectsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof jbProjectsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbProjectsAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbProjectsABI,
    address: jbProjectsAddress[chainId as keyof typeof jbProjectsAddress],
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof jbProjectsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbProjectsABI}__ and `functionName` set to `"nonces"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xD8B4359143eda5B2d763E127Ed27c77addBc47d3)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x21263a042aFE4bAE34F08Bb318056C181bD96D3b)
 */
export function useJbProjectsNonces<
  TFunctionName extends 'nonces',
  TSelectData = ReadContractResult<typeof jbProjectsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof jbProjectsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbProjectsAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbProjectsABI,
    address: jbProjectsAddress[chainId as keyof typeof jbProjectsAddress],
    functionName: 'nonces',
    ...config,
  } as UseContractReadConfig<typeof jbProjectsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbProjectsABI}__ and `functionName` set to `"operatorStore"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xD8B4359143eda5B2d763E127Ed27c77addBc47d3)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x21263a042aFE4bAE34F08Bb318056C181bD96D3b)
 */
export function useJbProjectsOperatorStore<
  TFunctionName extends 'operatorStore',
  TSelectData = ReadContractResult<typeof jbProjectsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof jbProjectsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbProjectsAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbProjectsABI,
    address: jbProjectsAddress[chainId as keyof typeof jbProjectsAddress],
    functionName: 'operatorStore',
    ...config,
  } as UseContractReadConfig<typeof jbProjectsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbProjectsABI}__ and `functionName` set to `"owner"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xD8B4359143eda5B2d763E127Ed27c77addBc47d3)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x21263a042aFE4bAE34F08Bb318056C181bD96D3b)
 */
export function useJbProjectsOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof jbProjectsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof jbProjectsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbProjectsAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbProjectsABI,
    address: jbProjectsAddress[chainId as keyof typeof jbProjectsAddress],
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof jbProjectsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbProjectsABI}__ and `functionName` set to `"ownerOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xD8B4359143eda5B2d763E127Ed27c77addBc47d3)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x21263a042aFE4bAE34F08Bb318056C181bD96D3b)
 */
export function useJbProjectsOwnerOf<
  TFunctionName extends 'ownerOf',
  TSelectData = ReadContractResult<typeof jbProjectsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof jbProjectsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbProjectsAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbProjectsABI,
    address: jbProjectsAddress[chainId as keyof typeof jbProjectsAddress],
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<typeof jbProjectsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbProjectsABI}__ and `functionName` set to `"supportsInterface"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xD8B4359143eda5B2d763E127Ed27c77addBc47d3)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x21263a042aFE4bAE34F08Bb318056C181bD96D3b)
 */
export function useJbProjectsSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof jbProjectsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof jbProjectsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbProjectsAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbProjectsABI,
    address: jbProjectsAddress[chainId as keyof typeof jbProjectsAddress],
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof jbProjectsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbProjectsABI}__ and `functionName` set to `"symbol"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xD8B4359143eda5B2d763E127Ed27c77addBc47d3)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x21263a042aFE4bAE34F08Bb318056C181bD96D3b)
 */
export function useJbProjectsSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof jbProjectsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof jbProjectsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbProjectsAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbProjectsABI,
    address: jbProjectsAddress[chainId as keyof typeof jbProjectsAddress],
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof jbProjectsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbProjectsABI}__ and `functionName` set to `"tokenURI"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xD8B4359143eda5B2d763E127Ed27c77addBc47d3)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x21263a042aFE4bAE34F08Bb318056C181bD96D3b)
 */
export function useJbProjectsTokenUri<
  TFunctionName extends 'tokenURI',
  TSelectData = ReadContractResult<typeof jbProjectsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof jbProjectsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbProjectsAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbProjectsABI,
    address: jbProjectsAddress[chainId as keyof typeof jbProjectsAddress],
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<typeof jbProjectsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbProjectsABI}__ and `functionName` set to `"tokenUriResolver"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xD8B4359143eda5B2d763E127Ed27c77addBc47d3)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x21263a042aFE4bAE34F08Bb318056C181bD96D3b)
 */
export function useJbProjectsTokenUriResolver<
  TFunctionName extends 'tokenUriResolver',
  TSelectData = ReadContractResult<typeof jbProjectsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof jbProjectsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbProjectsAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbProjectsABI,
    address: jbProjectsAddress[chainId as keyof typeof jbProjectsAddress],
    functionName: 'tokenUriResolver',
    ...config,
  } as UseContractReadConfig<typeof jbProjectsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbProjectsABI}__.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xD8B4359143eda5B2d763E127Ed27c77addBc47d3)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x21263a042aFE4bAE34F08Bb318056C181bD96D3b)
 */
export function useJbProjectsWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbProjectsAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbProjectsABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      > & { address?: Address; chainId?: TChainId }
    : UseContractWriteConfig<typeof jbProjectsABI, TFunctionName, TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof jbProjectsABI, TFunctionName, TMode>({
    abi: jbProjectsABI,
    address: jbProjectsAddress[chainId as keyof typeof jbProjectsAddress],
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbProjectsABI}__ and `functionName` set to `"approve"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xD8B4359143eda5B2d763E127Ed27c77addBc47d3)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x21263a042aFE4bAE34F08Bb318056C181bD96D3b)
 */
export function useJbProjectsApprove<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbProjectsAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbProjectsABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'approve' }
    : UseContractWriteConfig<typeof jbProjectsABI, 'approve', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'approve'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof jbProjectsABI, 'approve', TMode>({
    abi: jbProjectsABI,
    address: jbProjectsAddress[chainId as keyof typeof jbProjectsAddress],
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbProjectsABI}__ and `functionName` set to `"createFor"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xD8B4359143eda5B2d763E127Ed27c77addBc47d3)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x21263a042aFE4bAE34F08Bb318056C181bD96D3b)
 */
export function useJbProjectsCreateFor<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbProjectsAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbProjectsABI,
          'createFor'
        >['request']['abi'],
        'createFor',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'createFor' }
    : UseContractWriteConfig<typeof jbProjectsABI, 'createFor', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'createFor'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof jbProjectsABI, 'createFor', TMode>({
    abi: jbProjectsABI,
    address: jbProjectsAddress[chainId as keyof typeof jbProjectsAddress],
    functionName: 'createFor',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbProjectsABI}__ and `functionName` set to `"delegate"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xD8B4359143eda5B2d763E127Ed27c77addBc47d3)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x21263a042aFE4bAE34F08Bb318056C181bD96D3b)
 */
export function useJbProjectsDelegate<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbProjectsAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbProjectsABI,
          'delegate'
        >['request']['abi'],
        'delegate',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'delegate' }
    : UseContractWriteConfig<typeof jbProjectsABI, 'delegate', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'delegate'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof jbProjectsABI, 'delegate', TMode>({
    abi: jbProjectsABI,
    address: jbProjectsAddress[chainId as keyof typeof jbProjectsAddress],
    functionName: 'delegate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbProjectsABI}__ and `functionName` set to `"delegateBySig"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xD8B4359143eda5B2d763E127Ed27c77addBc47d3)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x21263a042aFE4bAE34F08Bb318056C181bD96D3b)
 */
export function useJbProjectsDelegateBySig<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbProjectsAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbProjectsABI,
          'delegateBySig'
        >['request']['abi'],
        'delegateBySig',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'delegateBySig'
      }
    : UseContractWriteConfig<typeof jbProjectsABI, 'delegateBySig', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'delegateBySig'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof jbProjectsABI, 'delegateBySig', TMode>({
    abi: jbProjectsABI,
    address: jbProjectsAddress[chainId as keyof typeof jbProjectsAddress],
    functionName: 'delegateBySig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbProjectsABI}__ and `functionName` set to `"renounceOwnership"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xD8B4359143eda5B2d763E127Ed27c77addBc47d3)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x21263a042aFE4bAE34F08Bb318056C181bD96D3b)
 */
export function useJbProjectsRenounceOwnership<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbProjectsAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbProjectsABI,
          'renounceOwnership'
        >['request']['abi'],
        'renounceOwnership',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'renounceOwnership'
      }
    : UseContractWriteConfig<
        typeof jbProjectsABI,
        'renounceOwnership',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof jbProjectsABI, 'renounceOwnership', TMode>({
    abi: jbProjectsABI,
    address: jbProjectsAddress[chainId as keyof typeof jbProjectsAddress],
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbProjectsABI}__ and `functionName` set to `"safeTransferFrom"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xD8B4359143eda5B2d763E127Ed27c77addBc47d3)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x21263a042aFE4bAE34F08Bb318056C181bD96D3b)
 */
export function useJbProjectsSafeTransferFrom<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbProjectsAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbProjectsABI,
          'safeTransferFrom'
        >['request']['abi'],
        'safeTransferFrom',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'safeTransferFrom'
      }
    : UseContractWriteConfig<
        typeof jbProjectsABI,
        'safeTransferFrom',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof jbProjectsABI, 'safeTransferFrom', TMode>({
    abi: jbProjectsABI,
    address: jbProjectsAddress[chainId as keyof typeof jbProjectsAddress],
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbProjectsABI}__ and `functionName` set to `"setApprovalForAll"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xD8B4359143eda5B2d763E127Ed27c77addBc47d3)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x21263a042aFE4bAE34F08Bb318056C181bD96D3b)
 */
export function useJbProjectsSetApprovalForAll<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbProjectsAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbProjectsABI,
          'setApprovalForAll'
        >['request']['abi'],
        'setApprovalForAll',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'setApprovalForAll'
      }
    : UseContractWriteConfig<
        typeof jbProjectsABI,
        'setApprovalForAll',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof jbProjectsABI, 'setApprovalForAll', TMode>({
    abi: jbProjectsABI,
    address: jbProjectsAddress[chainId as keyof typeof jbProjectsAddress],
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbProjectsABI}__ and `functionName` set to `"setMetadataOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xD8B4359143eda5B2d763E127Ed27c77addBc47d3)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x21263a042aFE4bAE34F08Bb318056C181bD96D3b)
 */
export function useJbProjectsSetMetadataOf<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbProjectsAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbProjectsABI,
          'setMetadataOf'
        >['request']['abi'],
        'setMetadataOf',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'setMetadataOf'
      }
    : UseContractWriteConfig<typeof jbProjectsABI, 'setMetadataOf', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setMetadataOf'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof jbProjectsABI, 'setMetadataOf', TMode>({
    abi: jbProjectsABI,
    address: jbProjectsAddress[chainId as keyof typeof jbProjectsAddress],
    functionName: 'setMetadataOf',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbProjectsABI}__ and `functionName` set to `"setTokenUriResolver"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xD8B4359143eda5B2d763E127Ed27c77addBc47d3)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x21263a042aFE4bAE34F08Bb318056C181bD96D3b)
 */
export function useJbProjectsSetTokenUriResolver<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbProjectsAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbProjectsABI,
          'setTokenUriResolver'
        >['request']['abi'],
        'setTokenUriResolver',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'setTokenUriResolver'
      }
    : UseContractWriteConfig<
        typeof jbProjectsABI,
        'setTokenUriResolver',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setTokenUriResolver'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof jbProjectsABI, 'setTokenUriResolver', TMode>({
    abi: jbProjectsABI,
    address: jbProjectsAddress[chainId as keyof typeof jbProjectsAddress],
    functionName: 'setTokenUriResolver',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbProjectsABI}__ and `functionName` set to `"transferFrom"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xD8B4359143eda5B2d763E127Ed27c77addBc47d3)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x21263a042aFE4bAE34F08Bb318056C181bD96D3b)
 */
export function useJbProjectsTransferFrom<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbProjectsAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbProjectsABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'transferFrom'
      }
    : UseContractWriteConfig<typeof jbProjectsABI, 'transferFrom', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'transferFrom'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof jbProjectsABI, 'transferFrom', TMode>({
    abi: jbProjectsABI,
    address: jbProjectsAddress[chainId as keyof typeof jbProjectsAddress],
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbProjectsABI}__ and `functionName` set to `"transferOwnership"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xD8B4359143eda5B2d763E127Ed27c77addBc47d3)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x21263a042aFE4bAE34F08Bb318056C181bD96D3b)
 */
export function useJbProjectsTransferOwnership<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbProjectsAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbProjectsABI,
          'transferOwnership'
        >['request']['abi'],
        'transferOwnership',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'transferOwnership'
      }
    : UseContractWriteConfig<
        typeof jbProjectsABI,
        'transferOwnership',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof jbProjectsABI, 'transferOwnership', TMode>({
    abi: jbProjectsABI,
    address: jbProjectsAddress[chainId as keyof typeof jbProjectsAddress],
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbProjectsABI}__.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xD8B4359143eda5B2d763E127Ed27c77addBc47d3)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x21263a042aFE4bAE34F08Bb318056C181bD96D3b)
 */
export function usePrepareJbProjectsWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof jbProjectsABI, TFunctionName>,
    'abi'
  > & { chainId?: keyof typeof jbProjectsAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbProjectsABI,
    address: jbProjectsAddress[chainId as keyof typeof jbProjectsAddress],
    ...config,
  } as UsePrepareContractWriteConfig<typeof jbProjectsABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbProjectsABI}__ and `functionName` set to `"approve"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xD8B4359143eda5B2d763E127Ed27c77addBc47d3)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x21263a042aFE4bAE34F08Bb318056C181bD96D3b)
 */
export function usePrepareJbProjectsApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof jbProjectsABI, 'approve'>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbProjectsAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbProjectsABI,
    address: jbProjectsAddress[chainId as keyof typeof jbProjectsAddress],
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof jbProjectsABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbProjectsABI}__ and `functionName` set to `"createFor"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xD8B4359143eda5B2d763E127Ed27c77addBc47d3)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x21263a042aFE4bAE34F08Bb318056C181bD96D3b)
 */
export function usePrepareJbProjectsCreateFor(
  config: Omit<
    UsePrepareContractWriteConfig<typeof jbProjectsABI, 'createFor'>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbProjectsAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbProjectsABI,
    address: jbProjectsAddress[chainId as keyof typeof jbProjectsAddress],
    functionName: 'createFor',
    ...config,
  } as UsePrepareContractWriteConfig<typeof jbProjectsABI, 'createFor'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbProjectsABI}__ and `functionName` set to `"delegate"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xD8B4359143eda5B2d763E127Ed27c77addBc47d3)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x21263a042aFE4bAE34F08Bb318056C181bD96D3b)
 */
export function usePrepareJbProjectsDelegate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof jbProjectsABI, 'delegate'>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbProjectsAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbProjectsABI,
    address: jbProjectsAddress[chainId as keyof typeof jbProjectsAddress],
    functionName: 'delegate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof jbProjectsABI, 'delegate'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbProjectsABI}__ and `functionName` set to `"delegateBySig"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xD8B4359143eda5B2d763E127Ed27c77addBc47d3)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x21263a042aFE4bAE34F08Bb318056C181bD96D3b)
 */
export function usePrepareJbProjectsDelegateBySig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof jbProjectsABI, 'delegateBySig'>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbProjectsAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbProjectsABI,
    address: jbProjectsAddress[chainId as keyof typeof jbProjectsAddress],
    functionName: 'delegateBySig',
    ...config,
  } as UsePrepareContractWriteConfig<typeof jbProjectsABI, 'delegateBySig'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbProjectsABI}__ and `functionName` set to `"renounceOwnership"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xD8B4359143eda5B2d763E127Ed27c77addBc47d3)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x21263a042aFE4bAE34F08Bb318056C181bD96D3b)
 */
export function usePrepareJbProjectsRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof jbProjectsABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbProjectsAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbProjectsABI,
    address: jbProjectsAddress[chainId as keyof typeof jbProjectsAddress],
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof jbProjectsABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbProjectsABI}__ and `functionName` set to `"safeTransferFrom"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xD8B4359143eda5B2d763E127Ed27c77addBc47d3)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x21263a042aFE4bAE34F08Bb318056C181bD96D3b)
 */
export function usePrepareJbProjectsSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof jbProjectsABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbProjectsAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbProjectsABI,
    address: jbProjectsAddress[chainId as keyof typeof jbProjectsAddress],
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof jbProjectsABI, 'safeTransferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbProjectsABI}__ and `functionName` set to `"setApprovalForAll"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xD8B4359143eda5B2d763E127Ed27c77addBc47d3)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x21263a042aFE4bAE34F08Bb318056C181bD96D3b)
 */
export function usePrepareJbProjectsSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof jbProjectsABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbProjectsAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbProjectsABI,
    address: jbProjectsAddress[chainId as keyof typeof jbProjectsAddress],
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof jbProjectsABI, 'setApprovalForAll'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbProjectsABI}__ and `functionName` set to `"setMetadataOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xD8B4359143eda5B2d763E127Ed27c77addBc47d3)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x21263a042aFE4bAE34F08Bb318056C181bD96D3b)
 */
export function usePrepareJbProjectsSetMetadataOf(
  config: Omit<
    UsePrepareContractWriteConfig<typeof jbProjectsABI, 'setMetadataOf'>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbProjectsAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbProjectsABI,
    address: jbProjectsAddress[chainId as keyof typeof jbProjectsAddress],
    functionName: 'setMetadataOf',
    ...config,
  } as UsePrepareContractWriteConfig<typeof jbProjectsABI, 'setMetadataOf'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbProjectsABI}__ and `functionName` set to `"setTokenUriResolver"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xD8B4359143eda5B2d763E127Ed27c77addBc47d3)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x21263a042aFE4bAE34F08Bb318056C181bD96D3b)
 */
export function usePrepareJbProjectsSetTokenUriResolver(
  config: Omit<
    UsePrepareContractWriteConfig<typeof jbProjectsABI, 'setTokenUriResolver'>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbProjectsAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbProjectsABI,
    address: jbProjectsAddress[chainId as keyof typeof jbProjectsAddress],
    functionName: 'setTokenUriResolver',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof jbProjectsABI,
    'setTokenUriResolver'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbProjectsABI}__ and `functionName` set to `"transferFrom"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xD8B4359143eda5B2d763E127Ed27c77addBc47d3)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x21263a042aFE4bAE34F08Bb318056C181bD96D3b)
 */
export function usePrepareJbProjectsTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof jbProjectsABI, 'transferFrom'>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbProjectsAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbProjectsABI,
    address: jbProjectsAddress[chainId as keyof typeof jbProjectsAddress],
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof jbProjectsABI, 'transferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbProjectsABI}__ and `functionName` set to `"transferOwnership"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xD8B4359143eda5B2d763E127Ed27c77addBc47d3)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x21263a042aFE4bAE34F08Bb318056C181bD96D3b)
 */
export function usePrepareJbProjectsTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof jbProjectsABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbProjectsAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbProjectsABI,
    address: jbProjectsAddress[chainId as keyof typeof jbProjectsAddress],
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof jbProjectsABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbProjectsABI}__.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xD8B4359143eda5B2d763E127Ed27c77addBc47d3)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x21263a042aFE4bAE34F08Bb318056C181bD96D3b)
 */
export function useJbProjectsEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof jbProjectsABI, TEventName>,
    'abi'
  > & { chainId?: keyof typeof jbProjectsAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbProjectsABI,
    address: jbProjectsAddress[chainId as keyof typeof jbProjectsAddress],
    ...config,
  } as UseContractEventConfig<typeof jbProjectsABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbProjectsABI}__ and `eventName` set to `"Approval"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xD8B4359143eda5B2d763E127Ed27c77addBc47d3)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x21263a042aFE4bAE34F08Bb318056C181bD96D3b)
 */
export function useJbProjectsApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof jbProjectsABI, 'Approval'>,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbProjectsAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbProjectsABI,
    address: jbProjectsAddress[chainId as keyof typeof jbProjectsAddress],
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof jbProjectsABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbProjectsABI}__ and `eventName` set to `"ApprovalForAll"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xD8B4359143eda5B2d763E127Ed27c77addBc47d3)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x21263a042aFE4bAE34F08Bb318056C181bD96D3b)
 */
export function useJbProjectsApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof jbProjectsABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbProjectsAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbProjectsABI,
    address: jbProjectsAddress[chainId as keyof typeof jbProjectsAddress],
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof jbProjectsABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbProjectsABI}__ and `eventName` set to `"Create"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xD8B4359143eda5B2d763E127Ed27c77addBc47d3)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x21263a042aFE4bAE34F08Bb318056C181bD96D3b)
 */
export function useJbProjectsCreateEvent(
  config: Omit<
    UseContractEventConfig<typeof jbProjectsABI, 'Create'>,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbProjectsAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbProjectsABI,
    address: jbProjectsAddress[chainId as keyof typeof jbProjectsAddress],
    eventName: 'Create',
    ...config,
  } as UseContractEventConfig<typeof jbProjectsABI, 'Create'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbProjectsABI}__ and `eventName` set to `"DelegateChanged"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xD8B4359143eda5B2d763E127Ed27c77addBc47d3)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x21263a042aFE4bAE34F08Bb318056C181bD96D3b)
 */
export function useJbProjectsDelegateChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof jbProjectsABI, 'DelegateChanged'>,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbProjectsAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbProjectsABI,
    address: jbProjectsAddress[chainId as keyof typeof jbProjectsAddress],
    eventName: 'DelegateChanged',
    ...config,
  } as UseContractEventConfig<typeof jbProjectsABI, 'DelegateChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbProjectsABI}__ and `eventName` set to `"DelegateVotesChanged"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xD8B4359143eda5B2d763E127Ed27c77addBc47d3)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x21263a042aFE4bAE34F08Bb318056C181bD96D3b)
 */
export function useJbProjectsDelegateVotesChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof jbProjectsABI, 'DelegateVotesChanged'>,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbProjectsAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbProjectsABI,
    address: jbProjectsAddress[chainId as keyof typeof jbProjectsAddress],
    eventName: 'DelegateVotesChanged',
    ...config,
  } as UseContractEventConfig<typeof jbProjectsABI, 'DelegateVotesChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbProjectsABI}__ and `eventName` set to `"OwnershipTransferred"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xD8B4359143eda5B2d763E127Ed27c77addBc47d3)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x21263a042aFE4bAE34F08Bb318056C181bD96D3b)
 */
export function useJbProjectsOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof jbProjectsABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbProjectsAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbProjectsABI,
    address: jbProjectsAddress[chainId as keyof typeof jbProjectsAddress],
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof jbProjectsABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbProjectsABI}__ and `eventName` set to `"SetMetadata"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xD8B4359143eda5B2d763E127Ed27c77addBc47d3)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x21263a042aFE4bAE34F08Bb318056C181bD96D3b)
 */
export function useJbProjectsSetMetadataEvent(
  config: Omit<
    UseContractEventConfig<typeof jbProjectsABI, 'SetMetadata'>,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbProjectsAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbProjectsABI,
    address: jbProjectsAddress[chainId as keyof typeof jbProjectsAddress],
    eventName: 'SetMetadata',
    ...config,
  } as UseContractEventConfig<typeof jbProjectsABI, 'SetMetadata'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbProjectsABI}__ and `eventName` set to `"SetTokenUriResolver"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xD8B4359143eda5B2d763E127Ed27c77addBc47d3)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x21263a042aFE4bAE34F08Bb318056C181bD96D3b)
 */
export function useJbProjectsSetTokenUriResolverEvent(
  config: Omit<
    UseContractEventConfig<typeof jbProjectsABI, 'SetTokenUriResolver'>,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbProjectsAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbProjectsABI,
    address: jbProjectsAddress[chainId as keyof typeof jbProjectsAddress],
    eventName: 'SetTokenUriResolver',
    ...config,
  } as UseContractEventConfig<typeof jbProjectsABI, 'SetTokenUriResolver'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbProjectsABI}__ and `eventName` set to `"Transfer"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xD8B4359143eda5B2d763E127Ed27c77addBc47d3)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x21263a042aFE4bAE34F08Bb318056C181bD96D3b)
 */
export function useJbProjectsTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof jbProjectsABI, 'Transfer'>,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbProjectsAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbProjectsABI,
    address: jbProjectsAddress[chainId as keyof typeof jbProjectsAddress],
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof jbProjectsABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbSplitsStoreABI}__.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x0D25194ABE95185Db8e4B0294F5669E21C534785)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xce2Ce2F37fE5B2C2Dd047908B2F61c9c3f707272)
 */
export function useJbSplitsStoreRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof jbSplitsStoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof jbSplitsStoreABI, TFunctionName, TSelectData>,
    'abi'
  > & { chainId?: keyof typeof jbSplitsStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbSplitsStoreABI,
    address: jbSplitsStoreAddress[chainId as keyof typeof jbSplitsStoreAddress],
    ...config,
  } as UseContractReadConfig<
    typeof jbSplitsStoreABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbSplitsStoreABI}__ and `functionName` set to `"directory"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x0D25194ABE95185Db8e4B0294F5669E21C534785)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xce2Ce2F37fE5B2C2Dd047908B2F61c9c3f707272)
 */
export function useJbSplitsStoreDirectory<
  TFunctionName extends 'directory',
  TSelectData = ReadContractResult<typeof jbSplitsStoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof jbSplitsStoreABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbSplitsStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbSplitsStoreABI,
    address: jbSplitsStoreAddress[chainId as keyof typeof jbSplitsStoreAddress],
    functionName: 'directory',
    ...config,
  } as UseContractReadConfig<
    typeof jbSplitsStoreABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbSplitsStoreABI}__ and `functionName` set to `"operatorStore"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x0D25194ABE95185Db8e4B0294F5669E21C534785)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xce2Ce2F37fE5B2C2Dd047908B2F61c9c3f707272)
 */
export function useJbSplitsStoreOperatorStore<
  TFunctionName extends 'operatorStore',
  TSelectData = ReadContractResult<typeof jbSplitsStoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof jbSplitsStoreABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbSplitsStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbSplitsStoreABI,
    address: jbSplitsStoreAddress[chainId as keyof typeof jbSplitsStoreAddress],
    functionName: 'operatorStore',
    ...config,
  } as UseContractReadConfig<
    typeof jbSplitsStoreABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbSplitsStoreABI}__ and `functionName` set to `"projects"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x0D25194ABE95185Db8e4B0294F5669E21C534785)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xce2Ce2F37fE5B2C2Dd047908B2F61c9c3f707272)
 */
export function useJbSplitsStoreProjects<
  TFunctionName extends 'projects',
  TSelectData = ReadContractResult<typeof jbSplitsStoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof jbSplitsStoreABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbSplitsStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbSplitsStoreABI,
    address: jbSplitsStoreAddress[chainId as keyof typeof jbSplitsStoreAddress],
    functionName: 'projects',
    ...config,
  } as UseContractReadConfig<
    typeof jbSplitsStoreABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbSplitsStoreABI}__ and `functionName` set to `"splitsOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x0D25194ABE95185Db8e4B0294F5669E21C534785)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xce2Ce2F37fE5B2C2Dd047908B2F61c9c3f707272)
 */
export function useJbSplitsStoreSplitsOf<
  TFunctionName extends 'splitsOf',
  TSelectData = ReadContractResult<typeof jbSplitsStoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof jbSplitsStoreABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbSplitsStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbSplitsStoreABI,
    address: jbSplitsStoreAddress[chainId as keyof typeof jbSplitsStoreAddress],
    functionName: 'splitsOf',
    ...config,
  } as UseContractReadConfig<
    typeof jbSplitsStoreABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbSplitsStoreABI}__.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x0D25194ABE95185Db8e4B0294F5669E21C534785)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xce2Ce2F37fE5B2C2Dd047908B2F61c9c3f707272)
 */
export function useJbSplitsStoreWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbSplitsStoreAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbSplitsStoreABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      > & { address?: Address; chainId?: TChainId }
    : UseContractWriteConfig<typeof jbSplitsStoreABI, TFunctionName, TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof jbSplitsStoreABI, TFunctionName, TMode>({
    abi: jbSplitsStoreABI,
    address: jbSplitsStoreAddress[chainId as keyof typeof jbSplitsStoreAddress],
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbSplitsStoreABI}__ and `functionName` set to `"set"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x0D25194ABE95185Db8e4B0294F5669E21C534785)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xce2Ce2F37fE5B2C2Dd047908B2F61c9c3f707272)
 */
export function useJbSplitsStoreSet<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbSplitsStoreAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbSplitsStoreABI,
          'set'
        >['request']['abi'],
        'set',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'set' }
    : UseContractWriteConfig<typeof jbSplitsStoreABI, 'set', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'set'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof jbSplitsStoreABI, 'set', TMode>({
    abi: jbSplitsStoreABI,
    address: jbSplitsStoreAddress[chainId as keyof typeof jbSplitsStoreAddress],
    functionName: 'set',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbSplitsStoreABI}__.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x0D25194ABE95185Db8e4B0294F5669E21C534785)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xce2Ce2F37fE5B2C2Dd047908B2F61c9c3f707272)
 */
export function usePrepareJbSplitsStoreWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof jbSplitsStoreABI, TFunctionName>,
    'abi'
  > & { chainId?: keyof typeof jbSplitsStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbSplitsStoreABI,
    address: jbSplitsStoreAddress[chainId as keyof typeof jbSplitsStoreAddress],
    ...config,
  } as UsePrepareContractWriteConfig<typeof jbSplitsStoreABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbSplitsStoreABI}__ and `functionName` set to `"set"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x0D25194ABE95185Db8e4B0294F5669E21C534785)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xce2Ce2F37fE5B2C2Dd047908B2F61c9c3f707272)
 */
export function usePrepareJbSplitsStoreSet(
  config: Omit<
    UsePrepareContractWriteConfig<typeof jbSplitsStoreABI, 'set'>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbSplitsStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbSplitsStoreABI,
    address: jbSplitsStoreAddress[chainId as keyof typeof jbSplitsStoreAddress],
    functionName: 'set',
    ...config,
  } as UsePrepareContractWriteConfig<typeof jbSplitsStoreABI, 'set'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbSplitsStoreABI}__.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x0D25194ABE95185Db8e4B0294F5669E21C534785)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xce2Ce2F37fE5B2C2Dd047908B2F61c9c3f707272)
 */
export function useJbSplitsStoreEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof jbSplitsStoreABI, TEventName>,
    'abi'
  > & { chainId?: keyof typeof jbSplitsStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbSplitsStoreABI,
    address: jbSplitsStoreAddress[chainId as keyof typeof jbSplitsStoreAddress],
    ...config,
  } as UseContractEventConfig<typeof jbSplitsStoreABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbSplitsStoreABI}__ and `eventName` set to `"SetSplit"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x0D25194ABE95185Db8e4B0294F5669E21C534785)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xce2Ce2F37fE5B2C2Dd047908B2F61c9c3f707272)
 */
export function useJbSplitsStoreSetSplitEvent(
  config: Omit<
    UseContractEventConfig<typeof jbSplitsStoreABI, 'SetSplit'>,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbSplitsStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbSplitsStoreABI,
    address: jbSplitsStoreAddress[chainId as keyof typeof jbSplitsStoreAddress],
    eventName: 'SetSplit',
    ...config,
  } as UseContractEventConfig<typeof jbSplitsStoreABI, 'SetSplit'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbTokenStoreABI}__.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x6FA996581D7edaABE62C15eaE19fEeD4F1DdDfE7)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1246a50e3aDaF684Ac566f0c40816fF738F309B3)
 */
export function useJbTokenStoreRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof jbTokenStoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof jbTokenStoreABI, TFunctionName, TSelectData>,
    'abi'
  > & { chainId?: keyof typeof jbTokenStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbTokenStoreABI,
    address: jbTokenStoreAddress[chainId as keyof typeof jbTokenStoreAddress],
    ...config,
  } as UseContractReadConfig<
    typeof jbTokenStoreABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbTokenStoreABI}__ and `functionName` set to `"balanceOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x6FA996581D7edaABE62C15eaE19fEeD4F1DdDfE7)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1246a50e3aDaF684Ac566f0c40816fF738F309B3)
 */
export function useJbTokenStoreBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof jbTokenStoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof jbTokenStoreABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbTokenStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbTokenStoreABI,
    address: jbTokenStoreAddress[chainId as keyof typeof jbTokenStoreAddress],
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof jbTokenStoreABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbTokenStoreABI}__ and `functionName` set to `"directory"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x6FA996581D7edaABE62C15eaE19fEeD4F1DdDfE7)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1246a50e3aDaF684Ac566f0c40816fF738F309B3)
 */
export function useJbTokenStoreDirectory<
  TFunctionName extends 'directory',
  TSelectData = ReadContractResult<typeof jbTokenStoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof jbTokenStoreABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbTokenStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbTokenStoreABI,
    address: jbTokenStoreAddress[chainId as keyof typeof jbTokenStoreAddress],
    functionName: 'directory',
    ...config,
  } as UseContractReadConfig<
    typeof jbTokenStoreABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbTokenStoreABI}__ and `functionName` set to `"fundingCycleStore"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x6FA996581D7edaABE62C15eaE19fEeD4F1DdDfE7)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1246a50e3aDaF684Ac566f0c40816fF738F309B3)
 */
export function useJbTokenStoreFundingCycleStore<
  TFunctionName extends 'fundingCycleStore',
  TSelectData = ReadContractResult<typeof jbTokenStoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof jbTokenStoreABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbTokenStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbTokenStoreABI,
    address: jbTokenStoreAddress[chainId as keyof typeof jbTokenStoreAddress],
    functionName: 'fundingCycleStore',
    ...config,
  } as UseContractReadConfig<
    typeof jbTokenStoreABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbTokenStoreABI}__ and `functionName` set to `"operatorStore"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x6FA996581D7edaABE62C15eaE19fEeD4F1DdDfE7)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1246a50e3aDaF684Ac566f0c40816fF738F309B3)
 */
export function useJbTokenStoreOperatorStore<
  TFunctionName extends 'operatorStore',
  TSelectData = ReadContractResult<typeof jbTokenStoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof jbTokenStoreABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbTokenStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbTokenStoreABI,
    address: jbTokenStoreAddress[chainId as keyof typeof jbTokenStoreAddress],
    functionName: 'operatorStore',
    ...config,
  } as UseContractReadConfig<
    typeof jbTokenStoreABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbTokenStoreABI}__ and `functionName` set to `"projects"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x6FA996581D7edaABE62C15eaE19fEeD4F1DdDfE7)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1246a50e3aDaF684Ac566f0c40816fF738F309B3)
 */
export function useJbTokenStoreProjects<
  TFunctionName extends 'projects',
  TSelectData = ReadContractResult<typeof jbTokenStoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof jbTokenStoreABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbTokenStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbTokenStoreABI,
    address: jbTokenStoreAddress[chainId as keyof typeof jbTokenStoreAddress],
    functionName: 'projects',
    ...config,
  } as UseContractReadConfig<
    typeof jbTokenStoreABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbTokenStoreABI}__ and `functionName` set to `"tokenOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x6FA996581D7edaABE62C15eaE19fEeD4F1DdDfE7)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1246a50e3aDaF684Ac566f0c40816fF738F309B3)
 */
export function useJbTokenStoreTokenOf<
  TFunctionName extends 'tokenOf',
  TSelectData = ReadContractResult<typeof jbTokenStoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof jbTokenStoreABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbTokenStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbTokenStoreABI,
    address: jbTokenStoreAddress[chainId as keyof typeof jbTokenStoreAddress],
    functionName: 'tokenOf',
    ...config,
  } as UseContractReadConfig<
    typeof jbTokenStoreABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbTokenStoreABI}__ and `functionName` set to `"totalSupplyOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x6FA996581D7edaABE62C15eaE19fEeD4F1DdDfE7)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1246a50e3aDaF684Ac566f0c40816fF738F309B3)
 */
export function useJbTokenStoreTotalSupplyOf<
  TFunctionName extends 'totalSupplyOf',
  TSelectData = ReadContractResult<typeof jbTokenStoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof jbTokenStoreABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbTokenStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbTokenStoreABI,
    address: jbTokenStoreAddress[chainId as keyof typeof jbTokenStoreAddress],
    functionName: 'totalSupplyOf',
    ...config,
  } as UseContractReadConfig<
    typeof jbTokenStoreABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbTokenStoreABI}__ and `functionName` set to `"unclaimedBalanceOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x6FA996581D7edaABE62C15eaE19fEeD4F1DdDfE7)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1246a50e3aDaF684Ac566f0c40816fF738F309B3)
 */
export function useJbTokenStoreUnclaimedBalanceOf<
  TFunctionName extends 'unclaimedBalanceOf',
  TSelectData = ReadContractResult<typeof jbTokenStoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof jbTokenStoreABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbTokenStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbTokenStoreABI,
    address: jbTokenStoreAddress[chainId as keyof typeof jbTokenStoreAddress],
    functionName: 'unclaimedBalanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof jbTokenStoreABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbTokenStoreABI}__ and `functionName` set to `"unclaimedTotalSupplyOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x6FA996581D7edaABE62C15eaE19fEeD4F1DdDfE7)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1246a50e3aDaF684Ac566f0c40816fF738F309B3)
 */
export function useJbTokenStoreUnclaimedTotalSupplyOf<
  TFunctionName extends 'unclaimedTotalSupplyOf',
  TSelectData = ReadContractResult<typeof jbTokenStoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof jbTokenStoreABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbTokenStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbTokenStoreABI,
    address: jbTokenStoreAddress[chainId as keyof typeof jbTokenStoreAddress],
    functionName: 'unclaimedTotalSupplyOf',
    ...config,
  } as UseContractReadConfig<
    typeof jbTokenStoreABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbTokenStoreABI}__.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x6FA996581D7edaABE62C15eaE19fEeD4F1DdDfE7)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1246a50e3aDaF684Ac566f0c40816fF738F309B3)
 */
export function useJbTokenStoreWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbTokenStoreAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbTokenStoreABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      > & { address?: Address; chainId?: TChainId }
    : UseContractWriteConfig<typeof jbTokenStoreABI, TFunctionName, TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof jbTokenStoreABI, TFunctionName, TMode>({
    abi: jbTokenStoreABI,
    address: jbTokenStoreAddress[chainId as keyof typeof jbTokenStoreAddress],
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbTokenStoreABI}__ and `functionName` set to `"burnFrom"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x6FA996581D7edaABE62C15eaE19fEeD4F1DdDfE7)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1246a50e3aDaF684Ac566f0c40816fF738F309B3)
 */
export function useJbTokenStoreBurnFrom<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbTokenStoreAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbTokenStoreABI,
          'burnFrom'
        >['request']['abi'],
        'burnFrom',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'burnFrom' }
    : UseContractWriteConfig<typeof jbTokenStoreABI, 'burnFrom', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'burnFrom'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof jbTokenStoreABI, 'burnFrom', TMode>({
    abi: jbTokenStoreABI,
    address: jbTokenStoreAddress[chainId as keyof typeof jbTokenStoreAddress],
    functionName: 'burnFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbTokenStoreABI}__ and `functionName` set to `"claimFor"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x6FA996581D7edaABE62C15eaE19fEeD4F1DdDfE7)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1246a50e3aDaF684Ac566f0c40816fF738F309B3)
 */
export function useJbTokenStoreClaimFor<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbTokenStoreAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbTokenStoreABI,
          'claimFor'
        >['request']['abi'],
        'claimFor',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'claimFor' }
    : UseContractWriteConfig<typeof jbTokenStoreABI, 'claimFor', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'claimFor'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof jbTokenStoreABI, 'claimFor', TMode>({
    abi: jbTokenStoreABI,
    address: jbTokenStoreAddress[chainId as keyof typeof jbTokenStoreAddress],
    functionName: 'claimFor',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbTokenStoreABI}__ and `functionName` set to `"issueFor"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x6FA996581D7edaABE62C15eaE19fEeD4F1DdDfE7)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1246a50e3aDaF684Ac566f0c40816fF738F309B3)
 */
export function useJbTokenStoreIssueFor<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbTokenStoreAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbTokenStoreABI,
          'issueFor'
        >['request']['abi'],
        'issueFor',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'issueFor' }
    : UseContractWriteConfig<typeof jbTokenStoreABI, 'issueFor', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'issueFor'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof jbTokenStoreABI, 'issueFor', TMode>({
    abi: jbTokenStoreABI,
    address: jbTokenStoreAddress[chainId as keyof typeof jbTokenStoreAddress],
    functionName: 'issueFor',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbTokenStoreABI}__ and `functionName` set to `"mintFor"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x6FA996581D7edaABE62C15eaE19fEeD4F1DdDfE7)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1246a50e3aDaF684Ac566f0c40816fF738F309B3)
 */
export function useJbTokenStoreMintFor<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbTokenStoreAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbTokenStoreABI,
          'mintFor'
        >['request']['abi'],
        'mintFor',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'mintFor' }
    : UseContractWriteConfig<typeof jbTokenStoreABI, 'mintFor', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'mintFor'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof jbTokenStoreABI, 'mintFor', TMode>({
    abi: jbTokenStoreABI,
    address: jbTokenStoreAddress[chainId as keyof typeof jbTokenStoreAddress],
    functionName: 'mintFor',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbTokenStoreABI}__ and `functionName` set to `"setFor"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x6FA996581D7edaABE62C15eaE19fEeD4F1DdDfE7)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1246a50e3aDaF684Ac566f0c40816fF738F309B3)
 */
export function useJbTokenStoreSetFor<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbTokenStoreAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbTokenStoreABI,
          'setFor'
        >['request']['abi'],
        'setFor',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'setFor' }
    : UseContractWriteConfig<typeof jbTokenStoreABI, 'setFor', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setFor'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof jbTokenStoreABI, 'setFor', TMode>({
    abi: jbTokenStoreABI,
    address: jbTokenStoreAddress[chainId as keyof typeof jbTokenStoreAddress],
    functionName: 'setFor',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbTokenStoreABI}__ and `functionName` set to `"transferFrom"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x6FA996581D7edaABE62C15eaE19fEeD4F1DdDfE7)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1246a50e3aDaF684Ac566f0c40816fF738F309B3)
 */
export function useJbTokenStoreTransferFrom<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbTokenStoreAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbTokenStoreABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'transferFrom'
      }
    : UseContractWriteConfig<typeof jbTokenStoreABI, 'transferFrom', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'transferFrom'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof jbTokenStoreABI, 'transferFrom', TMode>({
    abi: jbTokenStoreABI,
    address: jbTokenStoreAddress[chainId as keyof typeof jbTokenStoreAddress],
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbTokenStoreABI}__.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x6FA996581D7edaABE62C15eaE19fEeD4F1DdDfE7)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1246a50e3aDaF684Ac566f0c40816fF738F309B3)
 */
export function usePrepareJbTokenStoreWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof jbTokenStoreABI, TFunctionName>,
    'abi'
  > & { chainId?: keyof typeof jbTokenStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbTokenStoreABI,
    address: jbTokenStoreAddress[chainId as keyof typeof jbTokenStoreAddress],
    ...config,
  } as UsePrepareContractWriteConfig<typeof jbTokenStoreABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbTokenStoreABI}__ and `functionName` set to `"burnFrom"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x6FA996581D7edaABE62C15eaE19fEeD4F1DdDfE7)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1246a50e3aDaF684Ac566f0c40816fF738F309B3)
 */
export function usePrepareJbTokenStoreBurnFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof jbTokenStoreABI, 'burnFrom'>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbTokenStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbTokenStoreABI,
    address: jbTokenStoreAddress[chainId as keyof typeof jbTokenStoreAddress],
    functionName: 'burnFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof jbTokenStoreABI, 'burnFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbTokenStoreABI}__ and `functionName` set to `"claimFor"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x6FA996581D7edaABE62C15eaE19fEeD4F1DdDfE7)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1246a50e3aDaF684Ac566f0c40816fF738F309B3)
 */
export function usePrepareJbTokenStoreClaimFor(
  config: Omit<
    UsePrepareContractWriteConfig<typeof jbTokenStoreABI, 'claimFor'>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbTokenStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbTokenStoreABI,
    address: jbTokenStoreAddress[chainId as keyof typeof jbTokenStoreAddress],
    functionName: 'claimFor',
    ...config,
  } as UsePrepareContractWriteConfig<typeof jbTokenStoreABI, 'claimFor'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbTokenStoreABI}__ and `functionName` set to `"issueFor"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x6FA996581D7edaABE62C15eaE19fEeD4F1DdDfE7)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1246a50e3aDaF684Ac566f0c40816fF738F309B3)
 */
export function usePrepareJbTokenStoreIssueFor(
  config: Omit<
    UsePrepareContractWriteConfig<typeof jbTokenStoreABI, 'issueFor'>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbTokenStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbTokenStoreABI,
    address: jbTokenStoreAddress[chainId as keyof typeof jbTokenStoreAddress],
    functionName: 'issueFor',
    ...config,
  } as UsePrepareContractWriteConfig<typeof jbTokenStoreABI, 'issueFor'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbTokenStoreABI}__ and `functionName` set to `"mintFor"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x6FA996581D7edaABE62C15eaE19fEeD4F1DdDfE7)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1246a50e3aDaF684Ac566f0c40816fF738F309B3)
 */
export function usePrepareJbTokenStoreMintFor(
  config: Omit<
    UsePrepareContractWriteConfig<typeof jbTokenStoreABI, 'mintFor'>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbTokenStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbTokenStoreABI,
    address: jbTokenStoreAddress[chainId as keyof typeof jbTokenStoreAddress],
    functionName: 'mintFor',
    ...config,
  } as UsePrepareContractWriteConfig<typeof jbTokenStoreABI, 'mintFor'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbTokenStoreABI}__ and `functionName` set to `"setFor"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x6FA996581D7edaABE62C15eaE19fEeD4F1DdDfE7)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1246a50e3aDaF684Ac566f0c40816fF738F309B3)
 */
export function usePrepareJbTokenStoreSetFor(
  config: Omit<
    UsePrepareContractWriteConfig<typeof jbTokenStoreABI, 'setFor'>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbTokenStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbTokenStoreABI,
    address: jbTokenStoreAddress[chainId as keyof typeof jbTokenStoreAddress],
    functionName: 'setFor',
    ...config,
  } as UsePrepareContractWriteConfig<typeof jbTokenStoreABI, 'setFor'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbTokenStoreABI}__ and `functionName` set to `"transferFrom"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x6FA996581D7edaABE62C15eaE19fEeD4F1DdDfE7)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1246a50e3aDaF684Ac566f0c40816fF738F309B3)
 */
export function usePrepareJbTokenStoreTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof jbTokenStoreABI, 'transferFrom'>,
    'abi' | 'functionName'
  > & { chainId?: keyof typeof jbTokenStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbTokenStoreABI,
    address: jbTokenStoreAddress[chainId as keyof typeof jbTokenStoreAddress],
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof jbTokenStoreABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbTokenStoreABI}__.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x6FA996581D7edaABE62C15eaE19fEeD4F1DdDfE7)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1246a50e3aDaF684Ac566f0c40816fF738F309B3)
 */
export function useJbTokenStoreEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof jbTokenStoreABI, TEventName>,
    'abi'
  > & { chainId?: keyof typeof jbTokenStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbTokenStoreABI,
    address: jbTokenStoreAddress[chainId as keyof typeof jbTokenStoreAddress],
    ...config,
  } as UseContractEventConfig<typeof jbTokenStoreABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbTokenStoreABI}__ and `eventName` set to `"Burn"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x6FA996581D7edaABE62C15eaE19fEeD4F1DdDfE7)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1246a50e3aDaF684Ac566f0c40816fF738F309B3)
 */
export function useJbTokenStoreBurnEvent(
  config: Omit<
    UseContractEventConfig<typeof jbTokenStoreABI, 'Burn'>,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbTokenStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbTokenStoreABI,
    address: jbTokenStoreAddress[chainId as keyof typeof jbTokenStoreAddress],
    eventName: 'Burn',
    ...config,
  } as UseContractEventConfig<typeof jbTokenStoreABI, 'Burn'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbTokenStoreABI}__ and `eventName` set to `"Claim"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x6FA996581D7edaABE62C15eaE19fEeD4F1DdDfE7)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1246a50e3aDaF684Ac566f0c40816fF738F309B3)
 */
export function useJbTokenStoreClaimEvent(
  config: Omit<
    UseContractEventConfig<typeof jbTokenStoreABI, 'Claim'>,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbTokenStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbTokenStoreABI,
    address: jbTokenStoreAddress[chainId as keyof typeof jbTokenStoreAddress],
    eventName: 'Claim',
    ...config,
  } as UseContractEventConfig<typeof jbTokenStoreABI, 'Claim'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbTokenStoreABI}__ and `eventName` set to `"Issue"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x6FA996581D7edaABE62C15eaE19fEeD4F1DdDfE7)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1246a50e3aDaF684Ac566f0c40816fF738F309B3)
 */
export function useJbTokenStoreIssueEvent(
  config: Omit<
    UseContractEventConfig<typeof jbTokenStoreABI, 'Issue'>,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbTokenStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbTokenStoreABI,
    address: jbTokenStoreAddress[chainId as keyof typeof jbTokenStoreAddress],
    eventName: 'Issue',
    ...config,
  } as UseContractEventConfig<typeof jbTokenStoreABI, 'Issue'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbTokenStoreABI}__ and `eventName` set to `"Mint"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x6FA996581D7edaABE62C15eaE19fEeD4F1DdDfE7)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1246a50e3aDaF684Ac566f0c40816fF738F309B3)
 */
export function useJbTokenStoreMintEvent(
  config: Omit<
    UseContractEventConfig<typeof jbTokenStoreABI, 'Mint'>,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbTokenStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbTokenStoreABI,
    address: jbTokenStoreAddress[chainId as keyof typeof jbTokenStoreAddress],
    eventName: 'Mint',
    ...config,
  } as UseContractEventConfig<typeof jbTokenStoreABI, 'Mint'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbTokenStoreABI}__ and `eventName` set to `"Set"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x6FA996581D7edaABE62C15eaE19fEeD4F1DdDfE7)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1246a50e3aDaF684Ac566f0c40816fF738F309B3)
 */
export function useJbTokenStoreSetEvent(
  config: Omit<
    UseContractEventConfig<typeof jbTokenStoreABI, 'Set'>,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbTokenStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbTokenStoreABI,
    address: jbTokenStoreAddress[chainId as keyof typeof jbTokenStoreAddress],
    eventName: 'Set',
    ...config,
  } as UseContractEventConfig<typeof jbTokenStoreABI, 'Set'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbTokenStoreABI}__ and `eventName` set to `"Transfer"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x6FA996581D7edaABE62C15eaE19fEeD4F1DdDfE7)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x1246a50e3aDaF684Ac566f0c40816fF738F309B3)
 */
export function useJbTokenStoreTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof jbTokenStoreABI, 'Transfer'>,
    'abi' | 'eventName'
  > & { chainId?: keyof typeof jbTokenStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbTokenStoreABI,
    address: jbTokenStoreAddress[chainId as keyof typeof jbTokenStoreAddress],
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof jbTokenStoreABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbSingleTokenPaymentTerminalStoreABI}__.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xdF7Ca703225c5da79A86E08E03A206c267B7470C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x5b62ccB7fdA139185374c8f36FAa388c20E1387F)
 */
export function useJbSingleTokenPaymentTerminalStoreRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof jbSingleTokenPaymentTerminalStoreABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbSingleTokenPaymentTerminalStoreABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > & {
    chainId?: keyof typeof jbSingleTokenPaymentTerminalStoreAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbSingleTokenPaymentTerminalStoreABI,
    address:
      jbSingleTokenPaymentTerminalStoreAddress[
        chainId as keyof typeof jbSingleTokenPaymentTerminalStoreAddress
      ],
    ...config,
  } as UseContractReadConfig<
    typeof jbSingleTokenPaymentTerminalStoreABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbSingleTokenPaymentTerminalStoreABI}__ and `functionName` set to `"balanceOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xdF7Ca703225c5da79A86E08E03A206c267B7470C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x5b62ccB7fdA139185374c8f36FAa388c20E1387F)
 */
export function useJbSingleTokenPaymentTerminalStoreBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<
    typeof jbSingleTokenPaymentTerminalStoreABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbSingleTokenPaymentTerminalStoreABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & {
    chainId?: keyof typeof jbSingleTokenPaymentTerminalStoreAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbSingleTokenPaymentTerminalStoreABI,
    address:
      jbSingleTokenPaymentTerminalStoreAddress[
        chainId as keyof typeof jbSingleTokenPaymentTerminalStoreAddress
      ],
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof jbSingleTokenPaymentTerminalStoreABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbSingleTokenPaymentTerminalStoreABI}__ and `functionName` set to `"currentOverflowOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xdF7Ca703225c5da79A86E08E03A206c267B7470C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x5b62ccB7fdA139185374c8f36FAa388c20E1387F)
 */
export function useJbSingleTokenPaymentTerminalStoreCurrentOverflowOf<
  TFunctionName extends 'currentOverflowOf',
  TSelectData = ReadContractResult<
    typeof jbSingleTokenPaymentTerminalStoreABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbSingleTokenPaymentTerminalStoreABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & {
    chainId?: keyof typeof jbSingleTokenPaymentTerminalStoreAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbSingleTokenPaymentTerminalStoreABI,
    address:
      jbSingleTokenPaymentTerminalStoreAddress[
        chainId as keyof typeof jbSingleTokenPaymentTerminalStoreAddress
      ],
    functionName: 'currentOverflowOf',
    ...config,
  } as UseContractReadConfig<
    typeof jbSingleTokenPaymentTerminalStoreABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbSingleTokenPaymentTerminalStoreABI}__ and `functionName` set to `"currentReclaimableOverflowOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xdF7Ca703225c5da79A86E08E03A206c267B7470C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x5b62ccB7fdA139185374c8f36FAa388c20E1387F)
 */
export function useJbSingleTokenPaymentTerminalStoreCurrentReclaimableOverflowOf<
  TFunctionName extends 'currentReclaimableOverflowOf',
  TSelectData = ReadContractResult<
    typeof jbSingleTokenPaymentTerminalStoreABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbSingleTokenPaymentTerminalStoreABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & {
    chainId?: keyof typeof jbSingleTokenPaymentTerminalStoreAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbSingleTokenPaymentTerminalStoreABI,
    address:
      jbSingleTokenPaymentTerminalStoreAddress[
        chainId as keyof typeof jbSingleTokenPaymentTerminalStoreAddress
      ],
    functionName: 'currentReclaimableOverflowOf',
    ...config,
  } as UseContractReadConfig<
    typeof jbSingleTokenPaymentTerminalStoreABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbSingleTokenPaymentTerminalStoreABI}__ and `functionName` set to `"currentTotalOverflowOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xdF7Ca703225c5da79A86E08E03A206c267B7470C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x5b62ccB7fdA139185374c8f36FAa388c20E1387F)
 */
export function useJbSingleTokenPaymentTerminalStoreCurrentTotalOverflowOf<
  TFunctionName extends 'currentTotalOverflowOf',
  TSelectData = ReadContractResult<
    typeof jbSingleTokenPaymentTerminalStoreABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbSingleTokenPaymentTerminalStoreABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & {
    chainId?: keyof typeof jbSingleTokenPaymentTerminalStoreAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbSingleTokenPaymentTerminalStoreABI,
    address:
      jbSingleTokenPaymentTerminalStoreAddress[
        chainId as keyof typeof jbSingleTokenPaymentTerminalStoreAddress
      ],
    functionName: 'currentTotalOverflowOf',
    ...config,
  } as UseContractReadConfig<
    typeof jbSingleTokenPaymentTerminalStoreABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbSingleTokenPaymentTerminalStoreABI}__ and `functionName` set to `"directory"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xdF7Ca703225c5da79A86E08E03A206c267B7470C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x5b62ccB7fdA139185374c8f36FAa388c20E1387F)
 */
export function useJbSingleTokenPaymentTerminalStoreDirectory<
  TFunctionName extends 'directory',
  TSelectData = ReadContractResult<
    typeof jbSingleTokenPaymentTerminalStoreABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbSingleTokenPaymentTerminalStoreABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & {
    chainId?: keyof typeof jbSingleTokenPaymentTerminalStoreAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbSingleTokenPaymentTerminalStoreABI,
    address:
      jbSingleTokenPaymentTerminalStoreAddress[
        chainId as keyof typeof jbSingleTokenPaymentTerminalStoreAddress
      ],
    functionName: 'directory',
    ...config,
  } as UseContractReadConfig<
    typeof jbSingleTokenPaymentTerminalStoreABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbSingleTokenPaymentTerminalStoreABI}__ and `functionName` set to `"fundingCycleStore"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xdF7Ca703225c5da79A86E08E03A206c267B7470C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x5b62ccB7fdA139185374c8f36FAa388c20E1387F)
 */
export function useJbSingleTokenPaymentTerminalStoreFundingCycleStore<
  TFunctionName extends 'fundingCycleStore',
  TSelectData = ReadContractResult<
    typeof jbSingleTokenPaymentTerminalStoreABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbSingleTokenPaymentTerminalStoreABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & {
    chainId?: keyof typeof jbSingleTokenPaymentTerminalStoreAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbSingleTokenPaymentTerminalStoreABI,
    address:
      jbSingleTokenPaymentTerminalStoreAddress[
        chainId as keyof typeof jbSingleTokenPaymentTerminalStoreAddress
      ],
    functionName: 'fundingCycleStore',
    ...config,
  } as UseContractReadConfig<
    typeof jbSingleTokenPaymentTerminalStoreABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbSingleTokenPaymentTerminalStoreABI}__ and `functionName` set to `"prices"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xdF7Ca703225c5da79A86E08E03A206c267B7470C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x5b62ccB7fdA139185374c8f36FAa388c20E1387F)
 */
export function useJbSingleTokenPaymentTerminalStorePrices<
  TFunctionName extends 'prices',
  TSelectData = ReadContractResult<
    typeof jbSingleTokenPaymentTerminalStoreABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbSingleTokenPaymentTerminalStoreABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & {
    chainId?: keyof typeof jbSingleTokenPaymentTerminalStoreAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbSingleTokenPaymentTerminalStoreABI,
    address:
      jbSingleTokenPaymentTerminalStoreAddress[
        chainId as keyof typeof jbSingleTokenPaymentTerminalStoreAddress
      ],
    functionName: 'prices',
    ...config,
  } as UseContractReadConfig<
    typeof jbSingleTokenPaymentTerminalStoreABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbSingleTokenPaymentTerminalStoreABI}__ and `functionName` set to `"usedDistributionLimitOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xdF7Ca703225c5da79A86E08E03A206c267B7470C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x5b62ccB7fdA139185374c8f36FAa388c20E1387F)
 */
export function useJbSingleTokenPaymentTerminalStoreUsedDistributionLimitOf<
  TFunctionName extends 'usedDistributionLimitOf',
  TSelectData = ReadContractResult<
    typeof jbSingleTokenPaymentTerminalStoreABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbSingleTokenPaymentTerminalStoreABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & {
    chainId?: keyof typeof jbSingleTokenPaymentTerminalStoreAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbSingleTokenPaymentTerminalStoreABI,
    address:
      jbSingleTokenPaymentTerminalStoreAddress[
        chainId as keyof typeof jbSingleTokenPaymentTerminalStoreAddress
      ],
    functionName: 'usedDistributionLimitOf',
    ...config,
  } as UseContractReadConfig<
    typeof jbSingleTokenPaymentTerminalStoreABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbSingleTokenPaymentTerminalStoreABI}__ and `functionName` set to `"usedOverflowAllowanceOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xdF7Ca703225c5da79A86E08E03A206c267B7470C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x5b62ccB7fdA139185374c8f36FAa388c20E1387F)
 */
export function useJbSingleTokenPaymentTerminalStoreUsedOverflowAllowanceOf<
  TFunctionName extends 'usedOverflowAllowanceOf',
  TSelectData = ReadContractResult<
    typeof jbSingleTokenPaymentTerminalStoreABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof jbSingleTokenPaymentTerminalStoreABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > & {
    chainId?: keyof typeof jbSingleTokenPaymentTerminalStoreAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: jbSingleTokenPaymentTerminalStoreABI,
    address:
      jbSingleTokenPaymentTerminalStoreAddress[
        chainId as keyof typeof jbSingleTokenPaymentTerminalStoreAddress
      ],
    functionName: 'usedOverflowAllowanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof jbSingleTokenPaymentTerminalStoreABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbSingleTokenPaymentTerminalStoreABI}__.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xdF7Ca703225c5da79A86E08E03A206c267B7470C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x5b62ccB7fdA139185374c8f36FAa388c20E1387F)
 */
export function useJbSingleTokenPaymentTerminalStoreWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbSingleTokenPaymentTerminalStoreAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbSingleTokenPaymentTerminalStoreABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      > & { address?: Address; chainId?: TChainId }
    : UseContractWriteConfig<
        typeof jbSingleTokenPaymentTerminalStoreABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof jbSingleTokenPaymentTerminalStoreABI,
    TFunctionName,
    TMode
  >({
    abi: jbSingleTokenPaymentTerminalStoreABI,
    address:
      jbSingleTokenPaymentTerminalStoreAddress[
        chainId as keyof typeof jbSingleTokenPaymentTerminalStoreAddress
      ],
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbSingleTokenPaymentTerminalStoreABI}__ and `functionName` set to `"recordAddedBalanceFor"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xdF7Ca703225c5da79A86E08E03A206c267B7470C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x5b62ccB7fdA139185374c8f36FAa388c20E1387F)
 */
export function useJbSingleTokenPaymentTerminalStoreRecordAddedBalanceFor<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbSingleTokenPaymentTerminalStoreAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbSingleTokenPaymentTerminalStoreABI,
          'recordAddedBalanceFor'
        >['request']['abi'],
        'recordAddedBalanceFor',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'recordAddedBalanceFor'
      }
    : UseContractWriteConfig<
        typeof jbSingleTokenPaymentTerminalStoreABI,
        'recordAddedBalanceFor',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'recordAddedBalanceFor'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof jbSingleTokenPaymentTerminalStoreABI,
    'recordAddedBalanceFor',
    TMode
  >({
    abi: jbSingleTokenPaymentTerminalStoreABI,
    address:
      jbSingleTokenPaymentTerminalStoreAddress[
        chainId as keyof typeof jbSingleTokenPaymentTerminalStoreAddress
      ],
    functionName: 'recordAddedBalanceFor',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbSingleTokenPaymentTerminalStoreABI}__ and `functionName` set to `"recordDistributionFor"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xdF7Ca703225c5da79A86E08E03A206c267B7470C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x5b62ccB7fdA139185374c8f36FAa388c20E1387F)
 */
export function useJbSingleTokenPaymentTerminalStoreRecordDistributionFor<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbSingleTokenPaymentTerminalStoreAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbSingleTokenPaymentTerminalStoreABI,
          'recordDistributionFor'
        >['request']['abi'],
        'recordDistributionFor',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'recordDistributionFor'
      }
    : UseContractWriteConfig<
        typeof jbSingleTokenPaymentTerminalStoreABI,
        'recordDistributionFor',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'recordDistributionFor'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof jbSingleTokenPaymentTerminalStoreABI,
    'recordDistributionFor',
    TMode
  >({
    abi: jbSingleTokenPaymentTerminalStoreABI,
    address:
      jbSingleTokenPaymentTerminalStoreAddress[
        chainId as keyof typeof jbSingleTokenPaymentTerminalStoreAddress
      ],
    functionName: 'recordDistributionFor',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbSingleTokenPaymentTerminalStoreABI}__ and `functionName` set to `"recordMigration"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xdF7Ca703225c5da79A86E08E03A206c267B7470C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x5b62ccB7fdA139185374c8f36FAa388c20E1387F)
 */
export function useJbSingleTokenPaymentTerminalStoreRecordMigration<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbSingleTokenPaymentTerminalStoreAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbSingleTokenPaymentTerminalStoreABI,
          'recordMigration'
        >['request']['abi'],
        'recordMigration',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'recordMigration'
      }
    : UseContractWriteConfig<
        typeof jbSingleTokenPaymentTerminalStoreABI,
        'recordMigration',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'recordMigration'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof jbSingleTokenPaymentTerminalStoreABI,
    'recordMigration',
    TMode
  >({
    abi: jbSingleTokenPaymentTerminalStoreABI,
    address:
      jbSingleTokenPaymentTerminalStoreAddress[
        chainId as keyof typeof jbSingleTokenPaymentTerminalStoreAddress
      ],
    functionName: 'recordMigration',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbSingleTokenPaymentTerminalStoreABI}__ and `functionName` set to `"recordPaymentFrom"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xdF7Ca703225c5da79A86E08E03A206c267B7470C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x5b62ccB7fdA139185374c8f36FAa388c20E1387F)
 */
export function useJbSingleTokenPaymentTerminalStoreRecordPaymentFrom<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbSingleTokenPaymentTerminalStoreAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbSingleTokenPaymentTerminalStoreABI,
          'recordPaymentFrom'
        >['request']['abi'],
        'recordPaymentFrom',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'recordPaymentFrom'
      }
    : UseContractWriteConfig<
        typeof jbSingleTokenPaymentTerminalStoreABI,
        'recordPaymentFrom',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'recordPaymentFrom'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof jbSingleTokenPaymentTerminalStoreABI,
    'recordPaymentFrom',
    TMode
  >({
    abi: jbSingleTokenPaymentTerminalStoreABI,
    address:
      jbSingleTokenPaymentTerminalStoreAddress[
        chainId as keyof typeof jbSingleTokenPaymentTerminalStoreAddress
      ],
    functionName: 'recordPaymentFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbSingleTokenPaymentTerminalStoreABI}__ and `functionName` set to `"recordRedemptionFor"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xdF7Ca703225c5da79A86E08E03A206c267B7470C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x5b62ccB7fdA139185374c8f36FAa388c20E1387F)
 */
export function useJbSingleTokenPaymentTerminalStoreRecordRedemptionFor<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbSingleTokenPaymentTerminalStoreAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbSingleTokenPaymentTerminalStoreABI,
          'recordRedemptionFor'
        >['request']['abi'],
        'recordRedemptionFor',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'recordRedemptionFor'
      }
    : UseContractWriteConfig<
        typeof jbSingleTokenPaymentTerminalStoreABI,
        'recordRedemptionFor',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'recordRedemptionFor'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof jbSingleTokenPaymentTerminalStoreABI,
    'recordRedemptionFor',
    TMode
  >({
    abi: jbSingleTokenPaymentTerminalStoreABI,
    address:
      jbSingleTokenPaymentTerminalStoreAddress[
        chainId as keyof typeof jbSingleTokenPaymentTerminalStoreAddress
      ],
    functionName: 'recordRedemptionFor',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbSingleTokenPaymentTerminalStoreABI}__ and `functionName` set to `"recordUsedAllowanceOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xdF7Ca703225c5da79A86E08E03A206c267B7470C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x5b62ccB7fdA139185374c8f36FAa388c20E1387F)
 */
export function useJbSingleTokenPaymentTerminalStoreRecordUsedAllowanceOf<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbSingleTokenPaymentTerminalStoreAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbSingleTokenPaymentTerminalStoreABI,
          'recordUsedAllowanceOf'
        >['request']['abi'],
        'recordUsedAllowanceOf',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'recordUsedAllowanceOf'
      }
    : UseContractWriteConfig<
        typeof jbSingleTokenPaymentTerminalStoreABI,
        'recordUsedAllowanceOf',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'recordUsedAllowanceOf'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof jbSingleTokenPaymentTerminalStoreABI,
    'recordUsedAllowanceOf',
    TMode
  >({
    abi: jbSingleTokenPaymentTerminalStoreABI,
    address:
      jbSingleTokenPaymentTerminalStoreAddress[
        chainId as keyof typeof jbSingleTokenPaymentTerminalStoreAddress
      ],
    functionName: 'recordUsedAllowanceOf',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbSingleTokenPaymentTerminalStoreABI}__.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xdF7Ca703225c5da79A86E08E03A206c267B7470C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x5b62ccB7fdA139185374c8f36FAa388c20E1387F)
 */
export function usePrepareJbSingleTokenPaymentTerminalStoreWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof jbSingleTokenPaymentTerminalStoreABI,
      TFunctionName
    >,
    'abi'
  > & {
    chainId?: keyof typeof jbSingleTokenPaymentTerminalStoreAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbSingleTokenPaymentTerminalStoreABI,
    address:
      jbSingleTokenPaymentTerminalStoreAddress[
        chainId as keyof typeof jbSingleTokenPaymentTerminalStoreAddress
      ],
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof jbSingleTokenPaymentTerminalStoreABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbSingleTokenPaymentTerminalStoreABI}__ and `functionName` set to `"recordAddedBalanceFor"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xdF7Ca703225c5da79A86E08E03A206c267B7470C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x5b62ccB7fdA139185374c8f36FAa388c20E1387F)
 */
export function usePrepareJbSingleTokenPaymentTerminalStoreRecordAddedBalanceFor(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof jbSingleTokenPaymentTerminalStoreABI,
      'recordAddedBalanceFor'
    >,
    'abi' | 'functionName'
  > & {
    chainId?: keyof typeof jbSingleTokenPaymentTerminalStoreAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbSingleTokenPaymentTerminalStoreABI,
    address:
      jbSingleTokenPaymentTerminalStoreAddress[
        chainId as keyof typeof jbSingleTokenPaymentTerminalStoreAddress
      ],
    functionName: 'recordAddedBalanceFor',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof jbSingleTokenPaymentTerminalStoreABI,
    'recordAddedBalanceFor'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbSingleTokenPaymentTerminalStoreABI}__ and `functionName` set to `"recordDistributionFor"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xdF7Ca703225c5da79A86E08E03A206c267B7470C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x5b62ccB7fdA139185374c8f36FAa388c20E1387F)
 */
export function usePrepareJbSingleTokenPaymentTerminalStoreRecordDistributionFor(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof jbSingleTokenPaymentTerminalStoreABI,
      'recordDistributionFor'
    >,
    'abi' | 'functionName'
  > & {
    chainId?: keyof typeof jbSingleTokenPaymentTerminalStoreAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbSingleTokenPaymentTerminalStoreABI,
    address:
      jbSingleTokenPaymentTerminalStoreAddress[
        chainId as keyof typeof jbSingleTokenPaymentTerminalStoreAddress
      ],
    functionName: 'recordDistributionFor',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof jbSingleTokenPaymentTerminalStoreABI,
    'recordDistributionFor'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbSingleTokenPaymentTerminalStoreABI}__ and `functionName` set to `"recordMigration"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xdF7Ca703225c5da79A86E08E03A206c267B7470C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x5b62ccB7fdA139185374c8f36FAa388c20E1387F)
 */
export function usePrepareJbSingleTokenPaymentTerminalStoreRecordMigration(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof jbSingleTokenPaymentTerminalStoreABI,
      'recordMigration'
    >,
    'abi' | 'functionName'
  > & {
    chainId?: keyof typeof jbSingleTokenPaymentTerminalStoreAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbSingleTokenPaymentTerminalStoreABI,
    address:
      jbSingleTokenPaymentTerminalStoreAddress[
        chainId as keyof typeof jbSingleTokenPaymentTerminalStoreAddress
      ],
    functionName: 'recordMigration',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof jbSingleTokenPaymentTerminalStoreABI,
    'recordMigration'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbSingleTokenPaymentTerminalStoreABI}__ and `functionName` set to `"recordPaymentFrom"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xdF7Ca703225c5da79A86E08E03A206c267B7470C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x5b62ccB7fdA139185374c8f36FAa388c20E1387F)
 */
export function usePrepareJbSingleTokenPaymentTerminalStoreRecordPaymentFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof jbSingleTokenPaymentTerminalStoreABI,
      'recordPaymentFrom'
    >,
    'abi' | 'functionName'
  > & {
    chainId?: keyof typeof jbSingleTokenPaymentTerminalStoreAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbSingleTokenPaymentTerminalStoreABI,
    address:
      jbSingleTokenPaymentTerminalStoreAddress[
        chainId as keyof typeof jbSingleTokenPaymentTerminalStoreAddress
      ],
    functionName: 'recordPaymentFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof jbSingleTokenPaymentTerminalStoreABI,
    'recordPaymentFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbSingleTokenPaymentTerminalStoreABI}__ and `functionName` set to `"recordRedemptionFor"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xdF7Ca703225c5da79A86E08E03A206c267B7470C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x5b62ccB7fdA139185374c8f36FAa388c20E1387F)
 */
export function usePrepareJbSingleTokenPaymentTerminalStoreRecordRedemptionFor(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof jbSingleTokenPaymentTerminalStoreABI,
      'recordRedemptionFor'
    >,
    'abi' | 'functionName'
  > & {
    chainId?: keyof typeof jbSingleTokenPaymentTerminalStoreAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbSingleTokenPaymentTerminalStoreABI,
    address:
      jbSingleTokenPaymentTerminalStoreAddress[
        chainId as keyof typeof jbSingleTokenPaymentTerminalStoreAddress
      ],
    functionName: 'recordRedemptionFor',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof jbSingleTokenPaymentTerminalStoreABI,
    'recordRedemptionFor'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbSingleTokenPaymentTerminalStoreABI}__ and `functionName` set to `"recordUsedAllowanceOf"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xdF7Ca703225c5da79A86E08E03A206c267B7470C)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x5b62ccB7fdA139185374c8f36FAa388c20E1387F)
 */
export function usePrepareJbSingleTokenPaymentTerminalStoreRecordUsedAllowanceOf(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof jbSingleTokenPaymentTerminalStoreABI,
      'recordUsedAllowanceOf'
    >,
    'abi' | 'functionName'
  > & {
    chainId?: keyof typeof jbSingleTokenPaymentTerminalStoreAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbSingleTokenPaymentTerminalStoreABI,
    address:
      jbSingleTokenPaymentTerminalStoreAddress[
        chainId as keyof typeof jbSingleTokenPaymentTerminalStoreAddress
      ],
    functionName: 'recordUsedAllowanceOf',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof jbSingleTokenPaymentTerminalStoreABI,
    'recordUsedAllowanceOf'
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbetherc20ProjectPayerDeployerABI}__.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xa5ca9CEa71Df4b680484e5Ff753a1b1185ba5b43)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x483bFC77f28DB242d40aa456D801354fEEBb502E)
 */
export function useJbetherc20ProjectPayerDeployerWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbetherc20ProjectPayerDeployerAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbetherc20ProjectPayerDeployerABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      > & { address?: Address; chainId?: TChainId }
    : UseContractWriteConfig<
        typeof jbetherc20ProjectPayerDeployerABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof jbetherc20ProjectPayerDeployerABI,
    TFunctionName,
    TMode
  >({
    abi: jbetherc20ProjectPayerDeployerABI,
    address:
      jbetherc20ProjectPayerDeployerAddress[
        chainId as keyof typeof jbetherc20ProjectPayerDeployerAddress
      ],
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbetherc20ProjectPayerDeployerABI}__ and `functionName` set to `"deployProjectPayer"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xa5ca9CEa71Df4b680484e5Ff753a1b1185ba5b43)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x483bFC77f28DB242d40aa456D801354fEEBb502E)
 */
export function useJbetherc20ProjectPayerDeployerDeployProjectPayer<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbetherc20ProjectPayerDeployerAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbetherc20ProjectPayerDeployerABI,
          'deployProjectPayer'
        >['request']['abi'],
        'deployProjectPayer',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'deployProjectPayer'
      }
    : UseContractWriteConfig<
        typeof jbetherc20ProjectPayerDeployerABI,
        'deployProjectPayer',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'deployProjectPayer'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof jbetherc20ProjectPayerDeployerABI,
    'deployProjectPayer',
    TMode
  >({
    abi: jbetherc20ProjectPayerDeployerABI,
    address:
      jbetherc20ProjectPayerDeployerAddress[
        chainId as keyof typeof jbetherc20ProjectPayerDeployerAddress
      ],
    functionName: 'deployProjectPayer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbetherc20ProjectPayerDeployerABI}__.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xa5ca9CEa71Df4b680484e5Ff753a1b1185ba5b43)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x483bFC77f28DB242d40aa456D801354fEEBb502E)
 */
export function usePrepareJbetherc20ProjectPayerDeployerWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof jbetherc20ProjectPayerDeployerABI,
      TFunctionName
    >,
    'abi'
  > & {
    chainId?: keyof typeof jbetherc20ProjectPayerDeployerAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbetherc20ProjectPayerDeployerABI,
    address:
      jbetherc20ProjectPayerDeployerAddress[
        chainId as keyof typeof jbetherc20ProjectPayerDeployerAddress
      ],
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof jbetherc20ProjectPayerDeployerABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbetherc20ProjectPayerDeployerABI}__ and `functionName` set to `"deployProjectPayer"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xa5ca9CEa71Df4b680484e5Ff753a1b1185ba5b43)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x483bFC77f28DB242d40aa456D801354fEEBb502E)
 */
export function usePrepareJbetherc20ProjectPayerDeployerDeployProjectPayer(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof jbetherc20ProjectPayerDeployerABI,
      'deployProjectPayer'
    >,
    'abi' | 'functionName'
  > & {
    chainId?: keyof typeof jbetherc20ProjectPayerDeployerAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbetherc20ProjectPayerDeployerABI,
    address:
      jbetherc20ProjectPayerDeployerAddress[
        chainId as keyof typeof jbetherc20ProjectPayerDeployerAddress
      ],
    functionName: 'deployProjectPayer',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof jbetherc20ProjectPayerDeployerABI,
    'deployProjectPayer'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbetherc20ProjectPayerDeployerABI}__.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xa5ca9CEa71Df4b680484e5Ff753a1b1185ba5b43)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x483bFC77f28DB242d40aa456D801354fEEBb502E)
 */
export function useJbetherc20ProjectPayerDeployerEvent<
  TEventName extends string,
>(
  config: Omit<
    UseContractEventConfig<
      typeof jbetherc20ProjectPayerDeployerABI,
      TEventName
    >,
    'abi'
  > & {
    chainId?: keyof typeof jbetherc20ProjectPayerDeployerAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbetherc20ProjectPayerDeployerABI,
    address:
      jbetherc20ProjectPayerDeployerAddress[
        chainId as keyof typeof jbetherc20ProjectPayerDeployerAddress
      ],
    ...config,
  } as UseContractEventConfig<
    typeof jbetherc20ProjectPayerDeployerABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbetherc20ProjectPayerDeployerABI}__ and `eventName` set to `"DeployProjectPayer"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xa5ca9CEa71Df4b680484e5Ff753a1b1185ba5b43)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x483bFC77f28DB242d40aa456D801354fEEBb502E)
 */
export function useJbetherc20ProjectPayerDeployerDeployProjectPayerEvent(
  config: Omit<
    UseContractEventConfig<
      typeof jbetherc20ProjectPayerDeployerABI,
      'DeployProjectPayer'
    >,
    'abi' | 'eventName'
  > & {
    chainId?: keyof typeof jbetherc20ProjectPayerDeployerAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbetherc20ProjectPayerDeployerABI,
    address:
      jbetherc20ProjectPayerDeployerAddress[
        chainId as keyof typeof jbetherc20ProjectPayerDeployerAddress
      ],
    eventName: 'DeployProjectPayer',
    ...config,
  } as UseContractEventConfig<
    typeof jbetherc20ProjectPayerDeployerABI,
    'DeployProjectPayer'
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbetherc20SplitsPayerDeployerABI}__.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3ff1f0583a41CE8B9463F74a1227C75FC13f7C27)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x4C466008867c471316Be2606E5D76D1940fC4765)
 */
export function useJbetherc20SplitsPayerDeployerWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbetherc20SplitsPayerDeployerAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbetherc20SplitsPayerDeployerABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      > & { address?: Address; chainId?: TChainId }
    : UseContractWriteConfig<
        typeof jbetherc20SplitsPayerDeployerABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof jbetherc20SplitsPayerDeployerABI,
    TFunctionName,
    TMode
  >({
    abi: jbetherc20SplitsPayerDeployerABI,
    address:
      jbetherc20SplitsPayerDeployerAddress[
        chainId as keyof typeof jbetherc20SplitsPayerDeployerAddress
      ],
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbetherc20SplitsPayerDeployerABI}__ and `functionName` set to `"deploySplitsPayer"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3ff1f0583a41CE8B9463F74a1227C75FC13f7C27)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x4C466008867c471316Be2606E5D76D1940fC4765)
 */
export function useJbetherc20SplitsPayerDeployerDeploySplitsPayer<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbetherc20SplitsPayerDeployerAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbetherc20SplitsPayerDeployerABI,
          'deploySplitsPayer'
        >['request']['abi'],
        'deploySplitsPayer',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'deploySplitsPayer'
      }
    : UseContractWriteConfig<
        typeof jbetherc20SplitsPayerDeployerABI,
        'deploySplitsPayer',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'deploySplitsPayer'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof jbetherc20SplitsPayerDeployerABI,
    'deploySplitsPayer',
    TMode
  >({
    abi: jbetherc20SplitsPayerDeployerABI,
    address:
      jbetherc20SplitsPayerDeployerAddress[
        chainId as keyof typeof jbetherc20SplitsPayerDeployerAddress
      ],
    functionName: 'deploySplitsPayer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbetherc20SplitsPayerDeployerABI}__ and `functionName` set to `"deploySplitsPayerWithSplits"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3ff1f0583a41CE8B9463F74a1227C75FC13f7C27)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x4C466008867c471316Be2606E5D76D1940fC4765)
 */
export function useJbetherc20SplitsPayerDeployerDeploySplitsPayerWithSplits<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof jbetherc20SplitsPayerDeployerAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbetherc20SplitsPayerDeployerABI,
          'deploySplitsPayerWithSplits'
        >['request']['abi'],
        'deploySplitsPayerWithSplits',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'deploySplitsPayerWithSplits'
      }
    : UseContractWriteConfig<
        typeof jbetherc20SplitsPayerDeployerABI,
        'deploySplitsPayerWithSplits',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'deploySplitsPayerWithSplits'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof jbetherc20SplitsPayerDeployerABI,
    'deploySplitsPayerWithSplits',
    TMode
  >({
    abi: jbetherc20SplitsPayerDeployerABI,
    address:
      jbetherc20SplitsPayerDeployerAddress[
        chainId as keyof typeof jbetherc20SplitsPayerDeployerAddress
      ],
    functionName: 'deploySplitsPayerWithSplits',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbetherc20SplitsPayerDeployerABI}__.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3ff1f0583a41CE8B9463F74a1227C75FC13f7C27)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x4C466008867c471316Be2606E5D76D1940fC4765)
 */
export function usePrepareJbetherc20SplitsPayerDeployerWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof jbetherc20SplitsPayerDeployerABI,
      TFunctionName
    >,
    'abi'
  > & {
    chainId?: keyof typeof jbetherc20SplitsPayerDeployerAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbetherc20SplitsPayerDeployerABI,
    address:
      jbetherc20SplitsPayerDeployerAddress[
        chainId as keyof typeof jbetherc20SplitsPayerDeployerAddress
      ],
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof jbetherc20SplitsPayerDeployerABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbetherc20SplitsPayerDeployerABI}__ and `functionName` set to `"deploySplitsPayer"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3ff1f0583a41CE8B9463F74a1227C75FC13f7C27)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x4C466008867c471316Be2606E5D76D1940fC4765)
 */
export function usePrepareJbetherc20SplitsPayerDeployerDeploySplitsPayer(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof jbetherc20SplitsPayerDeployerABI,
      'deploySplitsPayer'
    >,
    'abi' | 'functionName'
  > & {
    chainId?: keyof typeof jbetherc20SplitsPayerDeployerAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbetherc20SplitsPayerDeployerABI,
    address:
      jbetherc20SplitsPayerDeployerAddress[
        chainId as keyof typeof jbetherc20SplitsPayerDeployerAddress
      ],
    functionName: 'deploySplitsPayer',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof jbetherc20SplitsPayerDeployerABI,
    'deploySplitsPayer'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbetherc20SplitsPayerDeployerABI}__ and `functionName` set to `"deploySplitsPayerWithSplits"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3ff1f0583a41CE8B9463F74a1227C75FC13f7C27)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x4C466008867c471316Be2606E5D76D1940fC4765)
 */
export function usePrepareJbetherc20SplitsPayerDeployerDeploySplitsPayerWithSplits(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof jbetherc20SplitsPayerDeployerABI,
      'deploySplitsPayerWithSplits'
    >,
    'abi' | 'functionName'
  > & {
    chainId?: keyof typeof jbetherc20SplitsPayerDeployerAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: jbetherc20SplitsPayerDeployerABI,
    address:
      jbetherc20SplitsPayerDeployerAddress[
        chainId as keyof typeof jbetherc20SplitsPayerDeployerAddress
      ],
    functionName: 'deploySplitsPayerWithSplits',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof jbetherc20SplitsPayerDeployerABI,
    'deploySplitsPayerWithSplits'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbetherc20SplitsPayerDeployerABI}__.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3ff1f0583a41CE8B9463F74a1227C75FC13f7C27)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x4C466008867c471316Be2606E5D76D1940fC4765)
 */
export function useJbetherc20SplitsPayerDeployerEvent<
  TEventName extends string,
>(
  config: Omit<
    UseContractEventConfig<typeof jbetherc20SplitsPayerDeployerABI, TEventName>,
    'abi'
  > & {
    chainId?: keyof typeof jbetherc20SplitsPayerDeployerAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbetherc20SplitsPayerDeployerABI,
    address:
      jbetherc20SplitsPayerDeployerAddress[
        chainId as keyof typeof jbetherc20SplitsPayerDeployerAddress
      ],
    ...config,
  } as UseContractEventConfig<
    typeof jbetherc20SplitsPayerDeployerABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbetherc20SplitsPayerDeployerABI}__ and `eventName` set to `"DeploySplitsPayer"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x3ff1f0583a41CE8B9463F74a1227C75FC13f7C27)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x4C466008867c471316Be2606E5D76D1940fC4765)
 */
export function useJbetherc20SplitsPayerDeployerDeploySplitsPayerEvent(
  config: Omit<
    UseContractEventConfig<
      typeof jbetherc20SplitsPayerDeployerABI,
      'DeploySplitsPayer'
    >,
    'abi' | 'eventName'
  > & {
    chainId?: keyof typeof jbetherc20SplitsPayerDeployerAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: jbetherc20SplitsPayerDeployerABI,
    address:
      jbetherc20SplitsPayerDeployerAddress[
        chainId as keyof typeof jbetherc20SplitsPayerDeployerAddress
      ],
    eventName: 'DeploySplitsPayer',
    ...config,
  } as UseContractEventConfig<
    typeof jbetherc20SplitsPayerDeployerABI,
    'DeploySplitsPayer'
  >)
}
